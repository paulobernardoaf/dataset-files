<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_typelib.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<struct>struct <name>oletypelibdata</name> <block>{

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>reg_get_typelib_file_path</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oletypelib_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>oletypelib_from_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeLib</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_s_typelibs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oletypelib_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oletypelib_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>oletypelib_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oletypelib_search_registry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oletypelib_get_libattr</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>TLIBATTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTLibAttr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oletypelib_search_registry2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>make_version_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>minor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_major_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_minor_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_library_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_types_from_typelib</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>classes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>typelib_file_from_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>typelib_file_from_clsid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletypelib_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>oletypelib_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_typelib"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>oletypelib_free</name></expr>, <expr><name>oletypelib_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>reg_get_typelib_file_path</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><literal type="string">"win64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><literal type="string">"win32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><literal type="string">"win16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oletypelib_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hlang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"TypeLib\\"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>path</name> <operator>==</operator> <name>Qnil</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>reg_get_typelib_file_path</name><argument_list>(<argument><expr><name>hlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>oletypelib_from_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeLib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>oletypelib_path</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>E_UNEXPECTED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>LoadTypeLibEx</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>REGKIND_NONE</name></expr></argument>, <argument><expr><name>ppTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ITypeLib</name> <modifier>*</modifier></type>

<name>itypelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypelibdata</name></name> <modifier>*</modifier></type><name>ptlib</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oletypelibdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletypelib_datatype</name></expr></argument>, <argument><expr><name>ptlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ptlib</name><operator>-&gt;</operator><name>pTypeLib</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_typelib_from_itypeinfo</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>retval</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>create_win32ole_typelib</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_s_typelibs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>htypelib</name></decl>, <decl><type ref="prev"/><name>hguid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelibs</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"TypeLib"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>typelibs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guid</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>oletypelib_from_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>create_win32ole_typelib</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typelibs</name></expr></argument>, <argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>typelibs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oletypelib_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypelibdata</name></name> <modifier>*</modifier></type><name>ptlib</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oletypelibdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletypelib_datatype</name></expr></argument>, <argument><expr><name>ptlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptlib</name><operator>-&gt;</operator><name>pTypeLib</name></name> <operator>=</operator> <name>pTypeLib</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oletypelib_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypelibdata</name></name> <modifier>*</modifier></type><name>poletypelib</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>poletypelib</name><operator>-&gt;</operator><name>pTypeLib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>poletypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>oletypelib_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oletypelibdata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypelibdata</name></name> <modifier>*</modifier></type><name>poletypelib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>oletypelibdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletypelib_datatype</name></expr></argument>, <argument><expr><name>poletypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poletypelib</name><operator>-&gt;</operator><name>pTypeLib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>create_win32ole_typelib</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>foletypelib_s_allocate</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oletypelib_set_member</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oletypelib_search_registry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>htypelib</name></decl>, <decl><type ref="prev"/><name>hguid</name></decl>, <decl><type ref="prev"/><name>hversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>found</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tlib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"TypeLib"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guid</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>found</name> <operator>==</operator> <name>Qfalse</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tlib</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tlib</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>, <argument><expr><name>tlib</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>oletypelib_from_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oletypelib_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oletypelib_get_libattr</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>TLIBATTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTLibAttr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>ppTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to get library attribute(TLIBATTR) from ITypeLib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oletypelib_search_registry2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>htypelib</name></decl>, <decl><type ref="prev"/><name>hguid</name></decl>, <decl><type ref="prev"/><name>hversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>found</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tlib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guid</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>version_str</name> <operator>=</operator> <call><name>make_version_str</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"TypeLib"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version_str</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>version_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tlib</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tlib</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <name>tlib</name></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <name>version_str</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fver</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tlib</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tlib</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fver</name> <operator>&lt;</operator> <call><name>atof</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fver</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <name>tlib</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hguid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typelib</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>oletypelib_from_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>found</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type> <name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>oletypelib_search_registry</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>oletypelib_search_registry2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>LoadTypeLibEx</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>REGKIND_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not found type library `%s`"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name></type> <name><name>bstr</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guid</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>StringFromGUID2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTLibAttr</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OLECHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>ole_wc2vstr</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>guid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get name from ITypeLib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>make_version_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version_str</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>minor_str</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>major</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version_str</name> <operator>=</operator> <call><name>rb_String</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minor</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minor_str</name> <operator>=</operator> <call><name>rb_String</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>version_str</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>version_str</name></expr></argument>, <argument><expr><name>minor_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>version_str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMajorVerNum</name></name></expr></argument>, <argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMinorVerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>version</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_major_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMajorVerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>major</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_minor_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMinorVerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>minor</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>QueryPathOfRegTypeLib</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTLibAttr</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>,

<argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMajorVerNum</name></name></expr></argument>,

<argument><expr><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wMinorVerNum</name></name></expr></argument>,

<argument><expr><name>lcid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to QueryPathOfRegTypeTypeLib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>visible</name> <init>= <expr><name>Qtrue</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLIBATTR</name> <modifier>*</modifier></type><name>pTLibAttr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oletypelib_get_libattr</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wLibFlags</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wLibFlags</name></name> <operator>&amp;</operator> <name>LIBFLAG_FRESTRICTED</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>pTLibAttr</name><operator>-&gt;</operator><name>wLibFlags</name></name> <operator>&amp;</operator> <name>LIBFLAG_FHIDDEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTLibAttr</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>pTLibAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>visible</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_library_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>libname</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get library name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>libname</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>libname</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_types_from_typelib</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>classes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>create_win32ole_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>classes</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>classes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>typelib_file_from_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>htypelib</name></decl>, <decl><type ref="prev"/><name>hclsid</name></decl>, <decl><type ref="prev"/><name>hversion</name></decl>, <decl><type ref="prev"/><name>hlang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>clsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>lang</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"TypeLib"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>clsid</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clsid</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>, <argument><expr><name>clsid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fver</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name> <operator>||</operator> <name>fver</name> <operator>&gt;</operator> <call><name>atof</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fver</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typelib</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>, <argument><expr><name>ole</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>reg_get_typelib_file_path</name><argument_list>(<argument><expr><name>hlang</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>htypelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>typelib_file_from_clsid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hroot</name></decl>, <decl><type ref="prev"/><name>hclsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"CLSID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>hroot</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>, <argument><expr><literal type="string">"InprocServer32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typelib</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ExpandEnvironmentStrings</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>typelib</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>typelib_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name> <init>= <expr><call><name>typelib_file_from_clsid</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>typelib_file_from_typelib</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>classes</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeLib</name> <operator>=</operator> <call><name>itypelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_types_from_typelib</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>classes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletypelib_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>default_inspect</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"WIN32OLE_TYPELIB"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_win32ole_typelib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_TYPELIB</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_TYPELIB"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"typelibs"</literal></expr></argument>, <argument><expr><name>foletypelib_s_typelibs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><name>foletypelib_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>foletypelib_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"guid"</literal></expr></argument>, <argument><expr><name>foletypelib_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>foletypelib_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>foletypelib_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"major_version"</literal></expr></argument>, <argument><expr><name>foletypelib_major_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"minor_version"</literal></expr></argument>, <argument><expr><name>foletypelib_minor_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>foletypelib_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"ole_types"</literal></expr></argument>, <argument><expr><name>foletypelib_ole_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"ole_classes"</literal></expr></argument>, <argument><expr><literal type="string">"ole_types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"visible?"</literal></expr></argument>, <argument><expr><name>foletypelib_visible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"library_name"</literal></expr></argument>, <argument><expr><name>foletypelib_library_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>foletypelib_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
