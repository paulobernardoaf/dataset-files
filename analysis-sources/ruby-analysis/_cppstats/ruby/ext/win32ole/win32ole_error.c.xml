<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_error.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_hresult2msg</name><parameter_list>(<parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_hresult2msg</name><parameter_list>(<parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>msg</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>strhr</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>strhr</name></expr></argument>, <argument><expr><literal type="string">" HRESULT error code:0x%08x\n "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>strhr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dwCount</name> <operator>=</operator> <call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>

<name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>

<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>,

<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_ENGLISH_US</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><operator>&amp;</operator><name>p_msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dwCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dwCount</name> <operator>=</operator> <call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>

<name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>

<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>, <argument><expr><name>cWIN32OLE_lcid</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><operator>&amp;</operator><name>p_msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dwCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>p_msg</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p_msg</name> <operator>&lt;</operator> <name>term</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>term</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>term</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>term</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>term</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>p_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>p_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>p_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>msg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_raise</name><parameter_list>(<parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>err_msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_init_list</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>rb_vsprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ole_hresult2msg</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>ecs</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_win32ole_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>eWIN32OLERuntimeError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLERuntimeError"</literal></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eWIN32OLEQueryInterfaceError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLEQueryInterfaceError"</literal></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
