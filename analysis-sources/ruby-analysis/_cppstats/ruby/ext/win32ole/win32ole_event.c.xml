<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<function_decl><type><name>RUBY_EXTERN</name> <name>void</name></type> <name>rb_write_error_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>IEventSinkVtbl</name></name> <modifier>*</modifier></type> <name>lpVtbl</name></decl>;</decl_stmt>

}</block></struct></type> <name>IEventSink</name><operator>,</operator> *<name>PEVENTSINK</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IEventSinkVtbl</name></name></type> <name>IEventSinkVtbl</name>;</typedef>

<struct>struct <name>IEventSinkVtbl</name> <block>{

<function_decl><type><name>STDMETHOD</name></type>(<name>QueryInterface</name>)<parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type></decl></parameter>,

<parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PEVENTSINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PEVENTSINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetTypeInfoCount</name>)<parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>,

<parameter><decl><type><name>UINT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetTypeInfo</name>)<parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>,

<parameter><decl><type><name>UINT</name></type></decl></parameter>,

<parameter><decl><type><name>LCID</name></type></decl></parameter>,

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetIDsOfNames</name>)<parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type></decl></parameter>,

<parameter><decl><type><name>OLECHAR</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>UINT</name></type></decl></parameter>,

<parameter><decl><type><name>LCID</name></type></decl></parameter>,

<parameter><decl><type><name>DISPID</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>Invoke</name>)<parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>,

<parameter><decl><type><name>DISPID</name></type></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type></decl></parameter>,

<parameter><decl><type><name>LCID</name></type></decl></parameter>,

<parameter><decl><type><name>WORD</name></type></decl></parameter>,

<parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>UINT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>tagIEVENTSINKOBJ</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>IEventSinkVtbl</name> <modifier>*</modifier></type><name>lpVtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>m_cRef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IID</name></type> <name>m_iid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>m_event_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

}</block></struct></type><name>IEVENTSINKOBJ</name><operator>,</operator> *<name>PIEVENTSINKOBJ</name>;</typedef>

<struct>struct <name>oleeventdata</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCookie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IConnectionPoint</name> <modifier>*</modifier></type><name>pConnectionPoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>event_id</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ary_ole_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cWIN32OLE_EVENT</name></decl>;</decl_stmt>

<function_decl><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_QueryInterface</name><parameter_list>(<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>, <parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>EVENTSINK_AddRef</name><argument_list>(<argument><expr><name>PEVENTSINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>EVENTSINK_Release</name><argument_list>(<argument><expr><name>PEVENTSINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetTypeInfoCount</name><parameter_list>(<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetTypeInfo</name><parameter_list>(<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>LCID</name></type></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetIDsOfNames</name><parameter_list>(<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>, <parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>OLECHAR</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>LCID</name></type></decl></parameter>, <parameter><decl><type><name>DISPID</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_Invoke</name><parameter_list>(<parameter><decl><type><name>PEVENTSINK</name></type></decl></parameter>, <parameter><decl><type><name>DISPID</name></type></decl></parameter>, <parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>LCID</name></type></decl></parameter>, <parameter><decl><type><name>WORD</name></type></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VARIANT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>EXCEPINFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IEventSinkVtbl</name></type> <name>vtEventSink</name> <init>= <expr><block>{

<expr><name>EVENTSINK_QueryInterface</name></expr>,

<expr><name>EVENTSINK_AddRef</name></expr>,

<expr><name>EVENTSINK_Release</name></expr>,

<expr><name>EVENTSINK_GetTypeInfoCount</name></expr>,

<expr><name>EVENTSINK_GetTypeInfo</name></expr>,

<expr><name>EVENTSINK_GetIDsOfNames</name></expr>,

<expr><name>EVENTSINK_Invoke</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>EVENTSINK_Destructor</name><parameter_list>(<parameter><decl><type><name>PIEVENTSINKOBJ</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_val2ptr_variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hash2ptr_dispparams</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>DISPID</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type><name>pdispparams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>hash2result</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ary2ptr_dispparams</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type><name>pdispparams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>exec_callback</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rescue_callback</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>find_iid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pitf</name></decl></parameter>, <parameter><decl><type><name>IID</name> <modifier>*</modifier></type><name>piid</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>find_coclass</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTypeInfo2</name></decl></parameter>, <parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTypeAttr2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>find_default_source_from_typeinfo</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>find_default_source</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>IID</name> <modifier>*</modifier></type><name>piid</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>ole_search_event_at</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_search_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>is_default</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_search_handler_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>is_default_handler</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_delete_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oleevent_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>oleevent_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ev_advise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_msg_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_s_msg_loop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_event_call_back</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ev_on_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>is_ary_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_on_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_on_event_with_outargs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_off_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_unadvise</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_set_handler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fev_get_handler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>evs_push</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>evs_delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>evs_entry</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>evs_length</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>oleevent_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_event"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>oleevent_free</name></expr>, <expr><name>oleevent_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_Invoke</name><parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type> <name>pEventSink</name></decl></parameter>,

<parameter><decl><type><name>DISPID</name></type> <name>dispid</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>wFlags</name></decl></parameter>,

<parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type><name>pdispparams</name></decl></parameter>,

<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvarResult</name></decl></parameter>,

<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type><name>pexcepinfo</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <modifier>*</modifier></type><name>puArgErr</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>obj</name></decl>, <decl><type ref="prev"/><name>event</name></decl>, <decl><type ref="prev"/><name>args</name></decl>, <decl><type ref="prev"/><name>outargv</name></decl>, <decl><type ref="prev"/><name>ev</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>is_outarg</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>is_default_handler</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEV</name> <init>= <expr><operator>(</operator><name>PIEVENTSINKOBJ</name><operator>)</operator><name>pEventSink</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeInfo</name> <operator>=</operator> <name><name>pEV</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>evs_entry</name><argument_list>(<argument><expr><name><name>pEV</name><operator>-&gt;</operator><name>m_event_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>ole_search_event</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_default_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_outarg</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>ole_search_handler_method</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_default_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <name>Qnil</name> <operator>||</operator> <name>mid</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_default_handler</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pvar</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdispparams</name><operator>-&gt;</operator><name>rgvarg</name><index>[<expr><name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ole_variant2val</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>outargv</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_outarg</name> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outargv</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>outargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>exec_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rescue_callback</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hash2ptr_dispparams</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>, <argument><expr><name>pdispparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash2result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>is_outarg</name> <operator>==</operator> <name>Qtrue</name> <operator>&amp;&amp;</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>outargv</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ary2ptr_dispparams</name><argument_list>(<argument><expr><name>outargv</name></expr></argument>, <argument><expr><name>pdispparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pvarResult</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><name>pvarResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pvarResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STDMETHODIMP</name></type>

<name>EVENTSINK_QueryInterface</name><parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type> <name>pEV</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>iid</name></decl></parameter>,

<parameter><decl><type><name>LPVOID</name><modifier>*</modifier></type> <name>ppv</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsEqualIID</name><argument_list>(<argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsEqualIID</name><argument_list>(<argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>PIEVENTSINKOBJ</name><operator>)</operator><name>pEV</name><operator>)</operator><operator>-&gt;</operator><name>m_iid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>pEV</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>LPUNKNOWN</name><operator>)</operator><operator>*</operator><name>ppv</name><operator>)</operator><operator>-&gt;</operator><call><name><name>lpVtbl</name><operator>-&gt;</operator><name>AddRef</name></name><argument_list>(<argument><expr><operator>(</operator><name>LPUNKNOWN</name><operator>)</operator><operator>*</operator><name>ppv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></function>

<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>

<macro><name>EVENTSINK_AddRef</name><argument_list>(

<argument>PEVENTSINK pEV</argument>

)</argument_list></macro><block>{<block_content>

<decl_stmt><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEVObj</name> <init>= <expr><operator>(</operator><name>PIEVENTSINKOBJ</name><operator>)</operator><name>pEV</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>++</operator><name><name>pEVObj</name><operator>-&gt;</operator><name>m_cRef</name></name></expr>;</return>

</block_content>}</block>

<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <macro><name>EVENTSINK_Release</name><argument_list>(

<argument>PEVENTSINK pEV</argument>

)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEVObj</name> <init>= <expr><operator>(</operator><name>PIEVENTSINKOBJ</name><operator>)</operator><name>pEV</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>pEVObj</name><operator>-&gt;</operator><name>m_cRef</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pEVObj</name><operator>-&gt;</operator><name>m_cRef</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pEVObj</name><operator>-&gt;</operator><name>m_cRef</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVENTSINK_Destructor</name><argument_list>(<argument><expr><name>pEVObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<function><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetTypeInfoCount</name><parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type> <name>pEV</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <modifier>*</modifier></type><name>pct</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetTypeInfo</name><parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type> <name>pEV</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>info</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pInfo</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>DISP_E_BADINDEX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STDMETHODIMP</name></type> <name>EVENTSINK_GetIDsOfNames</name><parameter_list>(

<parameter><decl><type><name>PEVENTSINK</name></type> <name>pEventSink</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>OLECHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>szNames</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>cNames</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>DISPID</name> <modifier>*</modifier></type><name>pDispID</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEV</name> <init>= <expr><operator>(</operator><name>PIEVENTSINKOBJ</name><operator>)</operator><name>pEventSink</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pTypeInfo</name> <operator>=</operator> <name><name>pEV</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pTypeInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetIDsOfNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>szNames</name></expr></argument>, <argument><expr><name>cNames</name></expr></argument>, <argument><expr><name>pDispID</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DISP_E_UNKNOWNNAME</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>PIEVENTSINKOBJ</name></type>

<name>EVENTSINK_Constructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pEv</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>IEVENTSINKOBJ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pEv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pEv</name><operator>-&gt;</operator><name>lpVtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>vtEventSink</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pEv</name><operator>-&gt;</operator><name>m_cRef</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pEv</name><operator>-&gt;</operator><name>m_event_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pEv</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>pEv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>EVENTSINK_Destructor</name><parameter_list>(

<parameter><decl><type><name>PIEVENTSINKOBJ</name></type> <name>pEVObj</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pEVObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>pEVObj</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pEVObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pEVObj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_val2ptr_variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>T_STRING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>VT_BSTR</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>V_BSTRREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<switch>switch<condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>(</operator><name>VT_UI1</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_UI1REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RB_NUM2CHR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_I2</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_I2REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_I4</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_I4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_R4</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_R4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_R8</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_R8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>

<switch>switch<condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>(</operator><name>VT_I2</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_I2REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_I4</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_I4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_R4</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_R4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>VT_R8</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr> :</case>

<expr_stmt><expr><operator>*</operator><call><name>V_R8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>VT_R8</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>V_R8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>rb_big2dbl</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_TRUE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>VT_BOOL</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>V_BOOLREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VARIANT_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_FALSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>VT_BOOL</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>V_BOOLREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VARIANT_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>hash2ptr_dispparams</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>DISPID</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type><name>pdispparams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>bstrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bstrs</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>BSTR</name></expr></argument>, <argument><expr><name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>,

<argument><expr><name>bstrs</name></expr></argument>, <argument><expr><name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name><name>bstrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>RB_UINT2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_str_intern</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pvar</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdispparams</name><operator>-&gt;</operator><name>rgvarg</name><index>[<expr><name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2ptr_variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>hash2result</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_str_intern</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ary2ptr_dispparams</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name> <modifier>*</modifier></type><name>pdispparams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pvar</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdispparams</name><operator>-&gt;</operator><name>rgvarg</name><index>[<expr><name><name>pdispparams</name><operator>-&gt;</operator><name>cArgs</name></name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2ptr_variant</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>exec_callback</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>parg</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr><name><name>parg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mid</name> <init>= <expr><name><name>parg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name> <init>= <expr><name><name>parg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_apply</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rescue_callback</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>rb_errinfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>bt</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"backtrace"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>msg</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>bt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">": %"</literal><name>PRIsVALUE</name><literal type="string">" (%s)\n"</literal></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_write_error_str</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_backtrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ruby_finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>find_iid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pitf</name></decl></parameter>, <parameter><decl><type><name>IID</name> <modifier>*</modifier></type><name>piid</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>RefType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pImplTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pImplTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>is_found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pitf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoOfGuid</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>,

<argument><expr><name>piid</name></expr></argument>,

<argument><expr><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>,

<argument><expr><name>index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>typekind</name></name> <operator>==</operator> <name>TKIND_COCLASS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>RefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>RefType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pImplTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pImplTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pImplTypeInfo</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pImplTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>ole_wc2mb</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pitf</name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pImplTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeAttr</name></name><argument_list>(<argument><expr><name>pImplTypeInfo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pImplTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>piid</name> <operator>=</operator> <name><name>pImplTypeAttr</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ppTypeInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppTypeInfo</name> <operator>=</operator> <name>pImplTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>ppTypeInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>lpVtbl</name><operator>-&gt;</operator><name>AddRef</name></name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ppTypeInfo</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pImplTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTypeAttr</name></name><argument_list>(<argument><expr><name>pImplTypeInfo</name></expr></argument>,

<argument><expr><name>pImplTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pImplTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_found</name> <operator>||</operator> <call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_found</name> <operator>||</operator> <call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_found</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>find_coclass</name><parameter_list>(

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>,

<parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl></parameter>,

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCOTypeInfo</name></decl></parameter>,

<parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCOTypeAttr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>E_NOINTERFACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>href</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pRefTypeAttr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pTypeAttr2</name><operator>-&gt;</operator><name>typekind</name></name> <operator>!=</operator> <name>TKIND_COCLASS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>pTypeAttr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pTypeAttr2</name><operator>-&gt;</operator><name>cImplTypes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo2</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetImplTypeFlags</name></name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IMPLTYPEFLAG_FDEFAULT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo2</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo2</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTypeAttr</name><operator>-&gt;</operator><name>guid</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRefTypeAttr</name><operator>-&gt;</operator><name>guid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>pTypeAttr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCOTypeInfo</name> <operator>=</operator> <name>pTypeInfo2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pCOTypeAttr</name> <operator>=</operator> <name>pTypeAttr2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>S_OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_NOINTERFACE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>find_default_source_from_typeinfo</name><parameter_list>(

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>,

<parameter><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl></parameter>,

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>E_NOINTERFACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>hRefType</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetImplTypeFlags</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IMPLTYPEFLAG_FDEFAULT</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IMPLTYPEFLAG_FSOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>hRefType</name></expr></argument>, <argument><expr><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>find_default_source</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>IID</name> <modifier>*</modifier></type><name>piid</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IProvideClassInfo2</name> <modifier>*</modifier></type><name>pProvideClassInfo2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IProvideClassInfo</name> <modifier>*</modifier></type><name>pProvideClassInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IProvideClassInfo2</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pProvideClassInfo2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pProvideClassInfo2</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetGUID</name></name><argument_list>(<argument><expr><name>pProvideClassInfo2</name></expr></argument>,

<argument><expr><name>GUIDKIND_DEFAULT_SOURCE_DISP_IID</name></expr></argument>,

<argument><expr><name>piid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pProvideClassInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_iid</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>piid</name></expr></argument>, <argument><expr><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IProvideClassInfo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pProvideClassInfo</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pProvideClassInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetClassInfo</name></name><argument_list>(<argument><expr><name>pProvideClassInfo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pProvideClassInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppTypeInfo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_default_source_from_typeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>, <argument><expr><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ppTypeInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_coclass</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_default_source_from_typeinfo</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>pTypeAttr2</name></expr></argument>, <argument><expr><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>, <argument><expr><name>pTypeAttr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ppTypeInfo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_UNEXPECTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>ppTypeInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeAttr</name></name></name><argument_list>(<argument><expr><operator>*</operator><name>ppTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>piid</name> <operator>=</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>ppTypeInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTypeAttr</name></name></name><argument_list>(<argument><expr><operator>*</operator><name>ppTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><operator>*</operator><name>ppTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>ole_search_event_at</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_name</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>event_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_search_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>is_default</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>def_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_default</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>def_event</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_name</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_default</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>def_event</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>event_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_default</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>event</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>def_event</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_search_handler_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>is_default_handler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mid</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_default_handler</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_to_id</name><argument_list>(<argument><expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"on%"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>mid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"method_missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_default_handler</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>mid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_delete_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>at</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>ole_search_event_at</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_delete_at</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oleevent_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oleeventdata</name></name> <modifier>*</modifier></type><name>poleev</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Unadvise</name></name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr></argument>, <argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>dwCookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>poleev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>oleevent_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oleeventdata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oleeventdata</name></name> <modifier>*</modifier></type><name>poleev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>oleeventdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleevent_datatype</name></expr></argument>, <argument><expr><name>poleev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>dwCookie</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>event_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ev_advise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ole</name></decl>, <decl><type ref="prev"/><name>itf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pitf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IID</name></type> <name>iid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IConnectionPointContainer</name> <modifier>*</modifier></type><name>pContainer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IConnectionPoint</name> <modifier>*</modifier></type><name>pConnectionPoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IEVENTSINKOBJ</name> <modifier>*</modifier></type><name>pIEV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCookie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oleeventdata</name></name> <modifier>*</modifier></type><name>poleev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"1st parameter must be WIN32OLE object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>itf</name></expr></argument>, <argument><expr><name>T_NIL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitf</name> <operator>=</operator> <call><name>StringValuePtr</name><argument_list>(<argument><expr><name>itf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_iid</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><name>pitf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>find_default_source</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"interface not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IConnectionPointContainer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>,

<argument><expr><literal type="string">"failed to query IConnectionPointContainer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pContainer</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pContainer</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>FindConnectionPoint</name></name><argument_list>(<argument><expr><name>pContainer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>iid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pConnectionPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to query IConnectionPoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pIEV</name> <operator>=</operator> <call><name>EVENTSINK_Constructor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIEV</name><operator>-&gt;</operator><name>m_iid</name></name> <operator>=</operator> <name>iid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pConnectionPoint</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Advise</name></name><argument_list>(<argument><expr><name>pConnectionPoint</name></expr></argument>,

<argument><expr><operator>(</operator><name>IUnknown</name><operator>*</operator><operator>)</operator><name>pIEV</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dwCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"Advise Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleeventdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleevent_datatype</name></expr></argument>, <argument><expr><name>poleev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIEV</name><operator>-&gt;</operator><name>m_event_id</name></name> <operator>=</operator> <call><name>evs_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIEV</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>dwCookie</name></name> <operator>=</operator> <name>dwCookie</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name> <operator>=</operator> <name>pConnectionPoint</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>event_id</name></name> <operator>=</operator> <name><name>pIEV</name><operator>-&gt;</operator><name>m_event_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>pDispatch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ev_advise</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evs_push</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_events</name></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fev_set_handler</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_msg_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_s_msg_loop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ole_msg_loop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_event_call_back</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>events</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>events</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_events</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_delete_event</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ev_on_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>is_ary_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oleeventdata</name></name> <modifier>*</modifier></type><name>poleev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event</name></decl>, <decl><type ref="prev"/><name>args</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleeventdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleevent_datatype</name></expr></argument>, <argument><expr><name>poleev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"IConnectionPoint not found. You must call advise at first."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01*"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type (expected String or Symbol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>is_ary_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_event_call_back</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_on_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ev_on_event</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_on_event_with_outargs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ev_on_event</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_off_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>events</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type (expected String or Symbol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>events</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_delete_event</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_unadvise</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oleeventdata</name></name> <modifier>*</modifier></type><name>poleev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleeventdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleevent_datatype</name></expr></argument>, <argument><expr><name>poleev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_msg_loop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evs_delete</name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>event_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Unadvise</name></name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr></argument>, <argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>dwCookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poleev</name><operator>-&gt;</operator><name>pConnectionPoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>poleev</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>evs_push</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary_ole_event</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>evs_delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary_ole_event</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>evs_entry</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary_ole_event</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>evs_length</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary_ole_event</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_set_handler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fev_get_handler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_win32ole_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<expr_stmt><expr><name>ary_ole_event</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>ary_ole_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_events</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cWIN32OLE_EVENT</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_EVENT"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"message_loop"</literal></expr></argument>, <argument><expr><name>fev_s_msg_loop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><name>fev_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>fev_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"on_event"</literal></expr></argument>, <argument><expr><name>fev_on_event</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"on_event_with_outargs"</literal></expr></argument>, <argument><expr><name>fev_on_event_with_outargs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"off_event"</literal></expr></argument>, <argument><expr><name>fev_off_event</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"unadvise"</literal></expr></argument>, <argument><expr><name>fev_unadvise</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"handler="</literal></expr></argument>, <argument><expr><name>fev_set_handler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_EVENT</name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>, <argument><expr><name>fev_get_handler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
