<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_type.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<struct>struct <name>oletypedata</name> <block>{

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oletype_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>oletype_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_s_ole_classes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_s_typelibs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_s_progids</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oletype_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oleclass_from_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oleclass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oleclass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_guid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_progid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_progid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_major_version</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_major_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_minor_version</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_minor_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_typekind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_typekind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_helpstring</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_helpstring</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_src_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_src_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_helpfile</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_helpfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_helpcontext</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_helpcontext</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variables</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_variables</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_ole_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_type_impl_ole_types</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>implflags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_impl_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_source_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_default_event_sources</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_default_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foletype_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>oletype_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_type"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>oletype_free</name></expr>, <expr><name>oletype_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oletype_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypedata</name></name> <modifier>*</modifier></type><name>poletype</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>poletype</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>poletype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>oletype_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oletypedata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>itypeinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypedata</name></name> <modifier>*</modifier></type><name>ptype</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oletypedata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletype_datatype</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ptype</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_type_from_itypeinfo</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>( <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>( <argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>create_win32ole_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_s_ole_classes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPELIB</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"ole_types"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_s_typelibs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_eval_string</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_TYPELIB.typelibs.collect{|t|t.name}"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_s_progids</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hclsids</name></decl>, <decl><type ref="prev"/><name>hclsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>clsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>progids</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_key</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><literal type="string">"CLSID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hclsids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>progids</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>clsid</name> <operator>=</operator> <call><name>reg_enum_key</name><argument_list>(<argument><expr><name>hclsids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clsid</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>reg_open_vkey</name><argument_list>(<argument><expr><name>hclsids</name></expr></argument>, <argument><expr><name>clsid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>, <argument><expr><literal type="string">"ProgID"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>progids</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>reg_get_val2</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>, <argument><expr><literal type="string">"VersionIndependentProgID"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>progids</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hclsids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>progids</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oletype_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypedata</name></name> <modifier>*</modifier></type><name>ptype</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oletypedata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletype_datatype</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptype</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oletypedata</name></name> <modifier>*</modifier></type><name>poletype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,<argument><expr>struct <name>oletypedata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oletype_datatype</name></expr></argument>, <argument><expr><name>poletype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>poletype</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>create_win32ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>foletype_s_allocate</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oletype_set_member</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>oleclass_from_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oleclass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typelib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>found</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>found</name> <operator>==</operator> <name>Qfalse</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>typelib</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>oleclass</name></expr></argument>, <argument><expr><name>typelib</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oletype_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typelib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oleclass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type> <name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>oleclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>typelib_file</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>typelib</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>LoadTypeLibEx</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>REGKIND_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to LoadTypeLibEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oleclass_from_typelib</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>oleclass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not found `%s` in `%s`"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>oleclass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>typekind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TKIND_ENUM</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_RECORD</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Record"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_MODULE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_INTERFACE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_DISPATCH</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Dispatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_COCLASS</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_ALIAS</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Alias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_UNION</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Union"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TKIND_MAX</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_ole_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_guid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name></type> <name><name>bstr</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guid</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>guid</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>StringFromGUID2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTypeAttr</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OLECHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>ole_wc2vstr</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>guid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_guid</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_progid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>progid</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>progid</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ProgIDFromCLSID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTypeAttr</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>progid</name> <operator>=</operator> <call><name>ole_wc2vstr</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>progid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_progid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_progid</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>visible</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>wTypeFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>TYPEFLAG_FHIDDEN</name> <operator>|</operator> <name>TYPEFLAG_FRESTRICTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>visible</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_visible</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_major_version</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>wMajorVerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ver</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_major_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_major_version</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_minor_version</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>wMinorVerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ver</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_minor_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_minor_version</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_typekind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typekind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>typekind</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>typekind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>typekind</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_typekind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_typekind</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_helpstring</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bhelpstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhelpstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bhelpstr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_helpstring</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_helpstring</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_src_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>alias</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>alias</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>typekind</name></name> <operator>!=</operator> <name>TKIND_ALIAS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>alias</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTypeAttr</name><operator>-&gt;</operator><name>tdescAlias</name></name><operator>)</operator></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>alias</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_src_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_src_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_helpfile</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bhelpfile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhelpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bhelpfile</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_helpfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_helpfile</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_helpcontext</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>helpcontext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>helpcontext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>helpcontext</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_helpcontext</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_helpcontext</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_variables</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>variables</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cVars</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>bstr</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>create_win32ole_variable</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>variables</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pVarDesc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>variables</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_variables</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_variables</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_methods_from_typeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>INVOKE_FUNC</name> <operator>|</operator> <name>INVOKE_PROPERTYGET</name> <operator>|</operator> <name>INVOKE_PROPERTYPUT</name> <operator>|</operator> <name>INVOKE_PROPERTYPUTREF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_ole_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_typelib_from_itypeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_type_impl_ole_types</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>implflags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>href</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>types</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>types</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetImplTypeFlags</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>implflags</name><operator>)</operator> <operator>==</operator> <name>implflags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_type_from_itypeinfo</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>types</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_impl_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_impl_ole_types</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_source_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_impl_ole_types</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>IMPLTYPEFLAG_FSOURCE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_default_event_sources</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_impl_ole_types</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>IMPLTYPEFLAG_FSOURCE</name><operator>|</operator><name>IMPLTYPEFLAG_FDEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_default_ole_types</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name> <init>= <expr><call><name>itypeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ole_type_impl_ole_types</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>IMPLTYPEFLAG_FDEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>foletype_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>default_inspect</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"WIN32OLE_TYPE"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_win32ole_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_TYPE</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_TYPE"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"ole_classes"</literal></expr></argument>, <argument><expr><name>foletype_s_ole_classes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"typelibs"</literal></expr></argument>, <argument><expr><name>foletype_s_typelibs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"progids"</literal></expr></argument>, <argument><expr><name>foletype_s_progids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><name>foletype_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>foletype_initialize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>foletype_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"ole_type"</literal></expr></argument>, <argument><expr><name>foletype_ole_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"guid"</literal></expr></argument>, <argument><expr><name>foletype_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"progid"</literal></expr></argument>, <argument><expr><name>foletype_progid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"visible?"</literal></expr></argument>, <argument><expr><name>foletype_visible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"major_version"</literal></expr></argument>, <argument><expr><name>foletype_major_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"minor_version"</literal></expr></argument>, <argument><expr><name>foletype_minor_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"typekind"</literal></expr></argument>, <argument><expr><name>foletype_typekind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"helpstring"</literal></expr></argument>, <argument><expr><name>foletype_helpstring</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"src_type"</literal></expr></argument>, <argument><expr><name>foletype_src_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"helpfile"</literal></expr></argument>, <argument><expr><name>foletype_helpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"helpcontext"</literal></expr></argument>, <argument><expr><name>foletype_helpcontext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>, <argument><expr><name>foletype_variables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"ole_methods"</literal></expr></argument>, <argument><expr><name>foletype_methods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"ole_typelib"</literal></expr></argument>, <argument><expr><name>foletype_ole_typelib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"implemented_ole_types"</literal></expr></argument>, <argument><expr><name>foletype_impl_ole_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"source_ole_types"</literal></expr></argument>, <argument><expr><name>foletype_source_ole_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"default_event_sources"</literal></expr></argument>, <argument><expr><name>foletype_default_event_sources</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"default_ole_types"</literal></expr></argument>, <argument><expr><name>foletype_default_ole_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>foletype_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
