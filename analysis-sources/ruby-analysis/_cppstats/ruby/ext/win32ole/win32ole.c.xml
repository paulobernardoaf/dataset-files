<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IID_IMultiLanguage2</name></cpp:undef>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IMultiLanguage2</name> <init>= <expr><block>{<expr><literal type="number">0xDCCFC164</literal></expr>, <expr><literal type="number">0x2B38</literal></expr>, <expr><literal type="number">0x11d2</literal></expr>, <expr><block>{<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x9A</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32OLE_VERSION</name></cpp:macro> <cpp:value>"1.8.8"</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>STDAPICALLTYPE</name> <name>FNCOCREATEINSTANCEEX</name>)

<parameter_list>(<parameter><decl><type><name>REFCLSID</name></type></decl></parameter>, <parameter><decl><type><name>IUnknown</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>COSERVERINFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>MULTI_QI</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>HWND</name></type> (<name>WINAPI</name> <name>FNHTMLHELP</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwndCaller</name></decl></parameter>, <parameter><decl><type><name>LPCSTR</name></type> <name>pszFile</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>uCommand</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>FNENUMSYSEMCODEPAGES</name>) <parameter_list>(<parameter><decl><type><name>CODEPAGE_ENUMPROC</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cWIN32OLE</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_THREAD_SPECIFIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>RB_THREAD_SPECIFIC</name> <name>BOOL</name></type> <name>g_ole_initialized</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ole_initialized_init</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ole_initialized_set</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_ole_initialized = (val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>DWORD</name></type> <name>g_ole_initialized_key</name> <init>= <expr><name>TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ole_initialized</name></cpp:macro> <cpp:value>(TlsGetValue(g_ole_initialized_key)!=0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ole_initialized_init</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(g_ole_initialized_key = TlsAlloc())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ole_initialized_set</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TlsSetValue(g_ole_initialized_key, (void*)(val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_uninitialize_hooked</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_cp_installed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_lcid_installed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_running_nano</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>ghhctrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>gole32</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FNCOCREATEINSTANCEEX</name> <modifier>*</modifier></type><name>gCoCreateInstanceEx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>com_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>enc2cp_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>IDispatchVtbl</name></type> <name>com_vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>cWIN32OLE_cp</name> <init>= <expr><name>CP_ACP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>rb_encoding</name> <modifier>*</modifier></type><name>cWIN32OLE_enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>g_cp_to_check</name> <init>= <expr><name>CP_ACP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>g_lcid_to_check</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VARTYPE</name></type> <name>g_nil_to</name> <init>= <expr><name>VT_ERROR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMessageFilterVtbl</name></type> <name>message_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMessageFilter</name></type> <name>imessage_filter</name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>message_filter</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMessageFilter</name><modifier>*</modifier></type> <name>previous_filter</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMultiLanguage2</name> <modifier>*</modifier></type><name>pIMultiLanguage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMultiLanguage</name> <modifier>*</modifier></type><name>pIMultiLanguage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pIMultiLanguage</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>oleparam</name> <block>{

<decl_stmt><decl><type><name>DISPPARAMS</name></type> <name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNamedArgs</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>QueryInterface</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppvObject</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>AddRef</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>Release</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetTypeInfoCount</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>, <parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pctinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetTypeInfo</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>iTInfo</name></decl></parameter>, <parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppTInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetIDsOfNames</name> )<parameter_list>(<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>LPOLESTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgszNames</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cNames</name></decl></parameter>, <parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>, <parameter><decl><type><name>DISPID</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgDispId</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>Invoke</name> )<parameter_list>( <parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>, <parameter><decl><type><name>DISPID</name></type> <name>dispIdMember</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>wFlags</name></decl></parameter>, <parameter><decl><type><name>DISPPARAMS</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pDispParams</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pVarResult</name></decl></parameter>, <parameter><decl><type><name>EXCEPINFO</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pExcepInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>puArgErr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>IDispatch</name><modifier>*</modifier></type> <name>val2dispatch</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>rbtime2vtdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tmobj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>vtdate2rbtime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>rb_encoding</name> <modifier>*</modifier></type><name>ole_cp2encoding</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>UINT</name></type> <name>ole_encoding2cp</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NORETURN</name><argument_list>(<argument>static void failed_load_conv51932(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>load_conv_function51932</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>UINT</name></type> <name>ole_init_cp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_freeexceptinfo</name><parameter_list>(<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type><name>pExInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_excepinfo2msg</name><parameter_list>(<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type><name>pExInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>ole_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LPWSTR</name></type> <name>ole_mb2wc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_ary_m_entry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>is_all_index_under</name><parameter_list>(<parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>get_ptr_of_variant</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_set_safe_array</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>dimension</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>ary_len_of_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>create_win32ole_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ary_new_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>myary</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>plb</name></decl></parameter>, <parameter><decl><type><name>LONG</name></type> <name>dim</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ary_store_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>myary</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>plb</name></decl></parameter>, <parameter><decl><type><name>LONG</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_const_load</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>clsid_from_remote</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>com</name></decl></parameter>, <parameter><decl><type><name>CLSID</name> <modifier>*</modifier></type><name>pclsid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_create_dcom</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>others</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_bind_obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>moniker</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_const_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ULONG</name></type> <name>reference_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type> <name>pole</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_reference_count</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HWND</name></type> <name>ole_show_help</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>helpfile</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>helpcontext</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_show_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_get_code_page</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>installed_code_page_proc</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>code_page_installed</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_set_code_page</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vcp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_get_locale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>installed_lcid_proc</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>lcid_installed</name><parameter_list>(<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_set_locale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlcid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_create_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_ole_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_s_ole_uninitialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hash2named_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>set_argv</name><parameter_list>(<parameter><decl><type><name>VARIANTARG</name><modifier>*</modifier></type> <name>realargs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_invoke</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>wFlags</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>is_bracket</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_invoke</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_invoke2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>dispkind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_invoke2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_getproperty2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_setproperty2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_setproperty_with_bracket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_setproperty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_getproperty_with_bracket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_propertyput</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_each_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pEnumV</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_ienum_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pEnumV</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_each</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_missing</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>typeinfo_from_ole</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppti</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_get_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_put_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_func_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_query_interface</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str_iid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_respond_to</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_usertype2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_ptrtype2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_method_help</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>cmdname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fole_activex_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>com_hash_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>com_hash_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>com_hash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_nano_server</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ole_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>ole_free</name></expr>, <expr><name>ole_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>win32ole_hash_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_hash"</literal></expr>,

<expr><block>{<expr><name>com_hash_mark</name></expr>, <expr><name>com_hash_free</name></expr>, <expr><name>com_hash_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_QueryInterface</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppvObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MEMCMP</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>, <argument><expr><name>GUID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>MEMCMP</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMessageFilter</name></expr></argument>, <argument><expr><name>GUID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppvObject</name> <operator>=</operator> <operator>&amp;</operator><name>message_filter</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_AddRef</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_Release</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_HandleInComingCall</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>pThis</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwCallType</name></decl></parameter>, 

<parameter><decl><type><name>HTASK</name></type> <name>threadIDCaller</name></decl></parameter>, 

<parameter><decl><type><name>DWORD</name></type> <name>dwTickCount</name></decl></parameter>, 

<parameter><decl><type><name>LPINTERFACEINFO</name></type> <name>lpInterfaceInfo</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MESSAGEFILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"incoming %08X, %08X, %d\n"</literal></expr></argument>, <argument><expr><name>dwCallType</name></expr></argument>, <argument><expr><name>threadIDCaller</name></expr></argument>, <argument><expr><name>dwTickCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>dwCallType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CALLTYPE_ASYNC</name></expr>:</case>

<case>case <expr><name>CALLTYPE_TOPLEVEL_CALLPENDING</name></expr>:</case>

<case>case <expr><name>CALLTYPE_ASYNC_CALLPENDING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>rb_during_gc</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>SERVERCALL_RETRYLATER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>previous_filter</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>previous_filter</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>HandleInComingCall</name></name><argument_list>(<argument><expr><name>previous_filter</name></expr></argument>,

<argument><expr><name>dwCallType</name></expr></argument>,

<argument><expr><name>threadIDCaller</name></expr></argument>,

<argument><expr><name>dwTickCount</name></expr></argument>,

<argument><expr><name>lpInterfaceInfo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>SERVERCALL_ISHANDLED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_RetryRejectedCall</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name><modifier>*</modifier></type> <name>pThis</name></decl></parameter>,

<parameter><decl><type><name>HTASK</name></type> <name>threadIDCallee</name></decl></parameter>, 

<parameter><decl><type><name>DWORD</name></type> <name>dwTickCount</name></decl></parameter>, 

<parameter><decl><type><name>DWORD</name></type> <name>dwRejectType</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>previous_filter</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>previous_filter</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>RetryRejectedCall</name></name><argument_list>(<argument><expr><name>previous_filter</name></expr></argument>,

<argument><expr><name>threadIDCallee</name></expr></argument>,

<argument><expr><name>dwTickCount</name></expr></argument>,

<argument><expr><name>dwRejectType</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> (<name>STDMETHODCALLTYPE</name> <name>mf_MessagePending</name>)<parameter_list>(

<parameter><decl><type><name>IMessageFilter</name><modifier>*</modifier></type> <name>pThis</name></decl></parameter>,

<parameter><decl><type><name>HTASK</name></type> <name>threadIDCallee</name></decl></parameter>, 

<parameter><decl><type><name>DWORD</name></type> <name>dwTickCount</name></decl></parameter>, 

<parameter><decl><type><name>DWORD</name></type> <name>dwPendingType</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rb_during_gc</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PENDINGMSG_WAITNOPROCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous_filter</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>previous_filter</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>MessagePending</name></name><argument_list>(<argument><expr><name>previous_filter</name></expr></argument>,

<argument><expr><name>threadIDCallee</name></expr></argument>,

<argument><expr><name>dwTickCount</name></expr></argument>,

<argument><expr><name>dwPendingType</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PENDINGMSG_WAITNOPROCESS</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>_Win32OLEIDispatch</name>

<block>{

<decl_stmt><decl><type><name>IDispatch</name></type> <name>dispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>refcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>Win32OLEIDispatch</name>;</typedef>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>QueryInterface</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppvObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MEMCMP</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>, <argument><expr><name>GUID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>MEMCMP</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>, <argument><expr><name>GUID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Win32OLEIDispatch</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>Win32OLEIDispatch</name><operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppvObject</name> <operator>=</operator> <name>This</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>AddRef</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Win32OLEIDispatch</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>Win32OLEIDispatch</name><operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>++</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>Release</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Win32OLEIDispatch</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>Win32OLEIDispatch</name><operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>u</name> <init>= <expr><operator>--</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st_data_t</name></type> <name>key</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>st_delete</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>com_hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>u</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetTypeInfoCount</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pctinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>E_NOTIMPL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetTypeInfo</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>iTInfo</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>ITypeInfo</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppTInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>E_NOTIMPL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>GetIDsOfNames</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>LPOLESTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgszNames</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>cNames</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>DISPID</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgDispId</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz</name> <init>= <expr><call><name>ole_wc2mb</name><argument_list>(<argument><expr><operator>*</operator><name>rgszNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ID</name></type> <name>nameid</name> <init>= <expr><call><name>rb_check_id_cstr</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cWIN32OLE_enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ID</name><operator>)</operator><operator>(</operator><name>DISPID</name><operator>)</operator><name>nameid</name> <operator>!=</operator> <name>nameid</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>E_NOINTERFACE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rgDispId</name> <operator>=</operator> <operator>(</operator><name>DISPID</name><operator>)</operator><name>nameid</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>Invoke</name> )<parameter_list>(

<parameter><decl><type><name>IDispatch</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,

<parameter><decl><type><name>DISPID</name></type> <name>dispIdMember</name></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>wFlags</name></decl></parameter>,

<parameter><decl><type><name>DISPPARAMS</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pDispParams</name></decl></parameter>,

<parameter><decl><type><name>VARIANT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pVarResult</name></decl></parameter>,

<parameter><decl><type><name>EXCEPINFO</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pExcepInfo</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>puArgErr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>args</name> <init>= <expr><name><name>pDispParams</name><operator>-&gt;</operator><name>cArgs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Win32OLEIDispatch</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>Win32OLEIDispatch</name><operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>parg</name> <init>= <expr><call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>ID</name><operator>)</operator><name>dispIdMember</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>args</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>parg</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDispParams</name><operator>-&gt;</operator><name>rgvarg</name><index>[<expr><name>args</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dispIdMember</name> <operator>==</operator> <name>DISPID_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wFlags</name> <operator>==</operator> <name>DISPATCH_METHOD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wFlags</name> <operator>&amp;</operator> <name>DISPATCH_PROPERTYGET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pVarResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type>

<name>ole_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>g_ole_initialized</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IDispatch</name><modifier>*</modifier></type>

<name>val2dispatch</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>st_table</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>com_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Win32OLEIDispatch</name><modifier>*</modifier></type> <name>pdisp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>st_lookup</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pdisp</name> <operator>=</operator> <operator>(</operator><name>Win32OLEIDispatch</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>~</operator><name>FIXNUM_FLAG</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdisp</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>pdisp</name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><name>Win32OLEIDispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdisp</name><operator>-&gt;</operator><name>dispatch</name><operator>.</operator><name>lpVtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>com_vtbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdisp</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdisp</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>st_insert</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>pdisp</name> <operator>|</operator> <name>FIXNUM_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pdisp</name><operator>-&gt;</operator><name>dispatch</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>

<name>rbtime2vtdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tmobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>nsec</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SystemTimeToVariantTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>tmobj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"nsec"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nsec</name> <operator>/=</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nsec</name> <operator>/=</operator> <operator>(</operator><literal type="number">24.0</literal> <operator>*</operator> <literal type="number">3600.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nsec</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<return>return <expr><name>t</name> <operator>+</operator> <name>nsec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>vtdate2rbtime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>msec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VariantTimeToSystemTime</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wYear</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wMonth</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wDay</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wHour</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wMinute</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>wSecond</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SystemTimeToVariantTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msec</name> <operator>=</operator> <name>date</name> <operator>-</operator> <name>sec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msec</name> <operator>*=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msec</name> <operator>-=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msec</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&gt;=</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msec</name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name>msec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MACHING_CP</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>encname</name></type></parameter>,<parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(strcasecmp(rb_enc_name((enc)),(encname)) == 0) return cp</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>UINT</name></type> <name>ole_encoding2cp</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Big5"</literal></expr></argument>, <argument><expr><literal type="number">950</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"CP51932"</literal></expr></argument>, <argument><expr><literal type="number">51932</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"CP850"</literal></expr></argument>, <argument><expr><literal type="number">850</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"CP852"</literal></expr></argument>, <argument><expr><literal type="number">852</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"CP855"</literal></expr></argument>, <argument><expr><literal type="number">855</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"CP949"</literal></expr></argument>, <argument><expr><literal type="number">949</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"EUC-JP"</literal></expr></argument>, <argument><expr><literal type="number">20932</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"EUC-KR"</literal></expr></argument>, <argument><expr><literal type="number">51949</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"EUC-TW"</literal></expr></argument>, <argument><expr><literal type="number">51950</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"GB18030"</literal></expr></argument>, <argument><expr><literal type="number">54936</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"GB2312"</literal></expr></argument>, <argument><expr><literal type="number">20936</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"GBK"</literal></expr></argument>, <argument><expr><literal type="number">936</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM437"</literal></expr></argument>, <argument><expr><literal type="number">437</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM737"</literal></expr></argument>, <argument><expr><literal type="number">737</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM775"</literal></expr></argument>, <argument><expr><literal type="number">775</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM852"</literal></expr></argument>, <argument><expr><literal type="number">852</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM855"</literal></expr></argument>, <argument><expr><literal type="number">855</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM857"</literal></expr></argument>, <argument><expr><literal type="number">857</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM860"</literal></expr></argument>, <argument><expr><literal type="number">860</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM861"</literal></expr></argument>, <argument><expr><literal type="number">861</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM862"</literal></expr></argument>, <argument><expr><literal type="number">862</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM863"</literal></expr></argument>, <argument><expr><literal type="number">863</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM864"</literal></expr></argument>, <argument><expr><literal type="number">864</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM865"</literal></expr></argument>, <argument><expr><literal type="number">865</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM866"</literal></expr></argument>, <argument><expr><literal type="number">866</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"IBM869"</literal></expr></argument>, <argument><expr><literal type="number">869</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-2022-JP"</literal></expr></argument>, <argument><expr><literal type="number">50220</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-1"</literal></expr></argument>, <argument><expr><literal type="number">28591</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-15"</literal></expr></argument>, <argument><expr><literal type="number">28605</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-2"</literal></expr></argument>, <argument><expr><literal type="number">28592</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-3"</literal></expr></argument>, <argument><expr><literal type="number">28593</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-4"</literal></expr></argument>, <argument><expr><literal type="number">28594</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-5"</literal></expr></argument>, <argument><expr><literal type="number">28595</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-6"</literal></expr></argument>, <argument><expr><literal type="number">28596</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-7"</literal></expr></argument>, <argument><expr><literal type="number">28597</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-8"</literal></expr></argument>, <argument><expr><literal type="number">28598</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-9"</literal></expr></argument>, <argument><expr><literal type="number">28599</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"KOI8-R"</literal></expr></argument>, <argument><expr><literal type="number">20866</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"KOI8-U"</literal></expr></argument>, <argument><expr><literal type="number">21866</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Shift_JIS"</literal></expr></argument>, <argument><expr><literal type="number">932</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1201</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"UTF-7"</literal></expr></argument>, <argument><expr><literal type="number">65000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">65001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1250"</literal></expr></argument>, <argument><expr><literal type="number">1250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1251"</literal></expr></argument>, <argument><expr><literal type="number">1251</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1252"</literal></expr></argument>, <argument><expr><literal type="number">1252</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1253"</literal></expr></argument>, <argument><expr><literal type="number">1253</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1254"</literal></expr></argument>, <argument><expr><literal type="number">1254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1255"</literal></expr></argument>, <argument><expr><literal type="number">1255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1256"</literal></expr></argument>, <argument><expr><literal type="number">1256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1257"</literal></expr></argument>, <argument><expr><literal type="number">1257</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-1258"</literal></expr></argument>, <argument><expr><literal type="number">1258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-31J"</literal></expr></argument>, <argument><expr><literal type="number">932</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Windows-874"</literal></expr></argument>, <argument><expr><literal type="number">874</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC_MACHING_CP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"eucJP-ms"</literal></expr></argument>, <argument><expr><literal type="number">20932</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CP_ACP</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>failed_load_conv51932</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to load convert function for CP51932"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>load_conv_function51932</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>E_NOINTERFACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pIMultiLanguage</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_CMultiLanguage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IMultiLanguage2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_CMultiLanguage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IMultiLanguage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failed_load_conv51932</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pIMultiLanguage</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>need_conv_function51932</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(load_conv_function51932(), 1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_conv_function51932</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>failed_load_conv51932()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>need_conv_function51932</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(failed_load_conv51932(), 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv_51932</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cp) == 51932 &amp;&amp; need_conv_function51932())</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_ole_codepage</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>code_page_installed</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_cp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch<condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CP_ACP</name></expr>:</case>

<case>case <expr><name>CP_OEMCP</name></expr>:</case>

<case>case <expr><name>CP_MACCP</name></expr>:</case>

<case>case <expr><name>CP_THREAD_ACP</name></expr>:</case>

<case>case <expr><name>CP_SYMBOL</name></expr>:</case>

<case>case <expr><name>CP_UTF7</name></expr>:</case>

<case>case <expr><name>CP_UTF8</name></expr>:</case>

<expr_stmt><expr><name>cWIN32OLE_cp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">51932</literal></expr>:</case>

<expr_stmt><expr><name>cWIN32OLE_cp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_conv_function51932</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"codepage should be WIN32OLE::CP_ACP, WIN32OLE::CP_OEMCP, WIN32OLE::CP_MACCP, WIN32OLE::CP_THREAD_ACP, WIN32OLE::CP_SYMBOL, WIN32OLE::CP_UTF7, WIN32OLE::CP_UTF8, or installed codepage."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cWIN32OLE_enc</name> <operator>=</operator> <call><name>ole_cp2encoding</name><argument_list>(<argument><expr><name>cWIN32OLE_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UINT</name></type>

<name>ole_init_cp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>encdef</name></decl>;</decl_stmt>

<expr_stmt><expr><name>encdef</name> <operator>=</operator> <call><name>rb_default_internal_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encdef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>encdef</name> <operator>=</operator> <call><name>rb_default_external_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ole_encoding2cp</name><argument_list>(<argument><expr><name>encdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ole_codepage</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>myCPINFOEX</name> <block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>MaxCharSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>DefaultChar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>LeadByte</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name>UnicodeDefaultChar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>CodePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>CodePageName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>rb_encoding</name> <modifier>*</modifier></type>

<name>ole_cp2encoding</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<modifier>*</modifier><name>pGetCPInfoEx</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myCPINFOEX</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>myCPINFOEX</name></name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>enc_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc_cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>code_page_installed</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CP_ACP</name></expr>:</case>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>GetACP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CP_OEMCP</name></expr>:</case>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>GetOEMCP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CP_MACCP</name></expr>:</case>

<case>case <expr><name>CP_THREAD_ACP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pGetCPInfoEx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pGetCPInfoEx</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr>struct <name>myCPINFOEX</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GetCPInfoEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pGetCPInfoEx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pGetCPInfoEx</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr>struct <name>myCPINFOEX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>myCPINFOEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetCPInfoEx</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>pGetCPInfoEx</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"cannot map codepage to encoding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>CodePage</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CP_SYMBOL</name></expr>:</case>

<case>case <expr><name>CP_UTF7</name></expr>:</case>

<case>case <expr><name>CP_UTF8</name></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">51932</literal></expr>:</case>

<expr_stmt><expr><call><name>load_conv_function51932</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"codepage should be WIN32OLE::CP_ACP, WIN32OLE::CP_OEMCP, WIN32OLE::CP_MACCP, WIN32OLE::CP_THREAD_ACP, WIN32OLE::CP_SYMBOL, WIN32OLE::CP_UTF7, WIN32OLE::CP_UTF8, or installed codepage."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc_name</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"CP%d"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_enc_find_index</name><argument_list>(<argument><expr><name>enc_cstr</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>enc_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_define_dummy_encoding</name><argument_list>(<argument><expr><name>enc_cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>ole_ml_wc2mb_conv0</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>LPSTR</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>UINT</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>pIMultiLanguage</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ConvertStringFromUnicode</name></name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cWIN32OLE_cp</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ole_ml_wc2mb_conv</name><parameter_list>(<parameter><type><name>pw</name></type></parameter>, <parameter><type><name>pm</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>onfailure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { HRESULT hr = ole_ml_wc2mb_conv0(pw, pm, &amp;size); if (FAILED(hr)) { onfailure; ole_raise(hr, eWIN32OLERuntimeError, "fail to convert Unicode to CP%d", cWIN32OLE_cp); } } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ole_wc2mb_conv</name><parameter_list>(<parameter><type><name>pw</name></type></parameter>, <parameter><type><name>pm</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WideCharToMultiByte(cWIN32OLE_cp, 0, (pw), -1, (pm), (size), NULL, NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>ole_wc2mb_alloc</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>, <parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<name>alloc</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>pm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>conv_51932</name><argument_list>(<argument><expr><name>cWIN32OLE_cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>ole_ml_wc2mb_conv</name><argument_list>(<argument>pw</argument>, <argument>NULL</argument>, <argument>size</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ole_ml_wc2mb_conv</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pm</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>pm</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ole_wc2mb_conv</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ole_wc2mb_conv</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pm</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>pm</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>ole_alloc_str</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>ole_wc2mb</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_wc2mb_alloc</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>ole_alloc_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_freeexceptinfo</name><parameter_list>(<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type><name>pExInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrDescription</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrHelpFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_excepinfo2msg</name><parameter_list>(<parameter><decl><type><name>EXCEPINFO</name> <modifier>*</modifier></type><name>pExInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_code</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pSource</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pDescription</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>error_msg</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pfnDeferredFillIn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pExInfo</name><operator>-&gt;</operator><name>pfnDeferredFillIn</name></name>)<argument_list>(<argument><expr><name>pExInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrSource</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pSource</name> <operator>=</operator> <call><name>ole_wc2mb</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrDescription</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pDescription</name> <operator>=</operator> <call><name>ole_wc2mb</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>bstrDescription</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pExInfo</name><operator>-&gt;</operator><name>wCode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>, <argument><expr><literal type="string">"\n OLE error code:%lX in "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>pExInfo</name><operator>-&gt;</operator><name>scode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>, <argument><expr><literal type="string">"\n OLE error code:%u in "</literal></expr></argument>, <argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>wCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pSource</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><literal type="string">"&lt;Unknown&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pDescription</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>pDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><literal type="string">"&lt;No Description&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pSource</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pDescription</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ole_freeexceptinfo</name><argument_list>(<argument><expr><name>pExInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error_msg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_uninitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_ole_initialized</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OleUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_ole_initialized_set</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_uninitialize_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>evflag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ole_uninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>g_uninitialize_hooked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_add_event_hook</name><argument_list>(<argument><expr><name>ole_uninitialize_hook</name></expr></argument>, <argument><expr><name>RUBY_EVENT_THREAD_END</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_uninitialize_hooked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>g_ole_initialized</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>g_running_nano</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OleInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail: OLE initialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_ole_initialized_set</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_running_nano</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoRegisterMessageFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imessage_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>previous_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>previous_filter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail: install OLE MessageFilter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ole_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oledata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type>

<name>oledata_get_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr>struct <name>oledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ole_datatype</name></expr></argument>, <argument><expr><name>pole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pole</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>LPWSTR</name></type>

<name>ole_vstr2wc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>pw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>st_table</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>enc2cp_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>st_lookup</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>enc</name> <operator>|</operator> <name>FIXNUM_FLAG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ole_encoding2cp</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>code_page_installed</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_ACP</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_OEMCP</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_MACCP</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_THREAD_ACP</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_SYMBOL</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_UTF7</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <name>CP_UTF8</name> <operator>||</operator>

<name>cp</name> <operator>==</operator> <literal type="number">51932</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>st_insert</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>enc</name> <operator>|</operator> <name>FIXNUM_FLAG</name></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not installed Windows codepage(%d) according to `%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>ole_mb2wc</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pw</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LPWSTR</name></type>

<name>ole_mb2wc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>pw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>conv_51932</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>n</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name><name>pIMultiLanguage</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ConvertStringToUnicode</name></name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to convert CP%d to Unicode"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>SysAllocStringLen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pIMultiLanguage</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ConvertStringToUnicode</name></name><argument_list>(<argument><expr><name>pIMultiLanguage</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to convert CP%d to Unicode"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pw</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>SysAllocStringLen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pw</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pw</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>ole_alloc_vstr</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cWIN32OLE_enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_wc2vstr</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>isfree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vstr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_wc2mb_alloc</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>ole_alloc_vstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>isfree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>vstr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_ary_m_entry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>is_all_index_under</name><parameter_list>(<parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pub</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_val2variant_ex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>VT_VARIANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant2</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_DISPATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_UNKNOWN</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch<condition>(<expr><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_I8</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_I8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_I8</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>NUM2I8</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI8</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_UI8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_UI8</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>NUM2UI8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ole_val2variant2</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>ole_val2variant2</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>VOID</name> <modifier>*</modifier></type>

<name>val2variant_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VOID</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_val2variant_ex</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <name>VT_VARIANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>!=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>var</name></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to change type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_ptr_of_variant</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get pointer of variant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>get_ptr_of_variant</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_UI1</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_I2</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_I2</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_UI2</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_I4</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_I4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_UI4</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_UI4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_R4</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_R4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_R8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>VT_I8</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_I8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_UI8</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_UI8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VT_INT</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_INT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_UINT</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_UINT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_CY</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_CY</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_DATE</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_BSTR</name></expr>:</case>

<return>return <expr><call><name>V_BSTR</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_DISPATCH</name></expr>:</case>

<return>return <expr><call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_ERROR</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_ERROR</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_BOOL</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_UNKNOWN</name></expr>:</case>

<return>return <expr><call><name>V_UNKNOWN</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>VT_ARRAY</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_set_safe_array</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VOID</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>ole_ary_m_entry</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>val2variant_ptr</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_all_index_under</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_DISPATCH</name> <operator>&amp;&amp;</operator> <call><name>V_DISPATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_UNKNOWN</name> <operator>&amp;&amp;</operator> <call><name>V_UNKNOWN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"element of array does not have IDispatch or IUnknown Interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayPutElement</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to SafeArrayPutElement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pub</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>dim</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>dimension</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>dim1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dim1</name> <operator>=</operator> <call><name>dimension</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>&lt;</operator> <name>dim1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <name>dim1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dim</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dim</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>ary_len_of_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dim</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ary_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ary_len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ary_len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary_len1</name> <operator>=</operator> <call><name>ary_len_of_dim</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>dim</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ary_len</name> <operator>&lt;</operator> <name>ary_len1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ary_len</name> <operator>=</operator> <name>ary_len1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ary_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HRESULT</name></type>

<name>ole_val_ary2variant_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAYBOUND</name> <modifier>*</modifier></type><name>psab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>pub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>dimension</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psab</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>SAFEARRAYBOUND</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pub</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psab</name> <operator>||</operator> <operator>!</operator><name>pub</name> <operator>||</operator> <operator>!</operator><name>pid</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pub</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>psab</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>psab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cElements</name> <operator>=</operator> <call><name>ary_len_of_dim</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lLbound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>psab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cElements</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <operator>(</operator><name>vt</name> <operator>|</operator> <name>VT_VARIANT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <call><name>SafeArrayCreate</name><argument_list>(<argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <name>VT_TYPEMASK</name><operator>)</operator></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_OUTOFMEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayLock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_safe_array</name><argument_list>(<argument><expr><name>dim</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <name>VT_TYPEMASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayUnlock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pub</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>psab</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>psa</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SafeArrayDestroy</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_val2variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_DISPATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_variant2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cWIN32OLE_RECORD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_rec2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_DATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_DATE</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>rbtime2vtdate</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>T_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>ole_val_ary2variant_ary</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>VT_VARIANT</name><operator>|</operator><name>VT_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_BSTR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_BSTR</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_I4</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>v</name> <init>= <expr><call><name>RB_NUM2LONG</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>V_I4</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><name>v</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>V_I4</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_I8</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_I8</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_R8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_R8</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>rb_big2dbl</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_R8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_R8</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_TRUE</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_BOOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_BOOL</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VARIANT_TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_FALSE</name></expr>:</case>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_BOOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_BOOL</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VARIANT_FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_NIL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>g_nil_to</name> <operator>==</operator> <name>VT_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ERROR</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>DISP_E_PARAMNOTFOUND</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_DISPATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>val2dispatch</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_val2variant2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_nil_to</name> <operator>=</operator> <name>VT_EMPTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_nil_to</name> <operator>=</operator> <name>VT_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>make_inspect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>detail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"#&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>default_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>detail</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>make_inspect</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>dispatch</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>oledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ole_datatype</name></expr></argument>, <argument><expr><name>pole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>create_win32ole_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>fole_s_allocate</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_set_member</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ary_new_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>myary</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>plb</name></decl></parameter>, <parameter><decl><type><name>LONG</name></type> <name>dim</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>pobj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>ids</name> <init>= <expr><call><name>ALLOC_N</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ids</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>plb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>myary</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pobj</name> <operator>=</operator> <name>myary</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>pobj</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>pobj</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>pobj</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pobj</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ids</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ary_store_dim</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>myary</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>LONG</name> <modifier>*</modifier></type><name>plb</name></decl></parameter>, <parameter><decl><type><name>LONG</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><name><name>pid</name><index>[<expr><name>dim</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>plb</name><index>[<expr><name>dim</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>ary_new_dim</name><argument_list>(<argument><expr><name>myary</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>plb</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_variant2val</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name> <init>= <expr><call><name>V_VT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<while>while <condition>( <expr><name>vt</name> <operator>==</operator> <operator>(</operator><name>VT_BYREF</name> <operator>|</operator> <name>VT_VARIANT</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>pvar</name> <operator>=</operator> <call><name>V_VARIANTREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><call><name>V_ISARRAY</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt_base</name> <init>= <expr><name>vt</name> <operator>&amp;</operator> <name>VT_TYPEMASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name> <init>= <expr><ternary><condition><expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>variant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psa</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>SafeArrayGetDim</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plb</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pub</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pid</name> <operator>||</operator> <operator>!</operator><name>plb</name> <operator>||</operator> <operator>!</operator><name>pub</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>plb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>plb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pub</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SafeArrayGetLBound</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeArrayGetLBound</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeArrayGetUBound</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pub</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayLock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt_base</name> <operator>|</operator> <name>VT_BYREF</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt_base</name> <operator>==</operator> <name>VT_RECORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayGetRecordInfo</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>V_RECORDINFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_RECORD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ary_new_dim</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>plb</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt_base</name> <operator>==</operator> <name>VT_RECORD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayPtrOfIndex</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>V_RECORD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayPtrOfIndex</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>V_BYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ary_store_dim</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>plb</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>pub</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>plb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<expr_stmt><expr><call><name>SafeArrayUnlock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>plb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>plb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pub</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>VT_EMPTY</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VT_NULL</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VT_I1</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_I1REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_I1</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_UI1REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_UI1</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_I2</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_I2REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_I2</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_UI2REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_UI2</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_I4</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_I4REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_I4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI4</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_UI4REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_UI4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_INT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_INTREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_INT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_UINT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>*</operator><call><name>V_UINTREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>V_UINT</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>VT_I8</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V_I8REF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>I8_2_NUM</name><argument_list>(<argument><expr><operator>*</operator><call><name>V_I8REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>I8_2_NUM</name><argument_list>(<argument><expr><call><name>V_I8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI8</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V_UI8REF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>UI8_2_NUM</name><argument_list>(<argument><expr><operator>*</operator><call><name>V_UI8REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>UI8_2_NUM</name><argument_list>(<argument><expr><call><name>V_UI8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>VT_R4</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><operator>*</operator><call><name>V_R4REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>V_R4</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><operator>*</operator><call><name>V_R8REF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>V_R8</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_BSTR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bstr</name> <operator>=</operator> <operator>*</operator><call><name>V_BSTRREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bstr</name> <operator>=</operator> <call><name>V_BSTR</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>SysStringLen</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>ole_wc2vstr</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VT_ERROR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><operator>*</operator><call><name>V_ERRORREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><call><name>V_ERROR</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><call><name>V_BOOLREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>V_BOOL</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_DISPATCH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <operator>*</operator><call><name>V_DISPATCHREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pDispatch</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pDispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>create_win32ole_object</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VT_UNKNOWN</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>punk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>punk</name> <operator>=</operator> <operator>*</operator><call><name>V_UNKNOWNREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>punk</name> <operator>=</operator> <call><name>V_UNKNOWN</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>punk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>punk</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>punk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>create_win32ole_object</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>DATE</name></type> <name>date</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>date</name> <operator>=</operator> <operator>*</operator><call><name>V_DATEREF</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>V_DATE</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>vtdate2rbtime</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VT_RECORD</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>IRecordInfo</name> <modifier>*</modifier></type><name>pri</name> <init>= <expr><call><name>V_RECORDINFO</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><call><name>V_RECORD</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>create_win32ole_record</name><argument_list>(<argument><expr><name>pri</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VT_CY</name></expr>:</case>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>variant</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VT_BSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_BSTR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ole_wc2vstr</name><argument_list>(<argument><expr><call><name>V_BSTR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>LONG</name></type>

<name>reg_open_key</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>HKEY</name> <modifier>*</modifier></type><name>phkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><name>phkey</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>LONG</name></type>

<name>reg_open_vkey</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>HKEY</name> <modifier>*</modifier></type><name>phkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>reg_open_key</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>phkey</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>reg_enum_key</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>size_buf</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name> <init>= <expr><call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_buf</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>reg_get_val</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name> <init>= <expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwtype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwtype</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>pbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pbuf</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dwtype</name> <operator>==</operator> <name>REG_EXPAND_SZ</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pbuf2</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>ExpandEnvironmentStrings</name><argument_list>(<argument><expr><name>pbuf2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpandEnvironmentStrings</name><argument_list>(<argument><expr><name>pbuf2</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>reg_get_val2</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hsubkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hsubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hsubkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hsubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>reg_get_val</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_const_load</name><parameter_list>(<parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iVar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>constant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>constant</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>iVar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iVar</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cVars</name></name></expr>;</condition> <incr><expr><name>iVar</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>iVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>varkind</name></name> <operator>==</operator> <name>VAR_CONST</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>pVarDesc</name><operator>-&gt;</operator><name>wVarFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>VARFLAG_FHIDDEN</name> <operator>|</operator>

<name>VARFLAG_FRESTRICTED</name> <operator>|</operator>

<name>VARFLAG_FNONBROWSABLE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>bstr</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>ole_wc2mb</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><call><name>V_UNION1</name><argument_list>(<argument><expr><name>pVarDesc</name></expr></argument>, <argument><expr><name>lpvarValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pName</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_is_const_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>rb_const_defined_at</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>constant</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pName</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pName</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTypeAttr</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"CONSTANTS"</literal></expr></argument>, <argument><expr><name>constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>clsid_from_remote</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>com</name></decl></parameter>, <parameter><decl><type><name>CLSID</name> <modifier>*</modifier></type><name>pclsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hlm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hpid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>subkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>clsid</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegConnectRegistry</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>HRESULT_FROM_WIN32</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subkey</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"SOFTWARE\\Classes\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>, <argument><expr><name>com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="string">"\\CLSID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hlm</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>HRESULT_FROM_WIN32</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clsid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hpid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwtype</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>clsid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator> <name>dwtype</name> <operator>==</operator> <name>REG_SZ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ole_mb2wc</name><argument_list>(<argument><expr><name>clsid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cWIN32OLE_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>pclsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>HRESULT_FROM_WIN32</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_create_dcom</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ole</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>others</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CLSID</name></type> <name>clsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COSERVERINFO</name></type> <name>serverinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MULTI_QI</name></type> <name>multi_qi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>clsctx</name> <init>= <expr><name>CLSCTX_REMOTE_SERVER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gole32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gole32</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"OLE32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gole32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to load OLE32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gCoCreateInstanceEx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gCoCreateInstanceEx</name> <operator>=</operator> <operator>(</operator><name>FNCOCREATEINSTANCEEX</name><operator>*</operator><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>gole32</name></expr></argument>, <argument><expr><literal type="string">"CoCreateInstanceEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gCoCreateInstanceEx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"CoCreateInstanceEx is not supported in this environment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromProgID</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>clsid_from_remote</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>ole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"unknown OLE server: `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serverinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>COSERVERINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>serverinfo</name><operator>.</operator><name>pwszName</name></name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>multi_qi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MULTI_QI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>multi_qi</name><operator>.</operator><name>pIID</name></name> <operator>=</operator> <operator>&amp;</operator><name>IID_IDispatch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>gCoCreateInstanceEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>clsctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>multi_qi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>serverinfo</name><operator>.</operator><name>pwszName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to create DCOM server `%s' in `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ole_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><name>IDispatch</name><operator>*</operator><operator>)</operator><name><name>multi_qi</name><operator>.</operator><name>pItf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_bind_obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>moniker</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IBindCtx</name> <modifier>*</modifier></type><name>pBindCtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMoniker</name> <modifier>*</modifier></type><name>pMoniker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>eaten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateBindCtx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBindCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to create bind context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>moniker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>MkParseDisplayName</name><argument_list>(<argument><expr><name>pBindCtx</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eaten</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMoniker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pBindCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to parse display name of moniker `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>moniker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pMoniker</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>BindToObject</name></name><argument_list>(<argument><expr><name>pMoniker</name></expr></argument>, <argument><expr><name>pBindCtx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pMoniker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pBindCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to bind moniker `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>moniker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>create_win32ole_object</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>svr_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>others</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CLSID</name></type> <name>clsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>pUnknown</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1*"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>svr_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>others</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromProgID</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ole_bind_obj</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>GetActiveObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUnknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"OLE server `%s' not running"</literal></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pUnknown</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>pUnknown</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pUnknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to create WIN32OLE server `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pUnknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>create_win32ole_object</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_const_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ole</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_CLASS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_MODULE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_NIL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"2nd parameter must be Class or Module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetContainingTypeLib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_NIL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_const_load</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ole_const_load</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ole</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>typelib_file</name><argument_list>(<argument><expr><name>ole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>ole</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>LoadTypeLibEx</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>REGKIND_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to LoadTypeLibEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_NIL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_const_load</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ole_const_load</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"1st parameter must be WIN32OLE instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type>

<name>reference_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type> <name>pole</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONG</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_reference_count</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type> <name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RB_INT2NUM</name><argument_list>(<argument><expr><call><name>reference_count</name><argument_list>(<argument><expr><name>pole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONG</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type> <name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>reference_count</name><argument_list>(<argument><expr><name>pole</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>RB_INT2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type>

<name>ole_show_help</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>helpfile</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>helpcontext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FNHTMLHELP</name> <modifier>*</modifier></type><name>pfnHtmlHelp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ghhctrl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ghhctrl</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"HHCTRL.OCX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ghhctrl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hwnd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pfnHtmlHelp</name> <operator>=</operator> <operator>(</operator><name>FNHTMLHELP</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ghhctrl</name></expr></argument>, <argument><expr><literal type="string">"HtmlHelpA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfnHtmlHelp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hwnd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>pfnHtmlHelp</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0x0f</literal></expr></argument>, <argument><expr><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>helpcontext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwnd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>pfnHtmlHelp</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>helpcontext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hwnd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_show_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>helpcontext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>helpfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>helpcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>helpfile</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"helpfile"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"no helpfile of `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>helpcontext</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"helpcontext"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>helpfile</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"1st parameter must be (String|WIN32OLE_TYPE|WIN32OLE_METHOD)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>ole_show_help</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>, <argument><expr><name>helpcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hwnd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to open help file `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_get_code_page</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>cWIN32OLE_cp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>

<name>installed_code_page_proc</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>g_cp_to_check</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g_cp_installed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>code_page_installed</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_cp_installed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_cp_to_check</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumSystemCodePages</name><argument_list>(<argument><expr><name>installed_code_page_proc</name></expr></argument>, <argument><expr><name>CP_INSTALLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>g_cp_installed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_set_code_page</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vcp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name> <init>= <expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_ole_codepage</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_get_locale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name>

<name>CALLBACK</name></type> <name>installed_lcid_proc</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>g_lcid_to_check</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g_lcid_installed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>lcid_installed</name><parameter_list>(<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_lcid_installed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>g_lcid_to_check</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g_lcid_to_check</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%08lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>lcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumSystemLocales</name><argument_list>(<argument><expr><name>installed_lcid_proc</name></expr></argument>, <argument><expr><name>LCID_INSTALLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>g_lcid_installed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_set_locale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlcid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>vlcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lcid_installed</name><argument_list>(<argument><expr><name>lcid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_lcid</name> <operator>=</operator> <name>lcid</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>lcid</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCALE_SYSTEM_DEFAULT</name></expr>:</case>

<case>case <expr><name>LOCALE_USER_DEFAULT</name></expr>:</case>

<expr_stmt><expr><name>cWIN32OLE_lcid</name> <operator>=</operator> <name>lcid</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not installed locale: %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>lcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_create_guid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name></type> <name><name>bstr</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateGuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to create GUID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>StringFromGUID2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OLECHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to create GUID(buffer over)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ole_wc2vstr</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_ole_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_s_ole_uninitialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ole_uninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>svr_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>others</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CLSID</name></type> <name>clsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>key_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IClassFactory2</name> <modifier>*</modifier></type> <name>pIClassFactory2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name><name>keyword_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>kwargs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_call_super</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11*:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>svr_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>others</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_create_dcom</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>svr_name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>others</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromProgID</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"unknown OLE server: `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>keyword_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>keyword_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"license"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>keyword_ids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kwargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>CLSCTX_INPROC_SERVER</name> <operator>|</operator> <name>CLSCTX_LOCAL_SERVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoGetClassObject</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>clsid</name></expr></argument>,

<argument><expr><name>CLSCTX_INPROC_SERVER</name> <operator>|</operator> <name>CLSCTX_LOCAL_SERVER</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IClassFactory2</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>&amp;</operator><name>pIClassFactory2</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key_buf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name><name>kwargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pIClassFactory2</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>CreateInstanceLic</name></name><argument_list>(<argument><expr><name>pIClassFactory2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDispatch</name></expr></argument>, <argument><expr><name>key_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pIClassFactory2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to create WIN32OLE object from `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>svr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>hash2named_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oleparam</name></name><modifier>*</modifier></type> <name>pOp</name> <init>= <expr><operator>(</operator>struct <name>oleparam</name> <operator>*</operator><operator>)</operator><name>pop</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>pOp</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pNamedArgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type (expected String or Symbol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>pNamedArgs</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ST_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>set_argv</name><parameter_list>(<parameter><decl><type><name>VARIANTARG</name><modifier>*</modifier></type> <name>realargs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>argv</name> <init>= <expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"ARGV"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end</name><operator>--</operator> <operator>&gt;</operator> <name>beg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VT_RECORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>argv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_invoke</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>wFlags</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>is_bracket</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>paramS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>wcmdname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPID</name></type> <name>DispID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPID</name><modifier>*</modifier></type> <name>pDispID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXCEPINFO</name></type> <name>excepinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANTARG</name><modifier>*</modifier></type> <name>realargs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>argErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cNamedArgs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oleparam</name></name></type> <name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXCEPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1*"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_bracket</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"method is wrong type (expected String or Symbol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get dispatch interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_bracket</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DispID</name> <operator>=</operator> <name>DISPID_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wcmdname</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetIDsOfNames</name></name><argument_list>( <argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wcmdname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DispID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>wcmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rb_eNoMethodError</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cNamedArgs</name> <operator>=</operator> <call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>RHASH_SIZE</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <name>cNamedArgs</name> <operator>+</operator> <name>argc</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>OLECHAR</name><operator>*</operator></expr></argument>, <argument><expr><name>cNamedArgs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VARIANTARG</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>hash2named_arg</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pDispID</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>DISPID</name></expr></argument>, <argument><expr><name>cNamedArgs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetIDsOfNames</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>,

<argument><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name></name></expr></argument>,

<argument><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>pDispID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"failed to get named argument info: `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pDispID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>cNamedArgs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>pNamedArgs</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>OLECHAR</name><operator>*</operator></expr></argument>, <argument><expr><name>cNamedArgs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VARIANTARG</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;</operator> <name>cNamedArgs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>realargs</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VARIANTARG</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name><operator>-</operator><name>cNamedArgs</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>cNamedArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_variant2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>cWIN32OLE_RECORD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_RECORD</name> <operator>|</operator> <name>VT_BYREF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_VARIANT</name> <operator>|</operator> <name>VT_BYREF</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VARIANTREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wFlags</name> <operator>&amp;</operator> <name>DISPATCH_PROPERTYPUT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><call><name>ResultFromScode</name><argument_list>(<argument><expr><name>E_INVALIDARG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"argument error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>( <argument><expr><name>DISPID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgdispidNamedArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DISPID_PROPERTYPUT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>DispID</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>wFlags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;=</operator> <name>cNamedArgs</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>cNamedArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>DISP_E_EXCEPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_freeexceptinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXCEPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>DispID</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>wFlags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hr</name> <operator>==</operator> <name>DISP_E_EXCEPTION</name> <operator>||</operator> <name>hr</name> <operator>==</operator> <name>DISP_E_MEMBERNOTFOUND</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>DispID</name> <operator>&gt;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>DISP_E_EXCEPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_freeexceptinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXCEPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>DispID</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>wFlags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VT_RECORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;</operator> <name>cNamedArgs</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>cNamedArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant2</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>DISP_E_EXCEPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_freeexceptinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXCEPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>DispID</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>wFlags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VT_RECORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;</operator> <name>cNamedArgs</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>cNamedArgs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>cNamedArgs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>paramS</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>cNamedArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>cWIN32OLE_RECORD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_RECORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>olerecord_set_ivar</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><call><name>V_RECORDINFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V_RECORD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>set_argv</name><argument_list>(<argument><expr><name>realargs</name></expr></argument>, <argument><expr><name>cNamedArgs</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>dp</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ole_excepinfo2msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"(in OLE method `%s': )%s"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_invoke</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>ole_invoke</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>DISPATCH_METHOD</name><operator>|</operator><name>DISPATCH_PROPERTYGET</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>rb_eNoMethodError</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_invoke2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>dispkind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>argErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXCEPINFO</name></type> <name>excepinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPPARAMS</name></type> <name>dispParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANTARG</name><modifier>*</modifier></type> <name>realargs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tp</name></decl>, <decl><type ref="prev"/><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXCEPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dispParams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DISPPARAMS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VARIANTARG</name></expr></argument>, <argument><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>realargs</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VARIANTARG</name></expr></argument>, <argument><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name><name>dispParams</name><operator>.</operator><name>cArgs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <operator>(</operator><name>VARTYPE</name><operator>)</operator><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>Qnil</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>V_ERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>DISP_E_PARAMNOTFOUND</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPBYTE</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name><modifier>*</modifier></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPLONG</name></type> <name>pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name><modifier>*</modifier></type> <name>pv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CY</name> <modifier>*</modifier></type><name>py</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAYBOUND</name></type> <name><name>rgsabound</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgsabound</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lLbound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgsabound</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cElements</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>vt</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>VT_ARRAY</name> <operator>|</operator> <name>VT_BYREF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>SafeArrayCreate</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rgsabound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_ARRAY</name> <operator>|</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeArrayLock</name><argument_list>(<argument><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pvData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pvData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pvData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pvData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pvData</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ent</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rgsabound</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cElements</name></expr>;</condition> <incr><expr><name>ent</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>velem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>elem</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>VT_VARIANT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>v</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VT_VARIANT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pv</name><operator>++</operator> <operator>=</operator> <name>velem</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<case>case <expr><name>VT_CY</name></expr>:</case>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>py</name><operator>++</operator> <operator>=</operator> <call><name>V_CY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<case>case <expr><name>VT_I2</name></expr>:</case>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>ps</name><operator>++</operator> <operator>=</operator> <call><name>V_I2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<case>case <expr><name>VT_I1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pb</name><operator>++</operator> <operator>=</operator> <call><name>V_UI1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>pl</name><operator>++</operator> <operator>=</operator> <call><name>V_I4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>velem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SafeArrayUnlock</name><argument_list>(<argument><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VT_BYREF</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>VT_VARIANT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VT_BYREF</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"not valid value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name><operator>)</operator> <operator>||</operator> <name>vt</name> <operator>==</operator> <name>VT_VARIANT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>VT_VARIANT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_VARIANT</name> <operator>|</operator> <name>VT_BYREF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>vt</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VT_VARIANT</name></expr>:</case>

<expr_stmt><expr><call><name>V_VARIANTREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<case>case <expr><name>VT_CY</name></expr>:</case>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<expr_stmt><expr><call><name>V_CYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_CY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<case>case <expr><name>VT_I2</name></expr>:</case>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<expr_stmt><expr><call><name>V_I2REF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<case>case <expr><name>VT_I1</name></expr>:</case>

<expr_stmt><expr><call><name>V_UI1REF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UI1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>V_I4REF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I4</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>V_CY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dispParams</name><operator>.</operator><name>rgvarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>V_CY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>realargs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dispkind</name> <operator>&amp;</operator> <name>DISPATCH_PROPERTYPUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>( <argument><expr><name>DISPID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgdispidNamedArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DISPID_PROPERTYPUT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>dispid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>cWIN32OLE_lcid</name></expr></argument>,

<argument><expr><name>dispkind</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dispParams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ole_excepinfo2msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"(in OLE method `&lt;dispatch id:%d&gt;': )%s"</literal></expr></argument>,

<argument><expr><call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>dispid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_argv</name><argument_list>(<argument><expr><name>realargs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_invoke2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_invoke2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>DISPATCH_METHOD</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_getproperty2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_invoke2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>DISPATCH_PROPERTYGET</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_setproperty2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dispid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_invoke2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dispid</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>DISPATCH_PROPERTYPUT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_setproperty_with_bracket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>ole_invoke</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>DISPATCH_PROPERTYPUT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>rb_eNoMethodError</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_setproperty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>ole_invoke</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>DISPATCH_PROPERTYPUT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>rb_eNoMethodError</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_getproperty_with_bracket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>ole_invoke</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>DISPATCH_PROPERTYGET</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>rb_eNoMethodError</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_propertyput</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>argErr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXCEPINFO</name></type> <name>excepinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPID</name></type> <name>dispID</name> <init>= <expr><name>DISPID_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPID</name></type> <name>dispIDParam</name> <init>= <expr><name>DISPID_PROPERTYPUT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>wFlags</name> <init>= <expr><name>DISPATCH_PROPERTYPUT</name><operator>|</operator><name>DISPATCH_PROPERTYPUTREF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPPARAMS</name></type> <name>dispParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANTARG</name></type> <name><name>propertyValue</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name><name>pBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dispIDParam</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <name>propertyValue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>propertyValue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>propertyValue</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>excepinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetIDsOfNames</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>,

<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dispID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>pBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"unknown property or method: `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>propertyValue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>dispID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>,

<argument><expr><name>lcid</name></expr></argument>, <argument><expr><name>wFlags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dispParams</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>dispParams</name><operator>.</operator><name>cArgs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>propertyValue</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ole_excepinfo2msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"(in setting property `%s': )%s"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_each_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pEnumV</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>variant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IEnumVARIANT</name> <modifier>*</modifier></type><name>pEnum</name> <init>= <expr><operator>(</operator><name>IEnumVARIANT</name> <operator>*</operator><operator>)</operator><name>pEnumV</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name><name>pEnum</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Next</name></name><argument_list>(<argument><expr><name>pEnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_ienum_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pEnumV</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IEnumVARIANT</name> <modifier>*</modifier></type><name>pEnum</name> <init>= <expr><operator>(</operator><name>IEnumVARIANT</name> <operator>*</operator><operator>)</operator><name>pEnumV</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_each</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>argErr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXCEPINFO</name></type> <name>excepinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPPARAMS</name></type> <name>dispParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IEnumVARIANT</name> <modifier>*</modifier></type><name>pEnum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgvarg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>rgdispidNamedArgs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cNamedArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dispParams</name><operator>.</operator><name>cArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>excepinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><name>DISPID_NEWENUM</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>, <argument><expr><name>lcid</name></expr></argument>,

<argument><expr><name>DISPATCH_METHOD</name> <operator>|</operator> <name>DISPATCH_PROPERTYGET</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dispParams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>excepinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to get IEnum Interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>V_UNKNOWN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><call><name>V_UNKNOWN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IEnumVARIANT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pEnum</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_DISPATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>V_DISPATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><call><name>V_DISPATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IEnumVARIANT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pEnum</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>pEnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to get IEnum Interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>ole_each_sub</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>pEnum</name></expr></argument>, <argument><expr><name>ole_ienum_free</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>pEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_missing</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mid</name></decl>, <decl><type ref="prev"/><name>org_mid</name></decl>, <decl><type ref="prev"/><name>sym</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>org_mid</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>rb_check_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mname</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail: unknown method or property"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mname</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_enc_associate</name><argument_list>(<argument><expr><call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cWIN32OLE_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_propertyput</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_enc_associate</name><argument_list>(<argument><expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cWIN32OLE_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ole_invoke</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>DISPATCH_METHOD</name><operator>|</operator><name>DISPATCH_PROPERTYGET</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>rb_eNoMethodError</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>org_mid</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>typeinfo_from_ole</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppti</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetContainingTypeLib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfoCount</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_str_cmp</name><argument_list>(<argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppti</name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>methods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>typeinfo_from_ole</name><argument_list>(<argument><expr><name>pole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>methods</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ary_concat</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><call><name>ole_methods_from_typeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>methods</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_methods</name><argument_list>( <argument><expr><name>self</name></expr></argument>, <argument><expr><name>INVOKE_FUNC</name> <operator>|</operator> <name>INVOKE_PROPERTYGET</name> <operator>|</operator> <name>INVOKE_PROPERTYPUT</name> <operator>|</operator> <name>INVOKE_PROPERTYPUTREF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_get_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_methods</name><argument_list>( <argument><expr><name>self</name></expr></argument>, <argument><expr><name>INVOKE_PROPERTYGET</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_put_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_methods</name><argument_list>( <argument><expr><name>self</name></expr></argument>, <argument><expr><name>INVOKE_PROPERTYPUT</name><operator>|</operator><name>INVOKE_PROPERTYPUTREF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_func_methods</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ole_methods</name><argument_list>( <argument><expr><name>self</name></expr></argument>, <argument><expr><name>INVOKE_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>( <argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_type_from_itypeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to create WIN32OLE_TYPE obj from ITypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_typelib</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vtlib</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vtlib</name> <operator>=</operator> <call><name>ole_typelib_from_itypeinfo</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtlib</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get type library info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vtlib</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_query_interface</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str_iid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OLECHAR</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IID</name></type> <name>iid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>str_iid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CLSIDFromString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"invalid iid: `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>str_iid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get dispatch interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>,

<argument><expr><literal type="string">"failed to get interface `%s'"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>str_iid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pDispatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><call><name>create_win32ole_object</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>pDispatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_respond_to</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>wcmdname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPID</name></type> <name>DispID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type (expected String or Symbol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wcmdname</name> <operator>=</operator> <call><name>ole_vstr2wc</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetIDsOfNames</name></name><argument_list>( <argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wcmdname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DispID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>wcmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>HRESULT</name></type>

<name>ole_docinfo_from_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpstr</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>helpcontext</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeLib</name> <modifier>*</modifier></type><name>pTypeLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeLib</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>helpstr</name></expr></argument>,

<argument><expr><name>helpcontext</name></expr></argument>, <argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_usertype2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><call><name>V_UNION1</name><argument_list>(<argument><expr><name>pTypeDesc</name></expr></argument>, <argument><expr><name>hreftype</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_docinfo_from_type</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>typedetails</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typedetails</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_ptrtype2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pTypeDesc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vt</name></name> <operator>==</operator> <name>VT_PTR</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>vt</name></name> <operator>==</operator> <name>VT_SAFEARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>V_UNION1</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lptdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>typedetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_typedesc2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typestr</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>pTypeDesc</name><operator>-&gt;</operator><name>vt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_I2</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"I2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_I4</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"I4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R4</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"R4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"R8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_CY</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"CY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"DATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BSTR</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"BSTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"BOOL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_VARIANT</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"VARIANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_DECIMAL</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"DECIMAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_I1</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"I1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UI1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UI2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI4</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UI4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>VT_I8</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"I8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI8</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UI8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VT_INT</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"INT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UINT</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_VOID</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"VOID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_HRESULT</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"HRESULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_PTR</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>typedetails</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typedetails</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ole_ptrtype2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeDesc</name></expr></argument>, <argument><expr><name>typedetails</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VT_SAFEARRAY</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"SAFEARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>typedetails</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typedetails</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ole_ptrtype2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeDesc</name></expr></argument>, <argument><expr><name>typedetails</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VT_CARRAY</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"CARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_USERDEFINED</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"USERDEFINED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typedetails</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typedetails</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ole_usertype2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeDesc</name></expr></argument>, <argument><expr><name>typedetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>typestr</name></expr>;</return>

<case>case <expr><name>VT_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_DISPATCH</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"DISPATCH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_ERROR</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_LPWSTR</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"LPWSTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_LPSTR</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"LPSTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_RECORD</name></expr>:</case>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"RECORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Unknown Type "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>typestr</name></expr></argument>, <argument><expr><call><name>rb_fix2str</name><argument_list>(<argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pTypeDesc</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>typedetails</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>typedetails</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>typestr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_method_help</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>cmdname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>typeinfo_from_ole</name><argument_list>(<argument><expr><name>pole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to get ITypeInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>create_win32ole_method</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not found %s"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fole_activex_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IPersistMemory</name> <modifier>*</modifier></type><name>pPersistMemory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IPersistMemory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pPersistMemory</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pPersistMemory</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>InitNew</name></name><argument_list>(<argument><expr><name>pPersistMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pPersistMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to initialize ActiveX control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HRESULT</name></type>

<name>typelib_from_val</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LCID</name></type> <name>lcid</name> <init>= <expr><name>cWIN32OLE_lcid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pole</name> <operator>=</operator> <call><name>oledata_get_struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetTypeInfo</name></name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pDispatch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetContainingTypeLib</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>com_hash_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>st_free_table</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>com_hash_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_mark_hash</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>com_hash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st_table</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>st_memsize</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_nano_server</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hsubkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>subkey</name> <init>= <expr><literal type="string">"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Server\\ServerLevels"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>regval</name> <init>= <expr><literal type="string">"NanoServer"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hsubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hsubkey</name></expr></argument>, <argument><expr><name>regval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g_running_nano</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hsubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_win32ole</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_lcid</name> <operator>=</operator> <name>LOCALE_SYSTEM_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_ole_initialized_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_nano_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>QueryInterface</name></name> <operator>=</operator> <name>QueryInterface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>AddRef</name></name> <operator>=</operator> <name>AddRef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>Release</name></name> <operator>=</operator> <name>Release</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>GetTypeInfoCount</name></name> <operator>=</operator> <name>GetTypeInfoCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>GetTypeInfo</name></name> <operator>=</operator> <name>GetTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>GetIDsOfNames</name></name> <operator>=</operator> <name>GetIDsOfNames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>com_vtbl</name><operator>.</operator><name>Invoke</name></name> <operator>=</operator> <name>Invoke</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>QueryInterface</name></name> <operator>=</operator> <name>mf_QueryInterface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>AddRef</name></name> <operator>=</operator> <name>mf_AddRef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>Release</name></name> <operator>=</operator> <name>mf_Release</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>HandleInComingCall</name></name> <operator>=</operator> <name>mf_HandleInComingCall</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>RetryRejectedCall</name></name> <operator>=</operator> <name>mf_RetryRejectedCall</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>message_filter</name><operator>.</operator><name>MessagePending</name></name> <operator>=</operator> <name>mf_MessagePending</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc2cp_hash</name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>win32ole_hash_datatype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>enc2cp_hash</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>st_init_numtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>enc2cp_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>com_hash</name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>win32ole_hash_datatype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>com_hash</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>st_init_numtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>com_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cWIN32OLE</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><name>fole_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>fole_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>, <argument><expr><name>fole_s_connect</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"const_load"</literal></expr></argument>, <argument><expr><name>fole_s_const_load</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_free"</literal></expr></argument>, <argument><expr><name>fole_s_free</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_reference_count"</literal></expr></argument>, <argument><expr><name>fole_s_reference_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_show_help"</literal></expr></argument>, <argument><expr><name>fole_s_show_help</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"codepage"</literal></expr></argument>, <argument><expr><name>fole_s_get_code_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"codepage="</literal></expr></argument>, <argument><expr><name>fole_s_set_code_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>, <argument><expr><name>fole_s_get_locale</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"locale="</literal></expr></argument>, <argument><expr><name>fole_s_set_locale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"create_guid"</literal></expr></argument>, <argument><expr><name>fole_s_create_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_initialize"</literal></expr></argument>, <argument><expr><name>fole_s_ole_initialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_uninitialize"</literal></expr></argument>, <argument><expr><name>fole_s_ole_uninitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"invoke"</literal></expr></argument>, <argument><expr><name>fole_invoke</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>fole_getproperty_with_bracket</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"_invoke"</literal></expr></argument>, <argument><expr><name>fole_invoke2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"_getproperty"</literal></expr></argument>, <argument><expr><name>fole_getproperty2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"_setproperty"</literal></expr></argument>, <argument><expr><name>fole_setproperty2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>fole_setproperty_with_bracket</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_free"</literal></expr></argument>, <argument><expr><name>fole_free</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"each"</literal></expr></argument>, <argument><expr><name>fole_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"method_missing"</literal></expr></argument>, <argument><expr><name>fole_missing</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"setproperty"</literal></expr></argument>, <argument><expr><name>fole_setproperty</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_methods"</literal></expr></argument>, <argument><expr><name>fole_methods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_get_methods"</literal></expr></argument>, <argument><expr><name>fole_get_methods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_put_methods"</literal></expr></argument>, <argument><expr><name>fole_put_methods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_func_methods"</literal></expr></argument>, <argument><expr><name>fole_func_methods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_method"</literal></expr></argument>, <argument><expr><name>fole_method_help</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_method_help"</literal></expr></argument>, <argument><expr><literal type="string">"ole_method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_activex_initialize"</literal></expr></argument>, <argument><expr><name>fole_activex_initialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_type"</literal></expr></argument>, <argument><expr><name>fole_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_obj_help"</literal></expr></argument>, <argument><expr><literal type="string">"ole_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_typelib"</literal></expr></argument>, <argument><expr><name>fole_typelib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_query_interface"</literal></expr></argument>, <argument><expr><name>fole_query_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ole_respond_to?"</literal></expr></argument>, <argument><expr><name>fole_respond_to</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>WIN32OLE_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"ARGV"</literal></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_ACP"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_OEMCP"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_OEMCP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_MACCP"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_MACCP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_THREAD_ACP"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_THREAD_ACP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_SYMBOL"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_SYMBOL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_UTF7"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_UTF7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"CP_UTF8"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"LOCALE_SYSTEM_DEFAULT"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>LOCALE_SYSTEM_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE</name></expr></argument>, <argument><expr><literal type="string">"LOCALE_USER_DEFAULT"</literal></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>LOCALE_USER_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_variant_m</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_typelib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_variable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_param</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_variant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_record</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_win32ole_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_init_cp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
