<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNUC_OLDER_3_4_4</name></cpp:macro> <cpp:value>((__GNUC__ &lt; 3) || ((__GNUC__ &lt;= 3) &amp;&amp; (__GNUC_MINOR__ &lt; 4)) || ((__GNUC__ &lt;= 3) &amp;&amp; (__GNUC_MINOR__ &lt;= 4) &amp;&amp; (__GNUC_PATCHLEVEL__ &lt;= 4)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GNUC_OLDER_3_4_4</name><operator>)</operator></expr></condition></ternary></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NONAMELESSUNION</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONAMELESSUNION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ocidl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;olectl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ole2.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_IMULTILANGUAGE</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mlang.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDARG_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va_init_list</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>va_start(a,b)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;varargs.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va_init_list</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>va_start(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objidl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUT</name></cpp:macro> <cpp:value>fprintf(stderr,"%s(%d)\n", __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUTS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,"%s(%d):" #x "=%s\n",__FILE__, __LINE__,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUTMSG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s(%d):" #x "\n",__FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUTI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s(%d):" #x "=%d\n",__FILE__, __LINE__,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUTD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s(%d):" #x "=%f\n",__FILE__, __LINE__,x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GNUC_OLDER_3_4_4</name><operator>)</operator></expr></condition></ternary></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UNION1</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;u.Y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UNION1</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;Y)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GNUC_OLDER_3_4_4</name><operator>)</operator></expr></condition></ternary></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V_UNION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UNION</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;n1.n2.n3.Y)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V_VT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_VT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;n1.n2.vt)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V_BOOL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_BOOL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X,boolVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_I1REF</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_I1REF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, pcVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_UI2REF</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UI2REF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, puiVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_INT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_INT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, intVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_INTREF</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_INTREF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, pintVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_UINT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UINT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, uintVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V_UINTREF</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_UINTREF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V_UNION(X, puintVal)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I8_2_NUM</name></cpp:macro> <cpp:value>LL2NUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI8_2_NUM</name></cpp:macro> <cpp:value>ULL2NUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2I8</name></cpp:macro> <cpp:value>RB_NUM2LL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2UI8</name></cpp:macro> <cpp:value>RB_NUM2ULL</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I8_2_NUM</name></cpp:macro> <cpp:value>RB_INT2NUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI8_2_NUM</name></cpp:macro> <cpp:value>RB_UINT2NUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2I8</name></cpp:macro> <cpp:value>RB_NUM2INT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2UI8</name></cpp:macro> <cpp:value>RB_NUM2UINT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLE_ADDREF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X) ? ((X)-&gt;lpVtbl-&gt;AddRef(X)) : 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLE_RELEASE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X) ? ((X)-&gt;lpVtbl-&gt;Release(X)) : 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLE_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if(ole_initialized() == TRUE) {if(x) {OLE_RELEASE(x);(x) = 0;}}}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLE_GET_TYPEATTR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;lpVtbl-&gt;GetTypeAttr((X), (Y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLE_RELEASE_TYPEATTR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)-&gt;lpVtbl-&gt;ReleaseTypeAttr((X), (Y)))</cpp:value></cpp:define>

<struct>struct <name>oledata</name> <block>{

<decl_stmt><decl><type><name>IDispatch</name> <modifier>*</modifier></type><name>pDispatch</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cWIN32OLE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LCID</name></type> <name>cWIN32OLE_lcid</name></decl>;</decl_stmt>

<function_decl><type><name><name>struct</name> <name>oledata</name></name> <modifier>*</modifier></type><name>oledata_get_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LPWSTR</name></type> <name>ole_vstr2wc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vstr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LONG</name></type> <name>reg_open_key</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>HKEY</name> <modifier>*</modifier></type><name>phkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LONG</name></type> <name>reg_open_vkey</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>HKEY</name> <modifier>*</modifier></type><name>phkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>reg_enum_key</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>reg_get_val</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>reg_get_val2</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ole_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>default_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ole_wc2mb</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>ole_wc2vstr</name><parameter_list>(<parameter><decl><type><name>LPWSTR</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>isfree</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WC2VSTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ole_wc2vstr((x), TRUE)</cpp:value></cpp:define>

<function_decl><type><name>BOOL</name></type> <name>ole_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> <name>ole_docinfo_from_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpstr</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>helpcontext</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>ole_typedesc2val</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>TYPEDESC</name> <modifier>*</modifier></type><name>pTypeDesc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>typedetails</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>make_inspect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>detail</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ole_val2variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ole_val2variant2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ole_val2variant_ex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>ole_variant2val</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> <name>ole_val_ary2variant_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VOID</name> <modifier>*</modifier></type><name>val2variant_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> <name>typelib_from_val</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ITypeLib</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTypeLib</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_variant_m.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_typelib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_type.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_variable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_method.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_param.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_variant.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_record.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole_error.h"</cpp:file></cpp:include>

</unit>
