<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\monitor\monitor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<struct>struct <name>rb_monitor</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>owner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>mutex</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>monitor_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>monitor_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rb_monitor</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>monitor_data_type</name> <init>= <expr><block>{

<expr><literal type="string">"monitor"</literal></expr>,

<expr><block>{<expr><name>monitor_mark</name></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>monitor_memsize</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name><operator>|</operator><name>RUBY_TYPED_WB_PROTECTED</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>rb_monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>monitor_data_type</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><call><name>rb_mutex_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type>

<name>monitor_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr>struct <name>rb_monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>monitor_data_type</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mc_owner_p</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_try_enter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mc_owner_p</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_mutex_trylock</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_enter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mc_owner_p</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_mutex_lock</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_check_owner</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mc_owner_p</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"current thread not owner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_exit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>monitor_check_owner</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"monitor_exit: count:%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mc</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_mutex_unlock</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_locked_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_mutex_locked_p</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_owned_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>rb_mutex_locked_p</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mc_owner_p</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_exit_for_cond</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>cnt</name> <init>= <expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>wait_for_cond_data</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_wait_for_cond_body</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_for_cond_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>wait_for_cond_data</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>mc</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_enter_for_cond</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_for_cond_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>wait_for_cond_data</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_monitor</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>monitor_ptr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_wait_for_cond</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>count</name> <init>= <expr><call><name>monitor_exit_for_cond</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_for_cond_data</name></name></type> <name>data</name> <init>= <expr><block>{

<expr><name>monitor</name></expr>,

<expr><name>cond</name></expr>,

<expr><name>timeout</name></expr>,

<expr><name>count</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>monitor_wait_for_cond_body</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>,

<argument><expr><name>monitor_enter_for_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_sync_body</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_sync_ensure</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>monitor_exit</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>monitor_synchronize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>monitor_enter</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>monitor_sync_body</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>monitor_sync_ensure</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_monitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cMonitor</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Monitor"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><name>monitor_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"try_enter"</literal></expr></argument>, <argument><expr><name>monitor_try_enter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"enter"</literal></expr></argument>, <argument><expr><name>monitor_enter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>, <argument><expr><name>monitor_exit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"synchronize"</literal></expr></argument>, <argument><expr><name>monitor_synchronize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"mon_locked?"</literal></expr></argument>, <argument><expr><name>monitor_locked_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"mon_check_owner"</literal></expr></argument>, <argument><expr><name>monitor_check_owner</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"mon_owned?"</literal></expr></argument>, <argument><expr><name>monitor_owned_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cMonitor</name></expr></argument>, <argument><expr><literal type="string">"wait_for_cond"</literal></expr></argument>, <argument><expr><name>monitor_wait_for_cond</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
