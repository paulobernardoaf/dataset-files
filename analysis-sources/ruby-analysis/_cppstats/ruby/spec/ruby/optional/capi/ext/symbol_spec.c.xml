<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\spec\ruby\optional\capi\ext\symbol_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type> <name>symbol_spec_SYMBOL_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern2</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern_const</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern_c_compare</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>symbol</name> <init>= <expr><call><name>rb_intern</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>symbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern2_c_compare</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>symbol</name> <init>= <expr><call><name>rb_intern2</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>symbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern3</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern3_c_compare</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>symbol</name> <init>= <expr><call><name>rb_intern3</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>symbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_id2name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c_str</name> <init>= <expr><call><name>rb_id2name</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_id2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_intern_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_check_symbol_cstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>rb_check_symbol_cstr</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_is_class_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>rb_is_class_id</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_is_const_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>rb_is_const_id</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_is_instance_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>rb_is_instance_id</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>symbol_spec_rb_sym2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_symbol_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiSymbolSpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"SYMBOL_P"</literal></expr></argument>, <argument><expr><name>symbol_spec_SYMBOL_P</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern2"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern_const"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern_const</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern_c_compare"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern_c_compare</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern2_c_compare"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern2_c_compare</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern3"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern3_c_compare"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern3_c_compare</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_id2name"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_id2name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_id2str"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_id2str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_intern_str"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_intern_str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_check_symbol_cstr"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_check_symbol_cstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_is_class_id"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_is_class_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_is_const_id"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_is_const_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_is_instance_id"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_is_instance_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_sym2str"</literal></expr></argument>, <argument><expr><name>symbol_spec_rb_sym2str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
