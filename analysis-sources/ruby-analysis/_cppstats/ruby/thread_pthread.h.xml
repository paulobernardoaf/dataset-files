<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\thread_pthread.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_NP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread_np.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NATIVETHREAD_LOCK_INIT</name></cpp:macro> <cpp:value>PTHREAD_MUTEX_INITIALIZER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NATIVETHREAD_COND_INIT</name></cpp:macro> <cpp:value>PTHREAD_COND_INITIALIZER</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_cond_t</name></type> <name>rb_nativethread_cond_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>native_thread_data_struct</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>list_node</name></name></type> <name>ubf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_node</name></name></type> <name>gvl</name></decl>;</decl_stmt>

}</block> <decl><name>node</name></decl>;</union>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<union_decl>union

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

struct

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_nativethread_cond_t</name></type> <name>intr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rb_nativethread_cond_t</name></type> <name>gvlq</name></decl>;</decl_stmt> 

</block_content>}</block></union_decl> <expr_stmt><expr><name>cond</name></expr>;</expr_stmt>

}</block></struct></type> <name>native_thread_data_t</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>except</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>try</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>leave</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>finally</name></cpp:undef>

<typedef>typedef <type><struct>struct <name>rb_global_vm_lock_struct</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_thread_struct</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_nativethread_lock_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name></type> <name>waitq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_thread_struct</name></name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timer_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_nativethread_cond_t</name></type> <name>switch_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_nativethread_cond_t</name></type> <name>switch_wait_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_yield</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wait_yield</name></decl>;</decl_stmt>

}</block></struct></type> <name>rb_global_vm_lock_t</name>;</typedef>

</unit>
