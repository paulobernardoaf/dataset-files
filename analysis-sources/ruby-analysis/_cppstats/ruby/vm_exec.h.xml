<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\vm_exec.h"><typedef>typedef <type><name>long</name></type> <name>OFFSET</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>lindex_t</name>;</typedef>

<typedef>typedef <type><name>VALUE</name></type> <name>GENTRY</name>;</typedef>

<typedef>typedef <type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>ISEQ</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugs</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ENTER_INSN</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_vmdebug_debug_print_pre(ec, GET_CFP(), GET_PC());</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_STACK_CACHING</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_REGS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>, reg_a, reg_b</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_REGS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_END_INSN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_vmdebug_debug_print_post(ec, GET_CFP() SC_REGS());</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugs</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ENTER_INSN</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_END_INSN</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>throwdebug</name></cpp:macro> <cpp:value>if(0)printf</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_INSNS_COUNTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INSNS_COUNTER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISPATCH_XXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>error</name> <operator>!</operator></expr>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>OPT_CALL_THREADED_CODE</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn_func_##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;LABEL(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_ENTRY</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static rb_control_frame_t * FUNC_FASTCALL(LABEL(insn))(rb_execution_context_t *ec, rb_control_frame_t *reg_cfp) {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_INSN</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return reg_cfp;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_INSN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>return reg_cfp;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_OF_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return LABEL(x)(ec, reg_cfp);</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>OPT_TOKEN_THREADED_CODE</name> <operator>||</operator> <name>OPT_DIRECT_THREADED_CODE</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSN_LABEL_##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSN_ELABEL_##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION(&amp;&amp;LABEL(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_ENTRY_SIG</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (0) fprintf(stderr, "exec: %s@(%"PRIdPTRDIFF", %"PRIdPTRDIFF")@%s:%u\n", #insn, (reg_pc - reg_cfp-&gt;iseq-&gt;body-&gt;iseq_encoded), (reg_cfp-&gt;pc - reg_cfp-&gt;iseq-&gt;body-&gt;iseq_encoded), RSTRING_PTR(rb_iseq_path(reg_cfp-&gt;iseq)), rb_iseq_line_no(reg_cfp-&gt;iseq, reg_pc - reg_cfp-&gt;iseq-&gt;body-&gt;iseq_encoded)); if (USE_INSNS_COUNTER) vm_insns_counter_count_insn(BIN(insn));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_DISPATCH_SIG</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_ENTRY</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LABEL(insn): INSN_ENTRY_SIG(insn);</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DIRECT_THREADED_CODE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_DISPATCH</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSN_DISPATCH_SIG(insn); RB_GNUC_EXTENSION_BLOCK(goto *(void const *)GET_CURRENT_INSN()); ;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_ARCH_DEPEND_WAY</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ __volatile__("jmp *%0;\t#-- inserted by vm.h\t[length = 2]" : : "r" (addr))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_ARCH_DEPEND_WAY</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_DISPATCH</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCH_ARCH_DEPEND_WAY(insns_address_table[GET_CURRENT_INSN()]); INSN_DISPATCH_SIG(insn); RB_GNUC_EXTENSION_BLOCK(goto *insns_address_table[GET_CURRENT_INSN()]); rb_bug("tc error");</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_INSN</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_END_INSN(); TC_DISPATCH(insn);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_DISPATCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TC_DISPATCH(__START__) {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_INSNS_DISPATCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_bug("unknown insn: %"PRIdVALUE, GET_CURRENT_INSN()); }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_INSN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TC_DISPATCH(__NEXT_INSN__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_OF_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>start_of_##x:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>goto start_of_##x;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_ENTRY</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case BIN(insn):</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_INSN</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_END_INSN(); break;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_DISPATCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>while (1) { switch (GET_CURRENT_INSN()) {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_INSNS_DISPATCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>default: SDR(); rb_bug("unknown insn: %ld", GET_CURRENT_INSN()); } }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_INSN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>goto first</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_OF_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>start_of_##x:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_ORIGINAL_INSN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>goto start_of_##x;</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_SP_CNT</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>sp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sp) - (ec)-&gt;vm_stack)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_EXCEPTION</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ec-&gt;errinfo = (VALUE)(exc); EC_JUMP_TAG(ec, ec-&gt;tag-&gt;state); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_CALL_THREADED_CODE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_EXCEPTION</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ec-&gt;errinfo = (VALUE)(exc); return 0; } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_EXCEPTION</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (VALUE)(exc)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_##r)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_DEBUG_STACKOVERFLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_DEBUG_STACKOVERFLOW</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_VM_STACK_OVERFLOW_FOR_INSN</name><parameter_list>(<parameter><type><name>cfp</name></type></parameter>, <parameter><type><name>margin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WHEN_VM_STACK_OVERFLOWED(cfp, (cfp)-&gt;sp, margin) vm_stack_overflow_for_insn()</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_VM_STACK_OVERFLOW_FOR_INSN</name><parameter_list>(<parameter><type><name>cfp</name></type></parameter>, <parameter><type><name>margin</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_LABEL2</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSN_LABEL_ ##insn ##_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_LABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSN_LABEL2(NAME_OF_CURRENT_INSN, x)</cpp:value></cpp:define>

</unit>
