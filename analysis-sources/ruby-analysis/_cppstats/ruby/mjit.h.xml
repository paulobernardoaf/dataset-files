<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\mjit.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_counter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<enum>enum <name>rb_mjit_iseq_func</name> <block>{

<decl><name>NOT_ADDED_JIT_ISEQ_FUNC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>NOT_READY_JIT_ISEQ_FUNC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>NOT_COMPILED_JIT_ISEQ_FUNC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>LAST_JIT_ISEQ_FUNC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

}</block>;</enum>

<struct>struct <name>mjit_options</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name>on</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>save_temps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>warnings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>debug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>debug_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_calls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_cache_size</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>rb_mjit_compile_info</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>disable_ivar_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>disable_exivar_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>disable_send_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>disable_inlining</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>mjit_func_t</name>)<parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>RUBY_EXTERN</name> struct <name>mjit_options</name> <name>mjit_opts</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>bool</name></type> <name>mjit_call_p</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>rb_mjit_add_iseq_to_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_mjit_wait_call</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>rb_mjit_compile_info</name></name><modifier>*</modifier></type> <name>rb_mjit_iseq_compile_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>rb_mjit_recompile_iseq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_END</name>

<specifier>extern</specifier> <name>bool</name></type> <name>mjit_compile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mjit_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_gc_start_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_gc_exit_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_free_iseq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_update_references</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_mark</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mjit_cont</name></name> <modifier>*</modifier></type><name>mjit_cont_new</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_cont_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mjit_cont</name></name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_add_class_serial</name><parameter_list>(<parameter><decl><type><name>rb_serial_t</name></type> <name>class_serial</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_remove_class_serial</name><parameter_list>(<parameter><decl><type><name>rb_serial_t</name></type> <name>class_serial</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mjit_mark_cc_entries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_ISEQ_SIZE_THRESHOLD</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>mjit_target_iseq_p</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>body</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ISEQ_TYPE_METHOD</name> <operator>||</operator> <name><name>body</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ISEQ_TYPE_BLOCK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>body</name><operator>-&gt;</operator><name>iseq_size</name></name> <operator>&lt;</operator> <name>JIT_ISEQ_SIZE_THRESHOLD</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>mjit_exec</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>unsigned</name></type> <name>total_calls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mjit_func_t</name></type> <name>func</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mjit_call_p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qundef</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iseq</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>body</name> <operator>=</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_calls</name> <operator>=</operator> <operator>++</operator><name><name>body</name><operator>-&gt;</operator><name>total_calls</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>body</name><operator>-&gt;</operator><name>jit_func</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>func_i</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>func</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>func_i</name> <operator>&lt;=</operator> <name>LAST_JIT_ISEQ_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_frame_JT2VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_frame_VM2VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ASSUME</name><argument_list>(<argument><expr><name>func_i</name> <operator>&lt;=</operator> <name>LAST_JIT_ISEQ_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator>enum <name>rb_mjit_iseq_func</name><operator>)</operator><name>func_i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NOT_ADDED_JIT_ISEQ_FUNC</name></expr>:</case>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_exec_not_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_calls</name> <operator>==</operator> <name><name>mjit_opts</name><operator>.</operator><name>min_calls</name></name> <operator>&amp;&amp;</operator> <call><name>mjit_target_iseq_p</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_mjit_add_iseq_to_process</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>mjit_opts</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_mjit_wait_call</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qundef</name></expr>;</return>

<case>case <expr><name>NOT_READY_JIT_ISEQ_FUNC</name></expr>:</case>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_exec_not_ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qundef</name></expr>;</return>

<case>case <expr><name>NOT_COMPILED_JIT_ISEQ_FUNC</name></expr>:</case>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_exec_not_compiled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qundef</name></expr>;</return>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_frame_JT2JT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_frame_VM2JT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER_INC</name><argument_list>(<argument><expr><name>mjit_exec_call_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>mjit_child_after_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>mjit_cont</name></name> <modifier>*</modifier></type><name>mjit_cont_new</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_cont_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mjit_cont</name></name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_gc_start_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_gc_exit_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_free_iseq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_mark</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_add_class_serial</name><parameter_list>(<parameter><decl><type><name>rb_serial_t</name></type> <name>class_serial</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_remove_class_serial</name><parameter_list>(<parameter><decl><type><name>rb_serial_t</name></type> <name>class_serial</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>mjit_exec</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>Qundef</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mjit_child_after_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
