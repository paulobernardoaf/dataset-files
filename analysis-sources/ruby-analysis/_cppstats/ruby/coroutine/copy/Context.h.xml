<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\coroutine\copy\Context.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE</name></cpp:macro> <cpp:value>__attribute__((noreturn)) void</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INTPTR_MAX</name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE_LIMITED_ADDRESS_SPACE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE_PRIVATE_STACK</name></cpp:macro></cpp:define>

<struct>struct <name>coroutine_context</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmp_buf</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>COROUTINE</name></type>(<modifier>*</modifier><name>coroutine_start</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>coroutine_save_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>COROUTINE</name></type> <name>coroutine_restore_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>coroutine_start</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coroutine_initialize_main</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>coroutine_save_stack</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>coroutine_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
