<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\coroutine\x86\Context.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE</name></cpp:macro> <cpp:value>__attribute__((noreturn, fastcall)) void</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE_LIMITED_ADDRESS_SPACE</name></cpp:macro></cpp:define>

<enum>enum <block>{<decl><name>COROUTINE_REGISTERS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>}</block>;</enum>

<struct>struct <name>coroutine_context</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>stack_pointer</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>COROUTINE</name></type>(<modifier>*</modifier> <name>coroutine_start</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(fastcall</function_decl>));</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>coroutine_start</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&amp;&amp;</operator> <name>stack</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>top</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>top</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>-=</operator> <name>COROUTINE_REGISTERS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>COROUTINE_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>coroutine_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>current</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(fastcall</function_decl>))<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
