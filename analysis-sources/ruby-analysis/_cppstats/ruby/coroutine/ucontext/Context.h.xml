<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\coroutine\ucontext\Context.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucontext.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE</name></cpp:macro> <cpp:value>__attribute__((noreturn)) void</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INTPTR_MAX</name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COROUTINE_LIMITED_ADDRESS_SPACE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>coroutine_context</name>

<block>{

<decl_stmt><decl><type><name>ucontext_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>from</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>COROUTINE</name></type>(<modifier>*</modifier> <name>coroutine_start</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>COROUTINE</name></type> <name>coroutine_trampoline</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>_start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_initialize</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>coroutine_start</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&amp;&amp;</operator> <name>stack</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coroutine_initialize_main</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>makecontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>coroutine_trampoline</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>coroutine_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>current</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>previous</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swapcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>previous</name></expr>;</expr_stmt>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>coroutine_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
