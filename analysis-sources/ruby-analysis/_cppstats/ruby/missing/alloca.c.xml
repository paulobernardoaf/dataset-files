<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\alloca.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>SCCSid</name><index>[]</index></name> <init>= <expr><literal type="string">"@(#)alloca.c 1.1"</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X3J11</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>C_ALLOCA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>emacs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><specifier>static</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STACK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>you</name>

<name>lose</name>

<operator>--</operator> <name>must</name> <name>know</name> <name>STACK_DIRECTION</name> <name>at</name> <name>compile</name><operator>-</operator><name>time</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X3J11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>pointer</name>;</typedef> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>pointer</name>;</typedef> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name></cpp:macro> <cpp:value>ruby_xmalloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xfree</name></cpp:macro> <cpp:value>ruby_xfree</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>xfree</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>pointer</name></type> <name>xmalloc</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STACK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_DIRECTION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STACK_DIRECTION</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_DIR</name></cpp:macro> <cpp:value>STACK_DIRECTION</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stack_dir</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_DIR</name></cpp:macro> <cpp:value>stack_dir</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_stack_direction</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>auto</specifier> <name>char</name></type> <name>dummy</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_stack_direction</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else 

if <condition>(<expr><operator>&amp;</operator><name>dummy</name> <operator>&gt;</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stack_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stack_dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_SIZE</name></cpp:macro> <cpp:value>sizeof(double)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <name>hdr</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>align</name><index>[<expr><name>ALIGN_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name><name>union</name> <name>hdr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deep</name></decl>;</decl_stmt> 

}</block> <decl><name>h</name></decl>;</struct>

}</block></union></type> <name>header</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>header</name> <modifier>*</modifier></type><name>last_alloca_header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<function><type><name>pointer</name></type>

<name>alloca</name> <parameter_list>(<parameter><decl><type><name>size</name></type></decl></parameter>)</parameter_list> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>auto</specifier> <name>char</name></type> <name>probe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>depth</name> <init>= <expr><operator>&amp;</operator><name>probe</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STACK_DIRECTION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>STACK_DIR</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>find_stack_direction</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>header</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name>last_alloca_header</name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>STACK_DIR</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>deep</name></name> <operator>&gt;</operator> <name>depth</name>

<operator>||</operator> <name>STACK_DIR</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>deep</name></name> <operator>&lt;</operator> <name>depth</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>header</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name> <argument_list>(<argument><expr><operator>(</operator><name>pointer</name><operator>)</operator> <name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt></block_content></block></for> 

<expr_stmt><expr><name>last_alloca_header</name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt> 

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>pointer</name></type> <name>new</name> <init>= <expr><call><name>xmalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>header</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name><name>h</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>last_alloca_header</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>header</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name><name>h</name><operator>.</operator><name>deep</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_alloca_header</name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>*</operator><operator>)</operator><name>new</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pointer</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
