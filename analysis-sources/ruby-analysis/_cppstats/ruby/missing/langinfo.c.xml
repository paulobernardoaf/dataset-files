<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\langinfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/missing.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>strncasecmp</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strncasecmp</name></cpp:macro> <cpp:value>strnicmp</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"langinfo.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_CODESET</name></cpp:macro> <cpp:value>"US-ASCII"</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JA_CODESET</name></cpp:macro> <cpp:value>"Windows-31J"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JA_CODESET</name></cpp:macro> <cpp:value>"EUC-JP"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>digit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;= '0' &amp;&amp; (x) &lt;= '9')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strstart</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncasecmp((s), (n), strlen(n)) == 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>nl_langinfo_codeset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>l</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>l</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>l</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"POSIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>C_CODESET</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"UTF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"UTF-8"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <literal type="number">5</literal><operator>,</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"8859-"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>=</operator> <literal type="number">9</literal><operator>,</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>digit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-\0\0"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>digit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"KOI8-R"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"KOI8-R"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"KOI8-U"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"KOI8-U"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"620"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"TIS-620"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"2312"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"GB2312"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"HKSCS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Big5HKSCS"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"BIG5"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Big5"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"GBK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"GBK"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"18030"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"GB18030"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Shift_JIS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"SJIS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Windows-31J"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"euro"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-15"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"zh_TW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Big5"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"zh_HK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Big5HKSCS"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"zh"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"GB2312"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"ja"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>JA_CODESET</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"ko"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"EUC-KR"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"ru"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"KOI8-R"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"uk"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"KOI8-U"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"pl"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"hr"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"hu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"cs"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"sk"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"sl"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-2"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"eo"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"mt"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-3"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"el"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-7"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"he"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-8"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"tr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-9"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"th"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"TIS-620"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-13"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"cy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-14"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"ro"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"ISO-8859-2"</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"am"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstart</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"vi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"UTF-8"</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char</name> <modifier>*</modifier></type><name>nl_langinfo</name><parameter_list>(<parameter><decl><type><name>nl_item</name></type> <name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codeset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>CODESET</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>codeset</name> <operator>=</operator> <call><name>nl_langinfo_codeset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codeset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codeset</name> <operator>=</operator> <name>C_CODESET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>codeset</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
