<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\dtoa.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_BIG_ENDIAN</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_LITTLE_ENDIAN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vax__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAX</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IEEE_BIG_ENDIAN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IEEE_LITTLE_ENDIAN</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__VFP_FP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_BIG_ENDIAN</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IEEE_LITTLE_ENDIAN</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Long</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ULong</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULong</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>long int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULong</name></cpp:macro> <cpp:value>unsigned long int</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Llong</name></cpp:macro> <cpp:value>LONG_LONG</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_LONG_LONG</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{fprintf(stderr, "%s\n", (x)); exit(EXIT_FAILURE);}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>MALLOC</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC</name></cpp:macro> <cpp:value>xmalloc</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>FREE</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE</name></cpp:macro> <cpp:value>xfree</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIVATE_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIVATE_MEM</name></cpp:macro> <cpp:value>2304</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIVATE_mem</name></cpp:macro> <cpp:value>((PRIVATE_MEM+sizeof(double)-1)/sizeof(double))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>private_mem</name><index>[<expr><name>PRIVATE_mem</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pmem_next</name> <init>= <expr><name>private_mem</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IEEE_Arith</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Avoid_Underflow</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_Arith</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_Arith</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Bad_float_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>308</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>7.2370055773322621e+75</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>1.7014118346046923e+38</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

} 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hexdigits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IEEE_BIG_ENDIAN</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>Exactly</name> <name>one</name> <name>of</name></type> <name>IEEE_LITTLE_ENDIAN</name></decl>, <decl><type ref="prev"/><name>IEEE_BIG_ENDIAN</name></decl>, <decl><type ref="prev"/><name>VAX</name></decl>, <decl><type ref="prev"/><name>or</name> <name>IBM</name> <name>should</name> <name>be</name> <name><name>defined</name><operator>.</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name/></name>typedef union <block>{<block_content> <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> </block_content>}</block></decl></decl_stmt> <expr_stmt><expr><name>U</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YES_ALIAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>double</name></type> <name>double_u</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dval</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ULong *)&amp;(x))[1])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ULong *)&amp;(x))[0])</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ULong *)&amp;(x))[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ULong *)&amp;(x))[1])</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>U</name></type> <name>double_u</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).L[1])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).L[0])</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).L[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).L[1])</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dval</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Storeinc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned short *)(a))[1] = (unsigned short)(b), ((unsigned short *)(a))[0] = (unsigned short)(c), (a)++)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Storeinc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned short *)(a))[0] = (unsigned short)(b), ((unsigned short *)(a))[1] = (unsigned short)(c), (a)++)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7ff00000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>1023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Emin</name></cpp:macro> <cpp:value>(-1022)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x3ff00000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x3ff00000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_IEEE_Scale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Avoid_Underflow</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Flush_Denorm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sudden_Underflow</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Flt_Rounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>FLT_ROUNDS</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rounding</name></cpp:macro> <cpp:value>rounding</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check_FLT_ROUNDS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_FLT_ROUNDS</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rounding</name></cpp:macro> <cpp:value>Flt_Rounds</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check_FLT_ROUNDS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Honor_FLT_ROUNDS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_INEXACT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sudden_Underflow</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sudden_Underflow</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Flt_Rounds</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7f000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x41000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x41000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xefffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Flt_Rounds</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7f80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x40800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x4080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0x7fffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_BIASED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RND_PRODQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_product</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) = rnd_prod((a), (b)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_quotient</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) = rnd_quot((a), (b)))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name></type> <name>rnd_prod</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>rnd_quot</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_product</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) *= (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_quotient</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) /= (b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Big0</name></cpp:macro> <cpp:value>(Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Big1</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pack_32</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFFFFFFF</name></cpp:macro> <cpp:value>0xffffffffUL</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ULLong</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Just_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Pack_32</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Llong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Llong</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULLong</name></cpp:macro> <cpp:value>unsigned Llong</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLE_THREADS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACQUIRE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACQUIRE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kmax</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<struct>struct <name>Bigint</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Bigint</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>maxwds</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>wds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name></type> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>Bigint</name></name></type> <name>Bigint</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type><name><name>freelist</name><index>[<expr><name>Kmax</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>Balloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>Kmax</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rv</name> <operator>=</operator> <name><name>freelist</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>freelist</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name> <operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bigint</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Bigint</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>Kmax</name> <operator>&amp;&amp;</operator> <name>pmem_next</name> <operator>-</operator> <name>private_mem</name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>PRIVATE_mem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator><name>pmem_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pmem_next</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>maxwds</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Bfree</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <name>Kmax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>freelist</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freelist</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bcopy</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((char *)&amp;(x)-&gt;sign, (char *)&amp;(y)-&gt;sign, (y)-&gt;wds*sizeof(Long) + 2*sizeof(int))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>multadd</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>wds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULLong</name></type> <name>carry</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ULong</name></type> <name>carry</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wds</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>xi</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>xi</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>xi</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>m</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>*</operator> <name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>wds</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wds</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>wds</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wds</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>s2b</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nd0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>ULong</name></type> <name>y9</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>nd</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>y</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y9</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y9</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">9</literal> <operator>&lt;</operator> <name>nd0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>nd0</name></expr>)</condition>;</do>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>hi0bits</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>ULong</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x40000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>lo0bits</name><parameter_list>(<parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>ULong</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>i2b</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>mult</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>wa</name></decl>, <decl><type ref="prev"/><name>wb</name></decl>, <decl><type ref="prev"/><name>wc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xae</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xbe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xc0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name></type> <name>y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULLong</name></type> <name>carry</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ULong</name></type> <name>carry</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>z2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wa</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>maxwds</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr><operator>,</operator> <expr><name>xa</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>wc</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xa</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>xa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xae</name> <operator>=</operator> <name>xa</name> <operator>+</operator> <name>wa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xbe</name> <operator>=</operator> <name>xb</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc0</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>xc</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><name>carry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xb</name><operator>++</operator></expr><operator>,</operator> <expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><name>carry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>*</operator><name>xc</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <name>z2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>*</operator><name>xc</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><name>carry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>xc0</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr><operator>,</operator> <expr><name>xc</name> <operator>=</operator> <name>xc0</name> <operator>+</operator> <name>wc</name></expr>;</init> <condition><expr><name>wc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>--</operator><name>xc</name></expr>;</condition> <incr><expr><operator>--</operator><name>wc</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type><name>p5s</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>pow5mult</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p5</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p51</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>p05</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">125</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>p05</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p5</name> <operator>=</operator> <name>p5s</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p5</name> <operator>=</operator> <name>p5s</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p5s</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">625</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p5s</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">625</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>p5</name></expr></argument>,<argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p51</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>p5</name></expr></argument>,<argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p51</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p51</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>lshift</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name></expr>;</init> <condition><expr><name>n1</name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>k1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k1</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x1</name> <operator>=</operator> <name>z</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal> <operator>|</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k1</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x1</name> <operator>=</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cmp</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>xa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xa0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xb0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"cmp called with a-&gt;x[a-&gt;wds-1] == 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"cmp called with b-&gt;x[b-&gt;wds-1] == 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xa0</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xa</name> <operator>=</operator> <name>xa0</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xb0</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xb</name> <operator>=</operator> <name>xb0</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>xa</name> <operator>!=</operator> <operator>*</operator><operator>--</operator><name>xb</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>xa</name> <operator>&lt;</operator> <operator>*</operator><name>xb</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xa</name> <operator>&lt;=</operator> <name>xa0</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>NO_SANITIZE</name><argument_list>(<argument><expr><literal type="string">"unsigned-integer-overflow"</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>Bigint</name> <operator>*</operator> <call><name>diff</name><argument_list>(<argument><expr><name>Bigint</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>Bigint</name> <operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>diff</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>wa</name></decl>, <decl><type ref="prev"/><name>wb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>xa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xae</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xbe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULLong</name></type> <name>borrow</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ULong</name></type> <name>borrow</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>z</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xae</name> <operator>=</operator> <name>xa</name> <operator>+</operator> <name>wa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xbe</name> <operator>=</operator> <name>xb</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>xb</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>

<while>while <condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>xb</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>xb</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>

<while>while <condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<do>do <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>xb</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>

<while>while <condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>!</operator><operator>*</operator><operator>--</operator><name>xc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wa</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wa</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>

<name>ulp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>Long</name></type> <name>L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_u</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x_</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>|=</operator> <name>Exp_msk1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>-</operator><name>L</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>Exp_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x80000</literal> <operator>&gt;&gt;</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <name>Exp_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>L</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal> <operator>-</operator> <name>L</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>

<name>b2d</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>xa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xa0</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_u</name></type> <name>d</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d0</name></cpp:macro> <cpp:value>word0(d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d1</name></cpp:macro> <cpp:value>word1(d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>xa0</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xa</name> <operator>=</operator> <name>xa0</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>xa</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"zero y in b2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>Ebits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>Ebits</name> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal><operator>-</operator><name>Ebits</name><operator>)</operator> <operator>+</operator> <name>k</name><operator>)</operator> <operator>|</operator> <name>w</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>Ebits</name> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<goto>goto <name>ret_d</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>-=</operator> <name>Ebits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>z</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>w</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>+</operator> <name>Ebits</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<goto>goto <name>ret_d</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>w</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>ret_d</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>d0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d1</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>

<name>d2b</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d_</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double_u</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>de</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d0</name></cpp:macro> <cpp:value>word0(d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d1</name></cpp:macro> <cpp:value>word1(d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>d0</name> <operator>&amp;</operator> <name>Frac_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>&amp;=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>de</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>z</name> <operator>|=</operator> <name>Exp_msk11</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>|=</operator> <name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>=</operator> <name>d1</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"Zero passed to d2b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>=</operator> <name>d1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>-</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name><operator>+</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"Zero passed to d2b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <operator>(</operator><name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>P</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>k</name> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>P</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><name>i</name> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">16</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d1</name></cpp:undef>

<function><type><specifier>static</specifier> <name>double</name></type>

<name>ratio</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double_u</name></type> <name>da</name></decl>, <decl><type ref="prev"/><name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>ka</name></decl>, <decl><type ref="prev"/><name>kb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>b2d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ka</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>b2d</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>ka</name> <operator>-</operator> <name>kb</name> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>ka</name> <operator>-</operator> <name>kb</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>k</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>k</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>dval</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type>

<name><name>tens</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1e0</literal></expr>, <expr><literal type="number">1e1</literal></expr>, <expr><literal type="number">1e2</literal></expr>, <expr><literal type="number">1e3</literal></expr>, <expr><literal type="number">1e4</literal></expr>, <expr><literal type="number">1e5</literal></expr>, <expr><literal type="number">1e6</literal></expr>, <expr><literal type="number">1e7</literal></expr>, <expr><literal type="number">1e8</literal></expr>, <expr><literal type="number">1e9</literal></expr>,

<expr><literal type="number">1e10</literal></expr>, <expr><literal type="number">1e11</literal></expr>, <expr><literal type="number">1e12</literal></expr>, <expr><literal type="number">1e13</literal></expr>, <expr><literal type="number">1e14</literal></expr>, <expr><literal type="number">1e15</literal></expr>, <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e17</literal></expr>, <expr><literal type="number">1e18</literal></expr>, <expr><literal type="number">1e19</literal></expr>,

<expr><literal type="number">1e20</literal></expr>, <expr><literal type="number">1e21</literal></expr>, <expr><literal type="number">1e22</literal></expr>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <expr><literal type="number">1e23</literal></expr>, <expr><literal type="number">1e24</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>bigtens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr>, <expr><literal type="number">1e64</literal></expr>, <expr><literal type="number">1e128</literal></expr>, <expr><literal type="number">1e256</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr>, <expr><literal type="number">1e-64</literal></expr>, <expr><literal type="number">1e-128</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">9007199254740992.</literal><operator>*</operator><literal type="number">9007199254740992.e-256</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">1e-256</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Scale_Bit</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bigtens</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr>, <expr><literal type="number">1e64</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr>, <expr><literal type="number">1e-64</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>bigtens</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INFNAN_CHECK</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD0</name></cpp:macro> <cpp:value>0x7ff80000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><name>sp</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>d</name> <operator>=</operator> <operator>*</operator><name>t</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_Hex_NaN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>hexnan</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>rvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULong</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>havedig</name></decl>, <decl><type ref="prev"/><name>udx0</name></decl>, <decl><type ref="prev"/><name>xshift</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>havedig</name> <operator>=</operator> <name>xshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>udx0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>udx0</name> <operator>&amp;&amp;</operator> <name>havedig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>udx0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xshift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name>havedig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>havedig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xshift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>udx0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xfffff</literal><operator>)</operator> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>*</operator><name>rvp</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_mask</name> <operator>|</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>*</operator><name>rvp</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>double strtod(const char *s00, char **se)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>double</name></type>

<name>strtod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>bb2</name></decl>, <decl><type ref="prev"/><name>bb5</name></decl>, <decl><type ref="prev"/><name>bbe</name></decl>, <decl><type ref="prev"/><name>bd2</name></decl>, <decl><type ref="prev"/><name>bd5</name></decl>, <decl><type ref="prev"/><name>bbbits</name></decl>, <decl><type ref="prev"/><name>bs2</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>dsign</name></decl>,

<decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>esign</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>, <decl><type ref="prev"/><name>nd0</name></decl>, <decl><type ref="prev"/><name>nf</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>, <decl><type ref="prev"/><name>nz0</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>aadj</name></decl>, <decl><type ref="prev"/><name>adj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_u</name></type> <name>aadj1</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>rv0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Long</name></type> <name>L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>bb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bd0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>inexact</name></decl>, <decl><type ref="prev"/><name>oldinexact</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nz0</name> <operator>=</operator> <name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</init><condition>;</condition><incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>break2</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<goto>goto <name>ret0</name>;</goto>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<continue>continue;</continue>

<default>default:</default>

<goto>goto <name>break2</name>;</goto>

</block_content>}</block></switch></block_content></block></for>

<label><name>break2</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <operator>++</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aadj</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nd0</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>s1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>adj</name> <operator>+=</operator> <name>aadj</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>s1</name> <operator>-</operator> <name>hexdigit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nd0</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aadj</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>s1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nd0</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nd0</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>adj</name> <operator>+=</operator> <name>aadj</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>s1</name> <operator>-</operator> <name>hexdigit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aadj</name> <operator>/=</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><operator>++</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">0x2C</literal> <operator>-</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>dsign</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>nd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <literal type="char">'9'</literal> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nd</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nd</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nd</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>+</operator> <name>dsign</name> <operator>*</operator> <name>nd0</name> <operator>&gt;</operator> <literal type="number">2095</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>nd0</name> <operator>+=</operator> <name>nd</name> <operator>*</operator> <name>dsign</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name>adj</name></expr></argument>, <argument><expr><name>nd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nz0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nd</name> <operator>=</operator> <name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>nd</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>s1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s2</name> <operator>!=</operator> <operator>*</operator><name>s1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>dig_done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>have_dig</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>dig_done</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>

<label><name>have_dig</name>:</label>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&gt;</operator> <name>DBL_DIG</name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<label><name>dig_done</name>:</label>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>ret0</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s00</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>L</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>s1</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>L</name> <operator>&gt;</operator> <literal type="number">19999</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">19999</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>esign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"nf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"inity"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x7ff00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"an"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NAN_WORD0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NAN_WORD1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_Hex_NaN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>hexnan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<label><name>ret0</name>:</label>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e</name> <operator>-=</operator> <name>nf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><name>nd</name> <operator>&lt;</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>nd</name></expr> </then><else>: <expr><name>DBL_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>DBL_DIG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldinexact</name> <operator>=</operator> <call><name>get_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bd0</name> <operator>=</operator> <name>bb</name> <operator>=</operator> <name>bd</name> <operator>=</operator> <name>bs</name> <operator>=</operator> <name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RND_PRODQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>Flt_Rounds</name> <operator>==</operator> <literal type="number">1</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<goto>goto <name>vax_ovfl_check</name>;</goto>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>DBL_DIG</name> <operator>-</operator> <name>nd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>e</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>vax_ovfl_check</name>:</label>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>

<operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Inaccurate_Divide</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <operator>-</operator><name>Ten_pmax</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rounded_quotient</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><operator>-</operator><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e1</name> <operator>+=</operator> <name>nd</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>DBL_DIG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldinexact</name> <operator>=</operator> <call><name>get_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rounding</name> <operator>=</operator> <name>Flt_Rounds</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rounding</name> <operator>=</operator> <ternary><condition><expr><name>rounding</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>rounding</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;</operator> <name>DBL_MAX_10_EXP</name></expr>)</condition> <block>{<block_content>

<label><name>ovfl</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>rounding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1e300</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>bd0</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>retfree</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>

<operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>e1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>-</operator><name>e1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n_bigtens</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <name>Scale_Bit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>

<operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">53</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>P</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name><operator>-</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">2.</literal><operator>*</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>undfl</name>:</label>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>bd0</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>retfree</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bd0</name> <operator>=</operator> <call><name>s2b</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>nd0</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>bd0</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbe</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bs2</name> <operator>=</operator> <name>bb2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbe</name> <operator>-</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>Emin</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>P</name> <operator>-</operator> <name>Emin</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>P</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>bbbits</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bbe</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbe</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>Emin</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>P</name> <operator>-</operator> <name>Emin</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bd2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bd2</name> <operator>+=</operator> <name>scale</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>bb2</name> <operator>&lt;</operator> <name>bd2</name></expr> ?</condition><then> <expr><name>bb2</name></expr> </then><else>: <expr><name>bd2</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>bs2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bs2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bb2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bb5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bb1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <name>bb1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bb2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bd5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bd2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dsign</name> <operator>=</operator> <name><name>delta</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>delta</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rounding</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

<goto>goto <name>apply_adj</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>dsign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <operator>-</operator><literal type="number">1.</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>delta</name></expr></argument>,<argument><expr><name>Log2P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <operator>-</operator><literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>apply_adj</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>

<operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>adj</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator>

<name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name><operator>*</operator><call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name><operator>*</operator><call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>ratio</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adj</name> <operator>&lt;</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adj</name> <operator>&lt;=</operator> <literal type="number">0x7ffffffe</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>adj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>adj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>rounding</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>dsign</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>adj</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adj</name> <operator>*=</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<goto>goto <name>cont</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>adj</name> <operator>*=</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>cont</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>||</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>||</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>Exp_msk1</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>delta</name></expr></argument>,<argument><expr><name>Log2P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop_down</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask1</name><operator>)</operator> <operator>==</operator> <name>Bndry_mask1</name>

<operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><operator>(</operator><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><literal type="number">0xffffffff</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>Exp_shift</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="number">0xffffffff</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>

<operator>+</operator> <name>Exp_msk1</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>Exp_msk1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>drop_down</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>scale</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr> </then><else>: <expr><name>Exp_msk1</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <name>Exp_msk1</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <operator>(</operator><name>P</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<goto>goto <name>undfl</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>-</operator> <name>Exp_msk1</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>L</name> <operator>|</operator> <name>Bndry_mask1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<goto>goto <name>cont</name>;</goto>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>LSB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>dsign</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aadj</name> <operator>=</operator> <call><name>ratio</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2.</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aadj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny1</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>aadj</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1.</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aadj</name> <operator>&lt;</operator> <literal type="number">2.</literal><operator>/</operator><name>FLT_RADIX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aadj</name> <operator>=</operator> <literal type="number">1.</literal><operator>/</operator><name>FLT_RADIX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>aadj</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><name>aadj</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>aadj</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>dsign</name></expr> ?</condition><then> <expr><name>aadj</name></expr> </then><else>: <expr><operator>-</operator><name>aadj</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>Rounding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>Flt_Rounds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&gt;=</operator>

<name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big0</name> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big1</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>

<goto>goto <name>cont</name>;</goto>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aadj</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>aadj</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aadj</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>dsign</name></expr> ?</condition><then> <expr><name>aadj</name></expr> </then><else>: <expr><operator>-</operator><name>aadj</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny0</name> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny1</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny1</name></expr>;</expr_stmt>

<goto>goto <name>cont</name>;</goto>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>&amp;&amp;</operator> <name>aadj</name> <operator>&gt;</operator> <literal type="number">1.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>aadj</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>adj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><name>aadj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aadj</name> <operator>-=</operator> <name>L</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>||</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aadj</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">.4999999</literal> <operator>||</operator> <name>aadj</name></expr></argument> &gt;</argument_list></name> <literal type="number">.5000001</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>aadj</name> <operator>&lt;</operator> <literal type="number">.4999999</literal><operator>/</operator><name>FLT_RADIX</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>cont</name>:</label>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inexact</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>+</operator> <operator>(</operator><literal type="number">70</literal> <operator>&lt;&lt;</operator> <name>Exp_shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inexact</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1e-300</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>retfree</name>:</label>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ret</name>:</label>

<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>se</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>dval</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>static int quorem(Bigint *b, Bigint *S)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>quorem</name><parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bxe</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sxe</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULLong</name></type> <name>borrow</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ys</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ULong</name></type> <name>borrow</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ys</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>si</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>zs</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"oversize b in quorem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sxe</name> <operator>=</operator> <name>sx</name> <operator>+</operator> <operator>--</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bxe</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>bxe</name> <operator>/</operator> <operator>(</operator><operator>*</operator><name>sxe</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"oversized quotient in quorem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zs</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <operator>(</operator><name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>zs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>zs</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block> while <condition>(<expr><name>sx</name> <operator>&lt;=</operator> <name>sxe</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>bxe</name> <operator>&gt;</operator> <name>bx</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name>FFFFFFFF</name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zs</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>zs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>zs</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block> while <condition>(<expr><name>sx</name> <operator>&lt;=</operator> <name>sxe</name></expr>)</condition>;</do>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bxe</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>--</operator><name>bxe</name> <operator>&gt;</operator> <name>bx</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dtoa_result</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>rv_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>dtoa_result</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rv_alloc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xmalloc(i)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>nrv_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>rv</name> <operator>=</operator> <call><name>rv_alloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>rve</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rve</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rv_strdup</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>rve</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nrv_alloc((s), (rve), strlen(s)+1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>freedtoa</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>INFSTR</name><index>[]</index></name> <init>= <expr><literal type="string">"Infinity"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>NANSTR</name><index>[]</index></name> <init>= <expr><literal type="string">"NaN"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ZEROSTR</name><index>[]</index></name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>dtoa</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndigits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decpt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bbits</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b5</name></decl>, <decl><type ref="prev"/><name>be</name></decl>, <decl><type ref="prev"/><name>dig</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ieps</name></decl>, <decl><type ref="prev"/><name>ilim</name></decl>, <decl><type ref="prev"/><name>ilim0</name></decl>, <decl><type ref="prev"/><name>ilim1</name></decl>,

<decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>j1</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>k0</name></decl>, <decl><type ref="prev"/><name>k_check</name></decl>, <decl><type ref="prev"/><name>leftright</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m5</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>,

<decl><type ref="prev"/><name>spec_case</name></decl>, <decl><type ref="prev"/><name>try_quick</name></decl>, <decl><type ref="prev"/><name>half</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Long</name></type> <name>L</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>denorm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULong</name></type> <name>x</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mlo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mhi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_u</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>eps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>inexact</name></decl>, <decl><type ref="prev"/><name>oldinexact</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dtoa_result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freedtoa</name><argument_list>(<argument><expr><name>dtoa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dtoa_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Sign_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Sign_bit</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>==</operator> <name>Exp_mask</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x8000</literal></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>INFSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>NANSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>ZEROSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <name>oldinexact</name> <operator>=</operator> <call><name>get_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rounding</name> <operator>=</operator> <name>Flt_Rounds</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rounding</name> <operator>=</operator> <ternary><condition><expr><name>rounding</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>rounding</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>be</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>Exp_shift1</name> <operator>&amp;</operator> <operator>(</operator><name>Exp_mask</name><operator>&gt;&gt;</operator><name>Exp_shift1</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>Exp_shift1</name> <operator>&amp;</operator> <operator>(</operator><name>Exp_mask</name><operator>&gt;&gt;</operator><name>Exp_shift1</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <name>Frac_mask1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Exp_11</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><call><name>word0</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>/=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>Bias</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bbits</name> <operator>+</operator> <name>be</name> <operator>+</operator> <operator>(</operator><name>Bias</name> <operator>+</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>|</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>

</then><else>: <expr><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>-=</operator> <literal type="number">31</literal><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>-=</operator> <operator>(</operator><name>Bias</name> <operator>+</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1.5</literal><operator>)</operator><operator>*</operator><literal type="number">0.289529654602168</literal> <operator>+</operator> <literal type="number">0.1760912590558</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">0.301029995663981</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>&lt;</operator> <literal type="number">0.</literal> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>k_check</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>Ten_pmax</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>tens</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbits</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>-</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s5</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b5</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <name>Rounding</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ndigits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>ndigits</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ndigits</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ilim1</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>=</operator> <call><name>rv_alloc</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&lt;=</operator> <name>Quick_max</name> <operator>&amp;&amp;</operator> <name>try_quick</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ilim0</name> <operator>=</operator> <name>ilim</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ieps</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <name>Bletch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>&amp;=</operator> <name>Bletch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name><name>bigtens</name><index>[<expr><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ds</name> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>ds</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>j1</name> <operator>=</operator> <operator>-</operator><name>k</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>j1</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>j1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k_check</name> <operator>&amp;&amp;</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ilim1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fast_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ieps</name><operator>*</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7.</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call> <operator>-=</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <literal type="number">5.</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>one_digit</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>no_digits</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>fast_failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_leftright</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.5</literal><operator>/</operator><name><name>tens</name><index>[<expr><name>ilim</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>ret1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1.</literal> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bump_up</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>ilim</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.5</literal> <operator>+</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bump_up</name>;</goto></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>ret1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>half</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>bump_up</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_leftright</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>fast_failed</name>:</label>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>be</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>Int_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">5</literal><operator>*</operator><name>ds</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>no_digits</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>one_digit</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>ds</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name><operator>*</operator><name>ds</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>ds</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name>rounding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <goto>goto <name>ret1</name>;</goto>

<case>case <expr><literal type="number">2</literal></expr>:</case> <goto>goto <name>bump_up</name>;</goto>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ds</name> <operator>||</operator> <operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>L</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<label><name>bump_up</name>:</label>

<while>while <condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<goto>goto <name>ret1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m5</name> <operator>=</operator> <name>b5</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>denorm</name></expr> ?</condition><then> <expr><name>be</name> <operator>+</operator> <operator>(</operator><name>Bias</name> <operator>+</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>P</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>bbits</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bbits</name> <operator>+</operator> <name>be</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><literal type="number">1</literal> <operator>+</operator> <name>P</name> <operator>-</operator> <name>bbits</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>m2</name> <operator>&lt;</operator> <name>s2</name></expr> ?</condition><then> <expr><name>m2</name></expr> </then><else>: <expr><name>s2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <name>b5</name> <operator>-</operator> <name>m5</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spec_case</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>leftright</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>rounding</name> <operator>==</operator> <literal type="number">1</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>Exp_mask</name> <operator>&amp;</operator> <operator>~</operator><name>Exp_msk1</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>Log2P</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>Log2P</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spec_case</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>s5</name></expr> ?</condition><then> <expr><literal type="number">32</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>S</name><operator>-&gt;</operator><name>wds</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>s2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>s5</name></expr> ?</condition><then> <expr><literal type="number">32</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>S</name><operator>-&gt;</operator><name>wds</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>s2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k_check</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>no_digits</name>:</label>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>ndigits</name></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>one_digit</name>:</label>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mlo</name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spec_case</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>mhi</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>Log2P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dig</name> <operator>=</operator> <call><name>quorem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>mhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j1</name> <operator>=</operator> <ternary><condition><expr><name><name>delta</name><operator>-&gt;</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>rounding</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>round_9_up</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dig</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>accept_dig</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name>rounding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <goto>goto <name>accept_dig</name>;</goto>

<case>case <expr><literal type="number">2</literal></expr>:</case> <goto>goto <name>keep_dig</name>;</goto>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j1</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dig</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>dig</name><operator>++</operator> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>round_9_up</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>accept_dig</name>:</label>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rounding</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>accept_dig</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content> 

<label><name>round_9_up</name>:</label>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt>

<goto>goto <name>roundoff</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>keep_dig</name>:</label>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mlo</name> <operator>==</operator> <name>mhi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mlo</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mlo</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mlo</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name> <operator>=</operator> <call><name>quorem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>rounding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <goto>goto <name>trimzeros</name>;</goto>

<case>case <expr><literal type="number">2</literal></expr>:</case> <goto>goto <name>roundoff</name>;</goto>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dig</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<label><name>roundoff</name>:</label>

<while>while <condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<goto>goto <name>ret</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>half</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<label><name>ret</name>:</label>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mhi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mlo</name> <operator>&amp;&amp;</operator> <name>mlo</name> <operator>!=</operator> <name>mhi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>ret1</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inexact</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>+</operator> <operator>(</operator><literal type="number">70</literal> <operator>&lt;&lt;</operator> <name>Exp_shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rve</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rve</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s0</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MANH_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MANL_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_ADJ</name></cpp:macro> <cpp:value>(DBL_MAX_EXP - 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGFIGS</name></cpp:macro> <cpp:value>((DBL_MANT_DIG + 3) / 4 + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dexp_get</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(word0(u) &gt;&gt; Exp_shift) &amp; ~Exp_msk1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dexp_set</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(word0(u) = (((int)(word0(u)) &amp; ~Exp_mask) | ((v) &lt;&lt; Exp_shift)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dmanh_get</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(word0(u) &amp; Frac_mask))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dmanl_get</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)word1(u))</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>hdtoa</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdigs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndigits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decpt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>U</name></type> <name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>manh</name></decl>, <decl><type ref="prev"/><name>manl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Sign_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Sign_bit</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>INFSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>NANSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>rv_strdup</name><argument_list>(<argument><expr><name>ZEROSTR</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>dexp_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <call><name>dexp_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>DBL_ADJ</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>*=</operator> <literal type="number">5.363123171977039e+154</literal></expr> ;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <call><name>dexp_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">514</literal> <operator>+</operator> <name>DBL_ADJ</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ndigits</name></expr> </then><else>: <expr><name>SIGFIGS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>rv_alloc</name><argument_list>(<argument><expr><name>bufsize</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SIGFIGS</name> <operator>&gt;</operator> <name>ndigits</name> <operator>&amp;&amp;</operator> <name>ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>redux</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>ndigits</name> <operator>+</operator> <name>DBL_MAX_EXP</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>DBL_MANT_DIG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dexp_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name>redux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>-=</operator> <name>redux</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>+=</operator> <call><name>dexp_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>manh</name> <operator>=</operator> <call><name>dmanh_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>manl</name> <operator>=</operator> <call><name>dmanl_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s0</name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>s0</name> <operator>+</operator> <name>bufsize</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>xdigs</name><index>[<expr><operator>(</operator><name>manh</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>DBL_MANH_SIZE</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>manh</name> <operator>=</operator> <operator>(</operator><name>manh</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>manl</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>DBL_MANL_SIZE</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>manl</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ndigits</name> <operator>=</operator> <name>SIGFIGS</name></expr>;</init> <condition><expr><name><name>s0</name><index>[<expr><name>ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>ndigits</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>ndigits</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rve</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rve</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s0</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
