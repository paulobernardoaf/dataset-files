<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\mt19937.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>397</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_A</name></cpp:macro> <cpp:value>0x9908b0dfU</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMASK</name></cpp:macro> <cpp:value>0x80000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LMASK</name></cpp:macro> <cpp:value>0x7fffffffU</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXBITS</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((u) &amp; UMASK) | ((v) &amp; LMASK) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWIST</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MIXBITS((u),(v)) &gt;&gt; 1) ^ ((v)&amp;1U ? MATRIX_A : 0U))</cpp:value></cpp:define>

<enum>enum <block>{<decl><name>MT_MAX_STATE</name> <init>= <expr><name>N</name></expr></init></decl>}</block>;</enum>

<struct>struct <name>MT</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>genrand_initialized</name><parameter_list>(<parameter><type><name>mt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((mt)-&gt;next != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uninit_genrand</name><parameter_list>(<parameter><type><name>mt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((mt)-&gt;next = 0)</cpp:value></cpp:define>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>static void init_genrand(struct MT *mt, unsigned int s)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>static void init_by_array(struct MT *mt, const uint32_t init_key[], int key_length)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_genrand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0xffffffffU</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1812433253U</literal> <operator>*</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <name>N</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_by_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>init_key</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_genrand</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><literal type="number">19650218U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>N</name><operator>&gt;</operator><name>key_length</name></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><name>key_length</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1664525U</literal><operator>)</operator><operator>)</operator>

<operator>+</operator> <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffU</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>N</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name><operator>&gt;=</operator><name>key_length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>N</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1566083941U</literal><operator>)</operator><operator>)</operator>

<operator>-</operator> <name>i</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffU</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>N</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80000000U</literal></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>next_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>N</name><operator>-</operator><name>M</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>--</operator><name>j</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>M</name></expr>]</index></name> <operator>^</operator> <call><name>TWIST</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>M</name></expr>;</init> <condition><expr><operator>--</operator><name>j</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>M</name><operator>-</operator><name>N</name></expr>]</index></name> <operator>^</operator> <call><name>TWIST</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>M</name><operator>-</operator><name>N</name></expr>]</index></name> <operator>^</operator> <call><name>TWIST</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>

<name>genrand_int32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>mt</name><operator>-&gt;</operator><name>left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>next_state</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name><name>mt</name><operator>-&gt;</operator><name>next</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x9d2c5680</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xefc60000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

</unit>
