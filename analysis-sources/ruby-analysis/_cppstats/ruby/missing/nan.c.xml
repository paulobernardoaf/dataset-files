<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\nan.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/missing.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>double</name></type>

<name>nan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (spec &amp;&amp; spec[0]) {

double generated_nan;

int len = snprintf(NULL, 0, "NAN(%s)", spec);

char *buf = malloc(len + 1); 

sprintf(buf, "NAN(%s)", spec);

generated_nan = strtod(buf, NULL);

free(buf);

return generated_nan;

}

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>spec</name> <operator>||</operator> <operator>!</operator><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name>NAN</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

</unit>
