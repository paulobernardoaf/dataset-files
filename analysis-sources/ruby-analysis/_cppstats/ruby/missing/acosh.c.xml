<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\missing\acosh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DBL_MANT_DIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MANT_DIG</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_CRITERIA_BIT</name></cpp:macro> <cpp:value>(1&lt;&lt;DBL_MANT_DIG/2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIG_CRITERIA_BIT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_CRITERIA</name></cpp:macro> <cpp:value>(1.0*BIG_CRITERIA_BIT)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_CRITERIA</name></cpp:macro> <cpp:value>(1.0*(1&lt;&lt;DBL_MANT_DIG/4)*(1&lt;&lt;(DBL_MANT_DIG/2+1-DBL_MANT_DIG/4)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_CRITERIA_BIT</name></cpp:macro> <cpp:value>(1&lt;&lt;(DBL_MANT_DIG/3))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SMALL_CRITERIA_BIT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_CRITERIA</name></cpp:macro> <cpp:value>(1.0/SMALL_CRITERIA_BIT)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_CRITERIA</name></cpp:macro> <cpp:value>(1.0*(1&lt;&lt;DBL_MANT_DIG/4)*(1&lt;&lt;(DBL_MANT_DIG/3+1-DBL_MANT_DIG/4)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACOSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>

<name>acosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>BIG_CRITERIA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ASINH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>

<name>asinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <name>SMALL_CRITERIA</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>DBL_MANT_DIG</name><operator>/</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name>z</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <name>x2</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal> <operator>+</operator> <name>x2</name> <operator>*</operator> <literal type="number">3.0</literal><operator>/</operator><literal type="number">40.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>BIG_CRITERIA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>z</name> <operator>+</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>z</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>z</name> <operator>*</operator> <name>z</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>z</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATANH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>

<name>atanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <name>SMALL_CRITERIA</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><ternary><condition><expr><name>z</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>z</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDOM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>z</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
