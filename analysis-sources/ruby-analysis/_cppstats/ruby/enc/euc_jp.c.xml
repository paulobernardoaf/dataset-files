<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\enc\euc_jp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eucjp_islead</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UChar )((c) - 0xa1) &gt; 0xfe - 0xa1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>EncLen_EUCJP</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{ <decl><name>FAILURE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, <decl><name>ACCEPT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>S0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>S1</name></decl>, <decl><name>S2</name></decl> }</block></enum></type> <name>state_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>ACCEPT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>FAILURE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>trans</name><index>[]</index><index>[<expr><literal type="number">0x100</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ 

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>F</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>CaseFoldMap</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xa3c1</literal></expr>, <expr><literal type="number">0xa3e1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c2</literal></expr>, <expr><literal type="number">0xa3e2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c3</literal></expr>, <expr><literal type="number">0xa3e3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c4</literal></expr>, <expr><literal type="number">0xa3e4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c5</literal></expr>, <expr><literal type="number">0xa3e5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c6</literal></expr>, <expr><literal type="number">0xa3e6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c7</literal></expr>, <expr><literal type="number">0xa3e7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c8</literal></expr>, <expr><literal type="number">0xa3e8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3c9</literal></expr>, <expr><literal type="number">0xa3e9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3ca</literal></expr>, <expr><literal type="number">0xa3ea</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3cb</literal></expr>, <expr><literal type="number">0xa3eb</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3cc</literal></expr>, <expr><literal type="number">0xa3ec</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3cd</literal></expr>, <expr><literal type="number">0xa3ed</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3ce</literal></expr>, <expr><literal type="number">0xa3ee</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3cf</literal></expr>, <expr><literal type="number">0xa3ef</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d0</literal></expr>, <expr><literal type="number">0xa3f0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d1</literal></expr>, <expr><literal type="number">0xa3f1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d2</literal></expr>, <expr><literal type="number">0xa3f2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d3</literal></expr>, <expr><literal type="number">0xa3f3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d4</literal></expr>, <expr><literal type="number">0xa3f4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d5</literal></expr>, <expr><literal type="number">0xa3f5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d6</literal></expr>, <expr><literal type="number">0xa3f6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d7</literal></expr>, <expr><literal type="number">0xa3f7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d8</literal></expr>, <expr><literal type="number">0xa3f8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3d9</literal></expr>, <expr><literal type="number">0xa3f9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa3da</literal></expr>, <expr><literal type="number">0xa3fa</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a1</literal></expr>, <expr><literal type="number">0xa6c1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a2</literal></expr>, <expr><literal type="number">0xa6c2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a3</literal></expr>, <expr><literal type="number">0xa6c3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a4</literal></expr>, <expr><literal type="number">0xa6c4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a5</literal></expr>, <expr><literal type="number">0xa6c5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a6</literal></expr>, <expr><literal type="number">0xa6c6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a7</literal></expr>, <expr><literal type="number">0xa6c7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a8</literal></expr>, <expr><literal type="number">0xa6c8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6a9</literal></expr>, <expr><literal type="number">0xa6c9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6aa</literal></expr>, <expr><literal type="number">0xa6ca</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6ab</literal></expr>, <expr><literal type="number">0xa6cb</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6ac</literal></expr>, <expr><literal type="number">0xa6cc</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6ad</literal></expr>, <expr><literal type="number">0xa6cd</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6ae</literal></expr>, <expr><literal type="number">0xa6ce</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6af</literal></expr>, <expr><literal type="number">0xa6cf</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b0</literal></expr>, <expr><literal type="number">0xa6d0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b1</literal></expr>, <expr><literal type="number">0xa6d1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b2</literal></expr>, <expr><literal type="number">0xa6d2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b3</literal></expr>, <expr><literal type="number">0xa6d3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b4</literal></expr>, <expr><literal type="number">0xa6d4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b5</literal></expr>, <expr><literal type="number">0xa6d5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b6</literal></expr>, <expr><literal type="number">0xa6d6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b7</literal></expr>, <expr><literal type="number">0xa6d7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa6b8</literal></expr>, <expr><literal type="number">0xa6d8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a1</literal></expr>, <expr><literal type="number">0xa7d1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a2</literal></expr>, <expr><literal type="number">0xa7d2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a3</literal></expr>, <expr><literal type="number">0xa7d3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a4</literal></expr>, <expr><literal type="number">0xa7d4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a5</literal></expr>, <expr><literal type="number">0xa7d5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a6</literal></expr>, <expr><literal type="number">0xa7d6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a7</literal></expr>, <expr><literal type="number">0xa7d7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a8</literal></expr>, <expr><literal type="number">0xa7d8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7a9</literal></expr>, <expr><literal type="number">0xa7d9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7aa</literal></expr>, <expr><literal type="number">0xa7da</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7ab</literal></expr>, <expr><literal type="number">0xa7db</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7ac</literal></expr>, <expr><literal type="number">0xa7dc</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7ad</literal></expr>, <expr><literal type="number">0xa7dd</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7ae</literal></expr>, <expr><literal type="number">0xa7de</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7af</literal></expr>, <expr><literal type="number">0xa7df</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b0</literal></expr>, <expr><literal type="number">0xa7e0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b1</literal></expr>, <expr><literal type="number">0xa7e1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b2</literal></expr>, <expr><literal type="number">0xa7e2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b3</literal></expr>, <expr><literal type="number">0xa7e3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b4</literal></expr>, <expr><literal type="number">0xa7e4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b5</literal></expr>, <expr><literal type="number">0xa7e5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b6</literal></expr>, <expr><literal type="number">0xa7e6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b7</literal></expr>, <expr><literal type="number">0xa7e7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b8</literal></expr>, <expr><literal type="number">0xa7e8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7b9</literal></expr>, <expr><literal type="number">0xa7e9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7ba</literal></expr>, <expr><literal type="number">0xa7ea</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7bb</literal></expr>, <expr><literal type="number">0xa7eb</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7bc</literal></expr>, <expr><literal type="number">0xa7ec</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7bd</literal></expr>, <expr><literal type="number">0xa7ed</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7be</literal></expr>, <expr><literal type="number">0xa7ee</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7bf</literal></expr>, <expr><literal type="number">0xa7ef</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7c0</literal></expr>, <expr><literal type="number">0xa7f0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa7c1</literal></expr>, <expr><literal type="number">0xa7f1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>firstbyte</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>state_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>firstbyte</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_EUCJP</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_EUCJP</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>

<name>mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_CODE_ASCII</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0x00ffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff808080</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00808080</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffff8080</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00008080</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int

code_to_mbc_first(OnigCodePoint code)

{

int first;

if ((code &amp; 0xff0000) != 0) {

first = (code &gt;&gt; 16) &amp; 0xff;

}

else if ((code &amp; 0xff00) != 0) {

first = (code &gt;&gt; 8) &amp; 0xff;

}

else {

return (int )code;

}

return first;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,

<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>onigenc_apply_all_case_fold_with_map</name><argument_list>(

<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>CaseFoldMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CaseFoldMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>

<name>get_lower_case</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa3c1</literal></expr></argument>, <argument><expr><literal type="number">0xa3da</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa6a1</literal></expr></argument>, <argument><expr><literal type="number">0xa6b8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa7a1</literal></expr></argument>, <argument><expr><literal type="number">0xa7c1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <literal type="number">0x0030</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>

<name>get_upper_case</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa3e1</literal></expr></argument>, <argument><expr><literal type="number">0xa3fa</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa6c1</literal></expr></argument>, <argument><expr><literal type="number">0xa6d8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0xa7d1</literal></expr></argument>, <argument><expr><literal type="number">0xa7f1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x0030</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>code_lo</name></decl>, <decl><type ref="prev"/><name>code_up</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mbc_to_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_ASCII_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>onigenc_ascii_get_case_fold_codes_by_str</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code_lo</name> <operator>=</operator> <call><name>get_lower_case</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code_up</name> <operator>=</operator> <call><name>get_upper_case</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>code_lo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code_lo</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>code_up</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code_up</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_lower_case</name><argument_list>(<argument><expr><call><name>mbc_to_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>code_to_mbc</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>eucjp_islead</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Hiragana</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENC_EUC_JIS_2004</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0xa4a1</literal></expr>, <expr><literal type="number">0xa4fb</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0xa4a1</literal></expr>, <expr><literal type="number">0xa4f3</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENC_EUC_JIS_2004</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Katakana</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">5</literal></expr>,

<expr><literal type="number">0x8ea6</literal></expr>, <expr><literal type="number">0x8eaf</literal></expr>, 

<expr><literal type="number">0x8eb1</literal></expr>, <expr><literal type="number">0x8edd</literal></expr>, 

<expr><literal type="number">0xa5a1</literal></expr>, <expr><literal type="number">0xa5fe</literal></expr>,

<expr><literal type="number">0xa6ee</literal></expr>, <expr><literal type="number">0xa6fe</literal></expr>,

<expr><literal type="number">0xa7f2</literal></expr>, <expr><literal type="number">0xa7f5</literal></expr>,

}</block></expr></init></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Katakana</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>,

<expr><literal type="number">0x8ea6</literal></expr>, <expr><literal type="number">0x8eaf</literal></expr>, 

<expr><literal type="number">0x8eb1</literal></expr>, <expr><literal type="number">0x8edd</literal></expr>, 

<expr><literal type="number">0xa5a1</literal></expr>, <expr><literal type="number">0xa5f6</literal></expr>,

}</block></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENC_EUC_JIS_2004</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Han</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">7</literal></expr>,

<expr><literal type="number">0xa1b8</literal></expr>, <expr><literal type="number">0xa1b8</literal></expr>,

<expr><literal type="number">0xaea1</literal></expr>, <expr><literal type="number">0xfefe</literal></expr>, 

<expr><literal type="number">0x8fa1a1</literal></expr>, <expr><literal type="number">0x8fa1fe</literal></expr>, 

<expr><literal type="number">0x8fa3a1</literal></expr>, <expr><literal type="number">0x8fa5fe</literal></expr>, 

<expr><literal type="number">0x8fa8a1</literal></expr>, <expr><literal type="number">0x8fa8fe</literal></expr>, 

<expr><literal type="number">0x8faca1</literal></expr>, <expr><literal type="number">0x8faffe</literal></expr>, 

<expr><literal type="number">0x8feea1</literal></expr>, <expr><literal type="number">0x8ffef6</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Han</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">0xa1b8</literal></expr>, <expr><literal type="number">0xa1b8</literal></expr>,

<expr><literal type="number">0xb0a1</literal></expr>, <expr><literal type="number">0xcfd3</literal></expr>, 

<expr><literal type="number">0xd0a1</literal></expr>, <expr><literal type="number">0xf4a6</literal></expr>, 

<expr><literal type="number">0x8fb0a1</literal></expr>, <expr><literal type="number">0x8fedf3</literal></expr> 

}</block></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Latin</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">0x0041</literal></expr>, <expr><literal type="number">0x005a</literal></expr>,

<expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">0x007a</literal></expr>,

<expr><literal type="number">0xa3c1</literal></expr>, <expr><literal type="number">0xa3da</literal></expr>,

<expr><literal type="number">0xa3e1</literal></expr>, <expr><literal type="number">0xa3fa</literal></expr>,

}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Greek</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal></expr>,

<expr><literal type="number">0xa6a1</literal></expr>, <expr><literal type="number">0xa6b8</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENC_EUC_JIS_2004</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0xa6c1</literal></expr>, <expr><literal type="number">0xa6d9</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="number">0xa6c1</literal></expr>, <expr><literal type="number">0xa6d8</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Cyrillic</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal></expr>,

<expr><literal type="number">0xa7a1</literal></expr>, <expr><literal type="number">0xa7c1</literal></expr>,

<expr><literal type="number">0xa7d1</literal></expr>, <expr><literal type="number">0xa7f1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"enc/jis/props.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>enc_property</name></name> <modifier>*</modifier></type><name>prop</name> <init>=

<expr><call><name>onig_jis_property</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>onigenc_minimum_property_name_to_ctype</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><name><name>prop</name><operator>-&gt;</operator><name>ctype</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&lt;=</operator> <name>ONIGENC_MAX_STD_CTYPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTYPE_IS_WORD_GRAPH_PRINT</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>code_to_mbclen</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ctype</name> <operator>-=</operator> <operator>(</operator><name>ONIGENC_MAX_STD_CTYPE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><name>PropertyListNum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name><name>PropertyList</name><index>[<expr><name>ctype</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name><modifier>*</modifier></type> <name>sb_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&lt;=</operator> <name>ONIGENC_MAX_STD_CTYPE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ONIG_NO_SUPPORT_CONFIG</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sb_out</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ctype</name> <operator>-=</operator> <operator>(</operator><name>ONIGENC_MAX_STD_CTYPE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <operator>(</operator><name>OnigCtype</name> <operator>)</operator><name>PropertyListNum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges</name> <operator>=</operator> <name><name>PropertyList</name><index>[<expr><name>ctype</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<expr_stmt><expr><call><name>OnigEncodingDefine</name><argument_list>(<argument><expr><name>euc_jp</name></expr></argument>, <argument><expr><name>EUC_JP</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><name>mbc_enc_len</name></expr>,

<expr><literal type="string">"EUC-JP"</literal></expr>, 

<expr><literal type="number">3</literal></expr>, 

<expr><literal type="number">1</literal></expr>, 

<expr><name>onigenc_is_mbc_newline_0x0a</name></expr>,

<expr><name>mbc_to_code</name></expr>,

<expr><name>code_to_mbclen</name></expr>,

<expr><name>code_to_mbc</name></expr>,

<expr><name>mbc_case_fold</name></expr>,

<expr><name>apply_all_case_fold</name></expr>,

<expr><name>get_case_fold_codes_by_str</name></expr>,

<expr><name>property_name_to_ctype</name></expr>,

<expr><name>is_code_ctype</name></expr>,

<expr><name>get_ctype_code_range</name></expr>,

<expr><name>left_adjust_char_head</name></expr>,

<expr><name>is_allowed_reverse_match</name></expr>,

<expr><name>onigenc_ascii_only_case_map</name></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><name>ONIGENC_FLAG_NONE</name></expr>,

}</block></expr>;</expr_stmt>

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"eucJP"</literal></argument>, <argument><literal type="string">"EUC-JP"</literal></argument>)</argument_list></macro> 

<macro><name>ENC_REPLICATE</name><argument_list>(<argument><literal type="string">"eucJP-ms"</literal></argument>, <argument><literal type="string">"EUC-JP"</literal></argument>)</argument_list></macro> 

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"euc-jp-ms"</literal></argument>, <argument><literal type="string">"eucJP-ms"</literal></argument>)</argument_list></macro>

<macro><name>ENC_REPLICATE</name><argument_list>(<argument><literal type="string">"CP51932"</literal></argument>, <argument><literal type="string">"EUC-JP"</literal></argument>)</argument_list></macro>

<macro><name>ENC_REPLICATE</name><argument_list>(<argument><literal type="string">"EUC-JIS-2004"</literal></argument>, <argument><literal type="string">"EUC-JP"</literal></argument>)</argument_list></macro> 

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"EUC-JISX0213"</literal></argument>, <argument><literal type="string">"EUC-JIS-2004"</literal></argument>)</argument_list></macro> 

</unit>
