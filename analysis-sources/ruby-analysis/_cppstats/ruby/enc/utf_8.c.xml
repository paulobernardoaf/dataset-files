<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\enc\utf_8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encindex.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCINDEX_UTF_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCINDEX_UTF_8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INVALID_CODE_SCHEME</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INVALID_CODE_SCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_CODE_FE</name></cpp:macro> <cpp:value>0xfffffffe</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_CODE_FF</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_CODE_LIMIT</name></cpp:macro> <cpp:value>0x0010ffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utf8_islead</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UChar )((c) &amp; 0xc0) != 0x80)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>EncLen_UTF8</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FAILURE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>ACCEPT</name></decl>,

<decl><name>S0</name></decl>, <decl><name>S1</name></decl>, <decl><name>S2</name></decl>, <decl><name>S3</name></decl>,

<decl><name>S4</name></decl>, <decl><name>S5</name></decl>, <decl><name>S6</name></decl>, <decl><name>S7</name></decl>

}</block></enum></type> <name>state_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>ACCEPT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>FAILURE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>trans</name><index>[]</index><index>[<expr><literal type="number">0x100</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ 

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>firstbyte</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>state_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>firstbyte</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_UTF8</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_UTF8</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_UTF8</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_mbc_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_ALL_LINE_TERMINATORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0b</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0c</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0d</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x85</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xc2</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xa8</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xa9</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xe2</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>

<name>mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>len</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INVALID_CODE_SCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0xfd</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xfe</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INVALID_CODE_FE</name></expr> </then><else>: <expr><name>INVALID_CODE_FF</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffffff80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xfffff800</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <name>VALID_CODE_LIMIT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INVALID_CODE_SCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>INVALID_CODE_FE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>INVALID_CODE_FF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_TRAILS</name><parameter_list>(<parameter><type><name>code</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(UChar )((((code) &gt;&gt; (shift)) &amp; 0x3f) | 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_TRAIL0</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(UChar )(((code) &amp; 0x3f) | 0x80)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffffff80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><name>code</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xfffff800</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator><operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xc0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xe0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>UTF8_TRAILS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <name>VALID_CODE_LIMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name><operator>&gt;&gt;</operator><literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>UTF8_TRAILS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>UTF8_TRAILS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INVALID_CODE_SCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>INVALID_CODE_FE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>INVALID_CODE_FF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else <block>{<block_content>

<return>return <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>UTF8_TRAIL0</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>fold</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x49</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <literal type="number">0xc4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fold</name> <operator>=</operator> <literal type="number">0xb1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>fold</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>onigenc_unicode_mbc_case_fold</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name> <modifier>*</modifier></type><name>sb_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sb_out</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<return>return <expr><call><name>onigenc_unicode_ctype_code_range</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>utf8_islead</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>onigenc_unicode_get_case_fold_codes_by_str</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>OnigEncodingDefine</name><argument_list>(<argument><expr><name>utf_8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><name>mbc_enc_len</name></expr>,

<expr><literal type="string">"UTF-8"</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">1</literal></expr>, 

<expr><name>is_mbc_newline</name></expr>,

<expr><name>mbc_to_code</name></expr>,

<expr><name>code_to_mbclen</name></expr>,

<expr><name>code_to_mbc</name></expr>,

<expr><name>mbc_case_fold</name></expr>,

<expr><name>onigenc_unicode_apply_all_case_fold</name></expr>,

<expr><name>get_case_fold_codes_by_str</name></expr>,

<expr><name>onigenc_unicode_property_name_to_ctype</name></expr>,

<expr><name>onigenc_unicode_is_code_ctype</name></expr>,

<expr><name>get_ctype_code_range</name></expr>,

<expr><name>left_adjust_char_head</name></expr>,

<expr><name>onigenc_always_true_is_allowed_reverse_match</name></expr>,

<expr><name>onigenc_unicode_case_map</name></expr>,

<expr><name>ENCINDEX_UTF_8</name></expr>,

<expr><name>ONIGENC_FLAG_UNICODE</name></expr>,

}</block></expr>;</expr_stmt>

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"CP65001"</literal></argument>, <argument><literal type="string">"UTF-8"</literal></argument>)</argument_list></macro>

<macro><name>ENC_REPLICATE</name><argument_list>(<argument><literal type="string">"UTF8-MAC"</literal></argument>, <argument><literal type="string">"UTF-8"</literal></argument>)</argument_list></macro>

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"UTF-8-MAC"</literal></argument>, <argument><literal type="string">"UTF8-MAC"</literal></argument>)</argument_list></macro>

<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"UTF-8-HFS"</literal></argument>, <argument><literal type="string">"UTF8-MAC"</literal></argument>)</argument_list></macro> 

</unit>
