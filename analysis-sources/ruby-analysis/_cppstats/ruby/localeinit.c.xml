<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\localeinit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encindex.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_CP_NAME</name></cpp:macro> <cpp:value>((sizeof(UINT) * 8 / 3) + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_FORMAT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>codepage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>snprintf(buf, sizeof(buf), "CP%u", (codepage))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>UINT</name></type> <name><name>ruby_w32_codepage</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_LOCALE_CHARMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name> <operator>||</operator> <name>defined</name> <name>HAVE_LANGINFO_H</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_LOCALE_CHARMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_LOCALE_CHARMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_LOCALE_CHARMAP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>locale_charmap</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>conv</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codeset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>cp</name><index>[<expr><name>SIZEOF_CP_NAME</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl_langinfo_codeset</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>codeset</name> <operator>=</operator> <call><name>nl_langinfo_codeset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codeset</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>codepage</name> <init>= <expr><name><name>ruby_w32_codepage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codepage</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codepage</name> <operator>=</operator> <call><name>GetConsoleCP</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codepage</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codepage</name> <operator>=</operator> <call><name>GetACP</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CP_FORMAT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>codeset</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_LANGINFO_H</name></expr></cpp:elif>

<expr_stmt><expr><name>codeset</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSUME</name><argument_list>(<argument><expr><name>codeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> locale_charmap() is not implemented</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call>(<modifier>*</modifier><name>conv</name>)<argument_list>(<argument><expr><name>codeset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type>

<name>rb_locale_charmap</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_LOCALE_CHARMAP</name></expr></cpp:if>

<return>return <expr><call><name>rb_usascii_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"US-ASCII"</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>locale_charmap</name><argument_list>(<argument><expr><name>rb_usascii_str_new_cstr</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_LOCALE_CHARMAP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>enc_find_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_enc_find_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>rb_locale_charmap_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_LOCALE_CHARMAP</name></expr></cpp:if>

<return>return <expr><name>ENCINDEX_US_ASCII</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>locale_charmap</name><argument_list>(<argument><expr><name>enc_find_index</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Init_enc_set_filesystem_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_LOCALE_CHARMAP</name></expr></cpp:if>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>ENCINDEX_US_ASCII</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:elif>

<decl_stmt><decl><type><name>char</name></type> <name><name>cp</name><index>[<expr><name>SIZEOF_CP_NAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name>codepage</name> <init>= <expr><ternary><condition><expr><name><name>ruby_w32_codepage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>ruby_w32_codepage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><call><name>AreFileApisANSI</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>GetOEMCP</name><argument_list>()</argument_list></call></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CP_FORMAT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_enc_find_index</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>ENCINDEX_ASCII</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__CYGWIN__</name></expr></cpp:elif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>ENCINDEX_UTF_8</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_enc_to_index</name><argument_list>(<argument><expr><call><name>rb_default_external_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

</unit>
