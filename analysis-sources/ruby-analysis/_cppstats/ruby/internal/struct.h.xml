<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\struct.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include> 

<enum>enum <block>{

<decl><name>RSTRUCT_EMBED_LEN_MAX</name> <init>= <expr><name>RVALUE_EMBED_LEN_MAX</name></expr></init></decl>,

<decl><name>RSTRUCT_EMBED_LEN_MASK</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USER2</name><operator>|</operator><name>RUBY_FL_USER1</name><operator>)</operator></expr></init></decl>,

<decl><name>RSTRUCT_EMBED_LEN_SHIFT</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USHIFT</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,

<decl><name>RSTRUCT_TRANSIENT_FLAG</name> <init>= <expr><name>FL_USER3</name></expr></init></decl>,

}</block>;</enum>

<struct>struct <name>RStruct</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block> <decl><name>heap</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name><name>ary</name><index>[<expr><name>RSTRUCT_EMBED_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>as</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRUCT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RStruct)(obj))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSTRUCT_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_LEN</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSTRUCT_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_PTR</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSTRUCT_SET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_SET</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSTRUCT_GET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_GET</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VALUE</name></type> <name>rb_struct_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_struct_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_struct_s_keyword_init</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>rb_struct_const_heap_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>RSTRUCT_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RSTRUCT_TRANSIENT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RSTRUCT_TRANSIENT_UNSET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>RSTRUCT_EMBED_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>RSTRUCT_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>RSTRUCT_LENINT</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>RSTRUCT_CONST_PTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RSTRUCT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RSTRUCT_GET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>RSTRUCT_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<return>return <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>RSTRUCT_TRANSIENT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<expr_stmt><expr><call><name>FL_SET_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>RSTRUCT_TRANSIENT_UNSET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>

<name>RSTRUCT_EMBED_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_EMBED_LEN_MASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>&gt;&gt;=</operator> <name>RSTRUCT_EMBED_LEN_SHIFT</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>

<name>RSTRUCT_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_EMBED_LEN_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RSTRUCT_EMBED_LEN</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>len</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>RSTRUCT_LENINT</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>RSTRUCT_CONST_PTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>RStruct</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>RSTRUCT_EMBED_LEN_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>ary</name></name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>RSTRUCT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><index>[<expr><name>k</name></expr>]</index></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>RSTRUCT_GET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><index>[<expr><name>k</name></expr>]</index></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>rb_struct_const_heap_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
