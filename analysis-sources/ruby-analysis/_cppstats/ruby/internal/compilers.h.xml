<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\compilers.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/defines.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSC_VERSION_SINCE</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_MSC_VER &gt;= _)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSC_VERSION_BEFORE</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_MSC_VER &lt; _)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSC_VERSION_SINCE</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSC_VERSION_BEFORE</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_attribute_##__VA_ARGS__</cpp:value></cpp:define>

<cpp:empty>#</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_aligned</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_alloc_size</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_artificial</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_always_inline</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_cdecl</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_cold</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_const</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(2, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_deprecated</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_dllexport</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_dllimport</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_error</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_format</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_hot</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_leaf</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_malloc</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_no_address_safety_analysis</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 8, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_no_sanitize_address</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 8, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_no_sanitize_undefined</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 9, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_noinline</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_nonnull</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_noreturn</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(2, 5, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_nothrow</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_pure</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(2, 96, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_returns_nonnull</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 9, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_returns_twice</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_stdcall</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_unused</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_visibility</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_visibility</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_warn_unused_result</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 4, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_warning</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 3, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute_weak</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(0, 0, 0)</cpp:value></cpp:define>

<cpp:empty>#</cpp:empty>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_c_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_c_attribute</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_declspec_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_declspec_attribute_##__VA_ARGS__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_align</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_deprecated</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE(1300)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_dllexport</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_dllimport</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_noalias</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_noinline</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE(1300)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_noreturn</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE(1100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_nothrow</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_declspec_attribute_restrict</name></cpp:macro> <cpp:value>MSC_VERSION_SINCE( 800)</cpp:value></cpp:define>

<cpp:empty>#</cpp:empty>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#</cpp:empty>

<cpp:empty>#</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_builtin_##__VA_ARGS__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_add_overflow</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(5, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap16</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(4, 8, 0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap32</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap64</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clz</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clzl</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clzll</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_constant_p</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(2,95, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctz</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctzl</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctzll</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_mul_overflow</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(5, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_mul_overflow_p</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(7, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcount</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcountl</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcountll</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(3, 6, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_sub_overflow</name></cpp:macro> <cpp:value>GCC_VERSION_SINCE(5, 1, 0)</cpp:value></cpp:define>

<cpp:empty>#</cpp:empty>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_ADD_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_add_overflow</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_add_overflow</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_ADD_OVERFLOW</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_BSWAP16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_bswap16</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap16</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_BSWAP16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_BSWAP32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_bswap32</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap16</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_BSWAP32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_BSWAP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_bswap64</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_bswap64</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_BSWAP64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CLZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_clz</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clz</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CLZ</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CLZL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_clzl</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clzl</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CLZL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CLZLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_clzll</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_clzll</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CLZLL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_constant_p</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_constant_p</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CONSTANT_P</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CTZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_ctz</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctz</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CTZ</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CTZL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_ctzl</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctzl</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CTZL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_CTZLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_ctzll</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_ctzll</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_CTZLL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_MUL_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_mul_overflow</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_mul_overflow</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_MUL_OVERFLOW</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_MUL_OVERFLOW_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_mul_overflow_p</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_mul_overflow_p</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_MUL_OVERFLOW_P</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_POPCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_popcount</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcount</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_POPCOUNT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_POPCOUNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_popcountl</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcountl</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_POPCOUNTL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_POPCOUNTLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_popcountll</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_popcountll</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_POPCOUNTLL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN____BUILTIN_SUB_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__has_builtin____builtin_SUB_overflow</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin____builtin_sub_overflow</name></cpp:macro> <cpp:value>HAVE_BUILTIN____BUILTIN_SUB_OVERFLOW</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_feature</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_extension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_extension</name></cpp:macro> <cpp:value>__has_feature</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_warning</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_warning</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__extension__</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAYBE_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAYBE_UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WARN_UNUSED_RESULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_UNUSED_RESULT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_BUILTIN_TYPE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_builtin_type(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_BUILTIN_TYPE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_BUILTIN_TYPE(obj)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_obj_builtin_type</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ VALUE arg_obj = (obj); RB_SPECIAL_CONST_P(arg_obj) ? -1 : RB_BUILTIN_TYPE(arg_obj); })</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_obj_builtin_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>RB_SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:

<expr><call><name>RB_BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEX_ARY_LEN</name></cpp:macro></cpp:define> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEX_ARY_LEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEX_ARY_LEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITFIELD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name : size</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITFIELD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned int name : size</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
