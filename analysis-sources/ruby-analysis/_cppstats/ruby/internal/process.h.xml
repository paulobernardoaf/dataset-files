<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\process.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/win32.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/imemo.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_MAX_GROUPS</name></cpp:macro> <cpp:value>(65536)</cpp:value></cpp:define>

<struct_decl>struct <name>waitpid_state</name>;</struct_decl>

<struct>struct <name>rb_execarg</name> <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>shell_script</name></decl>;</decl_stmt>

}</block> <decl><name>sh</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>command_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>command_abspath</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>argv_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>argv_buf</name></decl>;</decl_stmt>

}</block> <decl><name>cmd</name></decl>;</struct>

}</block> <decl><name>invoke</name></decl>;</union>

<decl_stmt><decl><type><name>VALUE</name></type> <name>redirect_fds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>envp_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>envp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>dup2_tmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>use_shell</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pgroup_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>umask_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>unsetenv_others_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>unsetenv_others_do</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>close_others_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>close_others_do</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>chdir_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_pgroup_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_pgroup_flag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>uid_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>gid_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>exception</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>exception_given</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>waitpid_state</name></name> <modifier>*</modifier></type><name>waitpid_state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>pgroup_pgid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>rlimit_limits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mode_t</name></type> <name>umask_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_uid_t</name></type> <name>uid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gid_t</name></type> <name>gid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>close_others_maxhint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>fd_dup2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>fd_close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>fd_open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>fd_dup2_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>env_modification</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>path_env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>chdir_dir</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>rb_pid_t</name></type> <name>rb_fork_ruby</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_last_status_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ARGVSTR2ARGV</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>argv_str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>ARGVSTR2ARGC</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>argv_str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>int</name></type> <name>rb_exec_async_signal_safe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_execarg</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errmsg_buflen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_pid_t</name></type> <name>rb_fork_async_signal_safe</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>chfunc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>charg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errmsg_buflen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_execarg_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>accept_shell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_exc_opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>rb_execarg</name></name> <modifier>*</modifier></type><name>rb_execarg_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>rb_execarg_addopt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_execarg_parent_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_execarg_parent_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_execarg_run_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_execarg</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_execarg</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>errmsg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errmsg_buflen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_execarg_extract_options</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opthash</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_execarg_setenv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>RUBY_SYMBOL_EXPORT_END</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>ARGVSTR2ARGV</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>argv_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>RB_IMEMO_TMPBUF_PTR</name><argument_list>(<argument><expr><name>argv_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>ARGVSTR2ARGC</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>argv_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ARGVSTR2ARGV</name><argument_list>(<argument><expr><name>argv_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
