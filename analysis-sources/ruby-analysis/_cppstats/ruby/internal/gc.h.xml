<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\gc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/compilers.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<struct_decl>struct <name>rb_execution_context_struct</name>;</struct_decl> 

<struct_decl>struct <name>rb_objspace</name>;</struct_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEWOBJ_OF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEWOBJ_OF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_NEWOBJ_OF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_OBJ_WRITE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NEWOBJ_OF</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T *(var) = (T *)(((f) &amp; FL_WB_PROTECTED) ? rb_wb_protected_newobj_of((c), (f) &amp; ~FL_WB_PROTECTED) : rb_wb_unprotected_newobj_of((c), (f)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWOBJ_OF</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NEWOBJ_OF((var), T, (c), (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_GC_FLAGS_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNALIGNED_MEMBER_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_MEMBER_ACCESS</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator> <name>USE_UNALIGNED_MEMBER_ACCESS</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_MEMBER_ACCESS</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>__has_warning</name><argument_list>(<argument><expr><literal type="string">"-Waddress-of-packed-member"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GCC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_MEMBER_ACCESS</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/warnings.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_MEMBER_ACCESS</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ COMPILER_WARNING_PUSH; COMPILER_WARNING_IGNORED(-Waddress-of-packed-member); __typeof__(expr) unaligned_member_access_result = (expr); COMPILER_WARNING_POP; unaligned_member_access_result; })</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_MEMBER_PTR</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNALIGNED_MEMBER_ACCESS(&amp;(ptr)-&gt;mem)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WRITE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNALIGNED_MEMBER_ACCESS(rb_obj_write((VALUE)(a), (VALUE *)(slot), (VALUE)(b), __FILE__, __LINE__))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ruby_initial_gc_stress_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ruby_disable_gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ruby_mimmalloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>RUBY_ATTR_MALLOC</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ruby_mimfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_objspace_set_event_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_objspace_gc_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_objspace</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_objspace_gc_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_objspace</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_gc_set_params</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_copy_wb_protected_attribute</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>alloc_align</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>__attribute__</name><argument_list>(<argument>(__alloc_align__(<literal type="number">1</literal>))</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rb_aligned_malloc</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>RUBY_ATTR_MALLOC</name> <name>RUBY_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>rb_size_mul_or_raise</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>size_t</name></type> <name>rb_size_mul_add_or_raise</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rb_xmalloc_mul_add</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>RUBY_ATTR_MALLOC</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_xrealloc_mul_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rb_xmalloc_mul_add_mul</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>RUBY_ATTR_MALLOC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rb_xcalloc_mul_add_mul</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>RUBY_ATTR_MALLOC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>ruby_sized_xrealloc_inlined</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>new_size</name></expr></argument>, <argument><expr><name>size_t</name> <name>old_size</name></expr></argument>)</argument_list> <name>RUBY_ATTR_RETURNS_NONNULL</name> <name>RUBY_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>ruby_sized_xrealloc2_inlined</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>new_count</name></expr></argument>, <argument><expr><name>size_t</name> <name>elemsiz</name></expr></argument>, <argument><expr><name>size_t</name> <name>old_count</name></expr></argument>)</argument_list> <name>RUBY_ATTR_RETURNS_NONNULL</name> <name>RUBY_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ruby_sized_xfree_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_objspace_data_type_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_wb_protected_newobj_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_wb_unprotected_newobj_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>rb_obj_memsize_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_verify_internal_consistency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>rb_obj_gc_flags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>ID</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_mark_values</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_mark_vm_stack_values</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ruby_sized_xrealloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>new_size</name></expr></argument>, <argument><expr><name>size_t</name> <name>old_size</name></expr></argument>)</argument_list> <name>RUBY_ATTR_RETURNS_NONNULL</name> <name>RUBY_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ruby_sized_xrealloc2</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>new_count</name></expr></argument>, <argument><expr><name>size_t</name> <name>element_size</name></expr></argument>, <argument><expr><name>size_t</name> <name>old_count</name></expr></argument>)</argument_list> <name>RUBY_ATTR_RETURNS_NONNULL</name> <name>RUBY_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ruby_sized_xfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_END</name>

<name>MJIT_SYMBOL_EXPORT_BEGIN</name>

<name>int</name></type> <name>rb_ec_stack_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_execution_context_struct</name></name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_writebarrier_remember</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_obj_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>MJIT_SYMBOL_EXPORT_END</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MALLOC_USABLE_SIZE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MALLOC_SIZE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_sized_xrealloc_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ruby_xrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_sized_xrealloc2_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemsiz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ruby_xrealloc2</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>new_count</name></expr></argument>, <argument><expr><name>elemsiz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>ruby_sized_xfree_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZED_REALLOC_N</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REALLOC_N(x, y, z)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_sized_xrealloc_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ruby_sized_xrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_sized_xrealloc2_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemsiz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ruby_sized_xrealloc2</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>new_count</name></expr></argument>, <argument><expr><name>elemsiz</name></expr></argument>, <argument><expr><name>old_count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>ruby_sized_xfree_inlined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ruby_sized_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZED_REALLOC_N</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = (T *)ruby_sized_xrealloc2((void *)(v), (m), sizeof(T), (n)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_sized_xrealloc</name></cpp:macro> <cpp:value>ruby_sized_xrealloc_inlined</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_sized_xrealloc2</name></cpp:macro> <cpp:value>ruby_sized_xrealloc2_inlined</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_sized_xfree</name></cpp:macro> <cpp:value>ruby_sized_xfree_inlined</cpp:value></cpp:define>

</unit>
