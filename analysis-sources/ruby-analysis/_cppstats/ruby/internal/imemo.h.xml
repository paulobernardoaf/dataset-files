<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\imemo.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/array.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IMEMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_MASK</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USHIFT</name></cpp:macro> <cpp:value>(FL_USHIFT + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER0</name></cpp:macro> <cpp:value>FL_USER4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER1</name></cpp:macro> <cpp:value>FL_USER5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER2</name></cpp:macro> <cpp:value>FL_USER6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER3</name></cpp:macro> <cpp:value>FL_USER7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER4</name></cpp:macro> <cpp:value>FL_USER8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_FL_USER5</name></cpp:macro> <cpp:value>FL_USER9</cpp:value></cpp:define>

<enum>enum <name>imemo_type</name> <block>{

<decl><name>imemo_env</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>imemo_cref</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>imemo_svar</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>imemo_throw_data</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>imemo_ifunc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>imemo_memo</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>imemo_ment</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>imemo_iseq</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>imemo_tmpbuf</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>imemo_ast</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>imemo_parser_strterm</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>imemo_callinfo</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>imemo_callcache</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

}</block>;</enum>

<struct>struct <name>vm_svar</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>cref_or_me</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>lastline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>backref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>others</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vm_throw_data</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>throw_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_control_frame_struct</name></name> <modifier>*</modifier></type><name>catch_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>throw_state</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_DATA_CONSUMED</name></cpp:macro> <cpp:value>IMEMO_FL_USER0</cpp:value></cpp:define>

<struct>struct <name>vm_ifunc_argc</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>SIZEOF_VALUE</name></expr></cpp:if>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>min</name><range>: <expr><operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>max</name><range>: <expr><operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<struct>struct <name>vm_ifunc</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_block_call_func_t</name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vm_ifunc_argc</name></name></type> <name>argc</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>rb_imemo_tmpbuf_struct</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>rb_imemo_tmpbuf_struct</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>MEMO</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>v2</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>long</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name>u3</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_DATA_P</name><parameter_list>(<parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>imemo_throw_data_p((VALUE)err)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMO_CAST</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(MEMO)(m))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMO_NEW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct MEMO *)rb_imemo_new(imemo_memo, (VALUE)(a), (VALUE)(b), (VALUE)(c), 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMO_FOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)RARRAY_PTR(value))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MEMO_FOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((value) = rb_ary_tmp_new_fill(type_roomof(type, VALUE)), MEMO_FOR(type, value))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_PARTIAL_MEMO_FOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((value) = rb_ary_tmp_new_fill(type_roomof(type, VALUE)), rb_ary_set_len((value), offsetof(type, member) / sizeof(VALUE)), MEMO_FOR(type, value))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>rb_imemo_tmpbuf_struct</name></name></type> <name>rb_imemo_tmpbuf_t</name>;</typedef>

<function_decl><type><name>VALUE</name></type> <name>rb_imemo_new</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_imemo_tmpbuf_t</name> <modifier>*</modifier></type><name>rb_imemo_tmpbuf_parser_heap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>rb_imemo_tmpbuf_t</name> <modifier>*</modifier></type><name>old_heap</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>vm_ifunc</name></name> <modifier>*</modifier></type><name>rb_vm_ifunc_new</name><parameter_list>(<parameter><decl><type><name>rb_block_call_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_argc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_strterm_mark</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>imemo_type</name></name></type> <name>imemo_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>imemo_type_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>imemo_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>imemo_throw_data_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>vm_ifunc</name></name> <modifier>*</modifier></type><name>rb_vm_ifunc_proc_new</name><parameter_list>(<parameter><decl><type><name>rb_block_call_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>rb_imemo_tmpbuf_auto_free_pointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>RB_IMEMO_TMPBUF_PTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>rb_imemo_tmpbuf_set_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>rb_imemo_tmpbuf_auto_free_pointer_new_from_an_RString</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>MEMO_V1_SET</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>MEMO_V2_SET</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IMEMO_DEBUG</name></expr></cpp:if>

<name>VALUE</name></type> <name>rb_imemo_new_debug</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_imemo_new</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_imemo_new_debug(type, v1, v2, v3, v0, __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>VALUE</name></type> <name>rb_imemo_new</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RUBY_SYMBOL_EXPORT_END</name>

<specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>imemo_type</name></name></type>

<name>imemo_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>imemo</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&gt;&gt;</operator> <name>FL_USHIFT</name><operator>)</operator> <operator>&amp;</operator> <name>IMEMO_MASK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>imemo_type_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>imemo_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>imemo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>IMEMO_MASK</name> <operator>&lt;&lt;</operator> <name>FL_USHIFT</name><operator>)</operator> <operator>|</operator> <name>RUBY_T_MASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>expected_type</name> <init>= <expr><operator>(</operator><name>imemo_type</name> <operator>&lt;&lt;</operator> <name>FL_USHIFT</name><operator>)</operator> <operator>|</operator> <name>T_IMEMO</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>expected_type</name> <operator>==</operator> <operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>imemo</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMEMO_TYPE_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>imemo_type_p((VALUE)v, t)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>imemo_throw_data_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>imemo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>imemo</name></expr></argument>, <argument><expr><name>T_IMEMO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>vm_ifunc</name></name> <modifier>*</modifier></type>

<name>rb_vm_ifunc_proc_new</name><parameter_list>(<parameter><decl><type><name>rb_block_call_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_vm_ifunc_new</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_imemo_tmpbuf_auto_free_pointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_imemo_new</name><argument_list>(<argument><expr><name>imemo_tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>RB_IMEMO_TMPBUF_PTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_imemo_tmpbuf_struct</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>rb_imemo_tmpbuf_set_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>rb_imemo_tmpbuf_t</name> <operator>*</operator><operator>)</operator><name>v</name><operator>)</operator><operator>-&gt;</operator><name>ptr</name> <operator>=</operator> <name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_imemo_tmpbuf_auto_free_pointer_new_from_an_RString</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>imemo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_imemo_tmpbuf_t</name> <modifier>*</modifier></type><name>tmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imemo</name> <operator>=</operator> <call><name>rb_imemo_tmpbuf_auto_free_pointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <operator>(</operator><name>rb_imemo_tmpbuf_t</name> <operator>*</operator><operator>)</operator><name>imemo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>ruby_xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpbuf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<return>return <expr><name>imemo</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>MEMO_V1_SET</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>MEMO_V2_SET</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
