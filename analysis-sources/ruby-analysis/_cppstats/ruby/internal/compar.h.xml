<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\internal\compar.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_P</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_TYPE_P((s), T_STRING) &amp;&amp; CLASS_OF(s) == rb_cString)</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>cmp_opt_Integer</name></decl>,

<decl><name>cmp_opt_String</name></decl>,

<decl><name>cmp_opt_Float</name></decl>,

<decl><name>cmp_optimizable_count</name></decl>

}</block>;</enum>

<struct>struct <name>cmp_opt_data</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>opt_methods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>opt_inited</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CMP_OPT_MEMO</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_PARTIAL_MEMO_FOR(type, value, cmp_opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_OPTIMIZABLE_BIT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U &lt;&lt; TOKEN_PASTE(cmp_opt_,type))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_OPTIMIZABLE</name><parameter_list>(<parameter><type><name>data</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((data).opt_inited &amp; CMP_OPTIMIZABLE_BIT(type)) ? ((data).opt_methods &amp; CMP_OPTIMIZABLE_BIT(type)) : (((data).opt_inited |= CMP_OPTIMIZABLE_BIT(type)), rb_method_basic_definition_p(TOKEN_PASTE(rb_c,type), id_cmp) &amp;&amp; ((data).opt_methods |= CMP_OPTIMIZABLE_BIT(type))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIMIZED_CMP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((FIXNUM_P(a) &amp;&amp; FIXNUM_P(b) &amp;&amp; CMP_OPTIMIZABLE(data, Integer)) ? (((long)a &gt; (long)b) ? 1 : ((long)a &lt; (long)b) ? -1 : 0) : (STRING_P(a) &amp;&amp; STRING_P(b) &amp;&amp; CMP_OPTIMIZABLE(data, String)) ? rb_str_cmp(a, b) : (RB_FLOAT_TYPE_P(a) &amp;&amp; RB_FLOAT_TYPE_P(b) &amp;&amp; CMP_OPTIMIZABLE(data, Float)) ? rb_float_cmp(a, b) : rb_cmpint(rb_funcallv(a, id_cmp, 1, &amp;b), a, b))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_invcmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
