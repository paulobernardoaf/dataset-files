<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\win32\file.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REPARSE_PATH_LEN</name></cpp:macro> <cpp:value>4092</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>MINIMUM_REPARSE_BUFFER_PATH_LEN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>ReparseTag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>ReparseDataLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>Reserved</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>USHORT</name></type> <name>SubstituteNameOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>SubstituteNameLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>PrintNameOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>PrintNameLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>PathBuffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>SymbolicLinkReparseBuffer</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>USHORT</name></type> <name>SubstituteNameOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>SubstituteNameLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>PrintNameOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>PrintNameLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>PathBuffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>MountPointReparseBuffer</name></decl>;</struct>

}</block>;</union>

}</block></struct></type> <name>rb_w32_reparse_buffer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_w32_reparse_buffer_size</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(rb_w32_reparse_buffer_t) + sizeof(WCHAR)*((n)-MINIMUM_REPARSE_BUFFER_PATH_LEN))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_w32_read_reparse_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>rb_w32_reparse_buffer_t</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>lchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_w32_ulchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>fchmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FCHMOD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function_decl><type><name>UINT</name></type> <name>rb_w32_filecp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>rb_w32_home_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
