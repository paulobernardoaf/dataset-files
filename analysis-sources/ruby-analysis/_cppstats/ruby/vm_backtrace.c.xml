<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\vm_backtrace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iseq.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cBacktrace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cBacktraceLocation</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>id2str</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_id2str</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>id2str(id)</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>calc_lineno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>pc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ISEQ_TYPE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><operator>!</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><operator>!</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>n</name> <init>= <expr><name>pc</name> <operator>-</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSUME</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_TRAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_print_backtrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>rb_iseq_line_no</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>rb_vm_get_sourceline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_RUBYFRAME_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name>calc_lineno</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>line</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_iseq_first_lineno</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>rb_backtrace_location_struct</name> <block>{

<enum>enum <name>LOCATION_TYPE</name> <block>{

<decl><name>LOCATION_TYPE_ISEQ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LOCATION_TYPE_ISEQ_CALCED</name></decl>,

<decl><name>LOCATION_TYPE_CFUNC</name></decl>,

<decl><name>LOCATION_TYPE_IFUNC</name></decl>

}</block> <decl><name>type</name></decl>;</enum>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

}</block> <decl><name>lineno</name></decl>;</union>

}</block> <decl><name>iseq</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>ID</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_backtrace_location_struct</name></name> <modifier>*</modifier></type><name>prev_loc</name></decl>;</decl_stmt>

}</block> <decl><name>cfunc</name></decl>;</struct>

}</block> <decl><name>body</name></decl>;</union>

}</block></struct></type> <name>rb_backtrace_location_t</name>;</typedef>

<struct>struct <name>valued_frame_info</name> <block>{

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>btobj</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>location_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>valued_frame_info</name></name> <modifier>*</modifier></type><name>vfi</name> <init>= <expr><operator>(</operator>struct <name>valued_frame_info</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>vfi</name><operator>-&gt;</operator><name>btobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>location_mark_entry</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>fi</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>location_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_backtrace_location_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>location_data_type</name> <init>= <expr><block>{

<expr><literal type="string">"frame_info"</literal></expr>,

<expr><block>{<expr><name>location_mark</name></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>location_memsize</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_backtrace_location_t</name> <modifier>*</modifier></type>

<name>location_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>locobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>valued_frame_info</name></name> <modifier>*</modifier></type><name>vloc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>locobj</name></expr></argument>, <argument><expr>struct <name>valued_frame_info</name></expr></argument>, <argument><expr><name>vloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>vloc</name><operator>-&gt;</operator><name>loc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>location_lineno</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LOCATION_TYPE_ISEQ_CALCED</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <call><name>calc_lineno</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<return>return <expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>lineno</name></name></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>location_lineno</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_lineno: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_lineno_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>location_lineno</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_label</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<return>return <expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>label</name></name></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<return>return <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_label: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_label_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_label</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_base_label</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<return>return <expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>base_label</name></name></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<return>return <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_base_label: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_base_label_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_base_label</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_path</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<return>return <expr><call><name>rb_iseq_path</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>location_path</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_path: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_path_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_path</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_realpath</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<return>return <expr><call><name>rb_iseq_realpath</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>location_realpath</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_realpath: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_absolute_path_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_realpath</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_format</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name> <init>= <expr><call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_enc_compatible</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">":in "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"`%s'"</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_to_str</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name></decl>, <decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOCATION_TYPE_ISEQ</name></expr>:</case>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lineno</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <call><name>calc_lineno</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LOCATION_TYPE_ISEQ_CALCED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LOCATION_TYPE_ISEQ_CALCED</name></expr>:</case>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lineno</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>lineno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LOCATION_TYPE_CFUNC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>location_lineno</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>progname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LOCATION_TYPE_IFUNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"location_to_str: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><call><name>location_format</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_to_str_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_to_str</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_inspect_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str_inspect</name><argument_list>(<argument><expr><call><name>location_to_str</name><argument_list>(<argument><expr><call><name>location_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>rb_backtrace_struct</name> <block>{

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>backtrace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>backtrace_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backtrace_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>strary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>locary</name></decl>;</decl_stmt>

}</block></struct></type> <name>rb_backtrace_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>backtrace_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>(</operator><name>rb_backtrace_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>s</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>location_mark_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bt</name><operator>-&gt;</operator><name>backtrace</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>strary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>locary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>backtrace_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>(</operator><name>rb_backtrace_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>backtrace_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>(</operator><name>rb_backtrace_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_backtrace_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rb_backtrace_location_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>backtrace_data_type</name> <init>= <expr><block>{

<expr><literal type="string">"backtrace"</literal></expr>,

<expr><block>{<expr><name>backtrace_mark</name></expr>, <expr><name>backtrace_free</name></expr>, <expr><name>backtrace_memsize</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>rb_backtrace_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backtrace_data_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backtrace_data_type</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>backtrace_each</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>iter_iseq</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>iter_cfunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>last_cfp</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>start_cfp</name> <init>= <expr><call><name>RUBY_VM_END_CONTROL_FRAME</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_cfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_cfp</name> <operator>=</operator>

<call><name>RUBY_VM_NEXT_CONTROL_FRAME</name><argument_list>(

<argument><expr><call><name>RUBY_VM_NEXT_CONTROL_FRAME</name><argument_list>(<argument><expr><name>start_cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>start_cfp</name> <operator>&lt;</operator> <name>last_cfp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>start_cfp</name> <operator>-</operator> <name>last_cfp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>cfp</name> <operator>=</operator> <name>start_cfp</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfp</name> <operator>=</operator> <call><name>RUBY_VM_NEXT_CONTROL_FRAME</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>iter_iseq</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RUBYVM_CFUNC_FRAME_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><call><name>rb_vm_frame_method_entry</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>mid</name> <init>= <expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>original_id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>iter_cfunc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>bt_iter_arg</name> <block>{

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>btobj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>prev_loc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>bt_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bt_iter_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>bt_iter_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>btobj</name></name> <operator>=</operator> <call><name>backtrace_alloc</name><argument_list>(<argument><expr><name>rb_cBacktrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>btobj</name></name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>bt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace_base</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>rb_backtrace_location_t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>bt_iter_iseq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bt_iter_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>bt_iter_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace</name><index>[<expr><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LOCATION_TYPE_ISEQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name> <operator>=</operator> <name>iseq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>prev_loc</name></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>bt_iter_cfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bt_iter_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>bt_iter_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace</name><index>[<expr><name><name>arg</name><operator>-&gt;</operator><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LOCATION_TYPE_CFUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>mid</name></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>cfunc</name><operator>.</operator><name>prev_loc</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>prev_loc</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>MJIT_FUNC_EXPORTED</name> <name>VALUE</name></type>

<name>rb_ec_backtrace_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bt_iter_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>prev_loc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backtrace_each</name><argument_list>(<argument><expr><name>ec</name></expr></argument>,

<argument><expr><name>bt_init</name></expr></argument>,

<argument><expr><name>bt_iter_iseq</name></expr></argument>,

<argument><expr><name>bt_iter_cfunc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>arg</name><operator>.</operator><name>btobj</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_collect</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>btary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>lev</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"backtrace_collect: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>btary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>+</operator><name>lev</name><operator>&lt;</operator><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><operator>&amp;</operator><name><name>bt</name><operator>-&gt;</operator><name>backtrace</name><index>[<expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>lev</name><operator>+</operator><name>i</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>btary</name></expr></argument>, <argument><expr><call><name>func</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>btary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_to_str_dmyarg</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dmy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>location_to_str</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_to_str_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lev</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>backtrace_collect</name><argument_list>(<argument><expr><name>bt</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>location_to_str_dmyarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_backtrace_to_str_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bt</name><operator>-&gt;</operator><name>strary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>strary</name></name> <operator>=</operator> <call><name>backtrace_to_str_ary</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>bt</name><operator>-&gt;</operator><name>strary</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MJIT_FUNC_EXPORTED</name> <name>void</name></type>

<name>rb_backtrace_use_iseq_first_lineno_for_last_location</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>&amp;</operator><name><name>bt</name><operator>-&gt;</operator><name>backtrace</name><index>[<expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iseq</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LOCATION_TYPE_ISEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>lineno</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>first_lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LOCATION_TYPE_ISEQ_CALCED</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>location_create</name><parameter_list>(<parameter><decl><type><name>rb_backtrace_location_t</name> <modifier>*</modifier></type><name>srcloc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>btobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>valued_frame_info</name></name> <modifier>*</modifier></type><name>vloc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr>struct <name>valued_frame_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>location_data_type</name></expr></argument>, <argument><expr><name>vloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vloc</name><operator>-&gt;</operator><name>loc</name></name> <operator>=</operator> <name>srcloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vloc</name><operator>-&gt;</operator><name>btobj</name></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>btobj</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_to_location_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lev</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>backtrace_collect</name><argument_list>(<argument><expr><name>bt</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>location_create</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_backtrace_to_location_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bt</name><operator>-&gt;</operator><name>locary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>locary</name></name> <operator>=</operator> <call><name>backtrace_to_location_ary</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>bt</name><operator>-&gt;</operator><name>locary</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_dump_data</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_backtrace_to_str_ary</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>backtrace_load_data</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>strary</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_ec_backtrace_str_ary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>backtrace_to_str_ary</name><argument_list>(<argument><expr><call><name>rb_ec_backtrace_object</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_ec_backtrace_location_ary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>backtrace_to_location_ary</name><argument_list>(<argument><expr><call><name>rb_ec_backtrace_object</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>oldbt_arg</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dmy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>oldbt_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>progname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_iter_iseq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>oldbt_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>label</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>calc_lineno</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>file</name><operator>,</operator> <name>lineno</name><operator>,</operator> <name>name</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_iter_cfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>oldbt_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>filename</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>lineno</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>file</name><operator>,</operator> <name>lineno</name><operator>,</operator> <name>name</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_print</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\tfrom %s:%d:in unknown method\n"</literal></expr></argument>,

<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\tfrom %s:%d:in `%s'\n"</literal></expr></argument>,

<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vm_backtrace_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>oldbt_print</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backtrace_each</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>oldbt_init</name></expr></argument>,

<argument><expr><name>oldbt_iter_iseq</name></expr></argument>,

<argument><expr><name>oldbt_iter_cfunc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_bugreport</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ruby"</literal></expr> </then><else>: <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- Ruby level backtrace information "</literal>

<literal type="string">"----------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d:in unknown method\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d:in `%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>rb_backtrace_print_as_bugreport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>oldbt_bugreport</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backtrace_each</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>oldbt_init</name></expr></argument>,

<argument><expr><name>oldbt_iter_iseq</name></expr></argument>,

<argument><expr><name>oldbt_iter_cfunc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>rb_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vm_backtrace_print</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>print_to_arg</name> <block>{

<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>iter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VALUE</name></type> <name>output</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oldbt_print_to</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>print_to_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"\tfrom %"</literal><name>PRIsVALUE</name><literal type="string">":%d:in "</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"unknown method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" `%"</literal><name>PRIsVALUE</name><literal type="string">"'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>arg</name><operator>-&gt;</operator><name>iter</name></name>)<argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>rb_backtrace_each</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>iter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oldbt_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>print_to_arg</name></name></type> <name>parg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>oldbt_print_to</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>parg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backtrace_each</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>oldbt_init</name></expr></argument>,

<argument><expr><name>oldbt_iter_iseq</name></expr></argument>,

<argument><expr><name>oldbt_iter_cfunc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_make_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ec_backtrace_str_ary</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ec_backtrace_to_ary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lev_default</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lev_plus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lev</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>btval</name> <init>= <expr><call><name>rb_ec_backtrace_object</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_backtrace_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCoreDataFromValue</name><argument_list>(<argument><expr><name>btval</name></expr></argument>, <argument><expr><name>rb_backtrace_t</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <name>lev_default</name> <operator>+</operator> <name>lev_plus</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>-</operator> <name>lev</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>rb_range_beg_len</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>-</operator> <name>lev_plus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Qfalse</name></expr>:</case>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lev</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative level (%ld)"</literal></expr></argument>, <argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lev</name> <operator>+=</operator> <name>lev_plus</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bt</name><operator>-&gt;</operator><name>backtrace_size</name></name> <operator>-</operator> <name>lev</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Qnil</name></expr>:</case>

<return>return <expr><name>Qnil</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <name>beg</name> <operator>+</operator> <name>lev_plus</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lev</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative level (%ld)"</literal></expr></argument>, <argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative size (%ld)"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lev</name> <operator>+=</operator> <name>lev_plus</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to_str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>backtrace_to_str_ary</name><argument_list>(<argument><expr><name>btval</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>backtrace_to_location_ary</name><argument_list>(<argument><expr><name>btval</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>btval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>thread_backtrace_to_ary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>to_kill</name></name> <operator>||</operator> <name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ec_backtrace_to_ary</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>to_str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_vm_thread_backtrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>thread_backtrace_to_ary</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>thval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_vm_thread_backtrace_locations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>thread_backtrace_to_ary</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>thval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_f_caller</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ec_backtrace_to_ary</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_f_caller_locations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ec_backtrace_to_ary</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_vm_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rb_cBacktrace</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"Backtrace"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cBacktrace</name></expr></argument>, <argument><expr><name>backtrace_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cBacktrace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_marshal_define_compat</name><argument_list>(<argument><expr><name>rb_cBacktrace</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>, <argument><expr><name>backtrace_dump_data</name></expr></argument>, <argument><expr><name>backtrace_load_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cBacktraceLocation</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cBacktrace</name></expr></argument>, <argument><expr><literal type="string">"Location"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"lineno"</literal></expr></argument>, <argument><expr><name>location_lineno_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name>location_label_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"base_label"</literal></expr></argument>, <argument><expr><name>location_base_label_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>location_path_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"absolute_path"</literal></expr></argument>, <argument><expr><name>location_absolute_path_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>location_to_str_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBacktraceLocation</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>location_inspect_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"caller"</literal></expr></argument>, <argument><expr><name>rb_f_caller</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"caller_locations"</literal></expr></argument>, <argument><expr><name>rb_f_caller_locations</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>RUBY_SYMBOL_EXPORT_END</name>

struct <name>rb_debug_inspector_struct</name> <block>{

<expr><name>rb_execution_context_t</name> <operator>*</operator><name>ec</name></expr>;

<expr><name>rb_control_frame_t</name> <operator>*</operator><name>cfp</name></expr>;

<expr><name>VALUE</name> <name>backtrace</name></expr>;

<expr><name>VALUE</name> <name>contexts</name></expr>; 

<expr><name>long</name> <name>backtrace_size</name></expr>;

}</block></expr>;</expr_stmt>

<enum>enum <block>{

<decl><name>CALLER_BINDING_SELF</name></decl>,

<decl><name>CALLER_BINDING_CLASS</name></decl>,

<decl><name>CALLER_BINDING_BINDING</name></decl>,

<decl><name>CALLER_BINDING_ISEQ</name></decl>,

<decl><name>CALLER_BINDING_CFP</name></decl>

}</block>;</enum>

<struct>struct <name>collect_caller_bindings_data</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>collect_caller_bindings_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>get_klass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_vm_control_frame_id_and_class</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>klass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_ICLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>klass</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>collect_caller_bindings_iseq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>collect_caller_bindings_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>collect_caller_bindings_data</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_SELF</name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_CLASS</name></expr></argument>, <argument><expr><call><name>get_klass</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_BINDING</name></expr></argument>, <argument><expr><call><name>GC_GUARDED_PTR</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_ISEQ</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_CFP</name></expr></argument>, <argument><expr><call><name>GC_GUARDED_PTR</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ary</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>collect_caller_bindings_cfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>collect_caller_bindings_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>collect_caller_bindings_data</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_SELF</name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_CLASS</name></expr></argument>, <argument><expr><call><name>get_klass</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_BINDING</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_ISEQ</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_CFP</name></expr></argument>, <argument><expr><call><name>GC_GUARDED_PTR</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ary</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>collect_caller_bindings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>collect_caller_bindings_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>ary</name></name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backtrace_each</name><argument_list>(<argument><expr><name>ec</name></expr></argument>,

<argument><expr><name>collect_caller_bindings_init</name></expr></argument>,

<argument><expr><name>collect_caller_bindings_iseq</name></expr></argument>,

<argument><expr><name>collect_caller_bindings_cfunc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_reverse</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>ary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>entry</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cfp_val</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>CALLER_BINDING_BINDING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>cfp_val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><call><name>GC_GUARDED_PTR_REF</name><argument_list>(<argument><expr><name>cfp_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>CALLER_BINDING_BINDING</name></expr></argument>, <argument><expr><call><name>rb_vm_make_binding</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_open</name><parameter_list>(<parameter><decl><type><name>rb_debug_inspector_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_debug_inspector_t</name></type> <name>dbg_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>MAYBE_UNUSED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_vm_stack_to_heap</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg_context</name><operator>.</operator><name>ec</name></name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg_context</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name><name>dbg_context</name><operator>.</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg_context</name><operator>.</operator><name>backtrace</name></name> <operator>=</operator> <call><name>rb_ec_backtrace_location_ary</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg_context</name><operator>.</operator><name>backtrace_size</name></name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>dbg_context</name><operator>.</operator><name>backtrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg_context</name><operator>.</operator><name>contexts</name></name> <operator>=</operator> <call><name>collect_caller_bindings</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>dbg_context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>frame_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>dc</name><operator>-&gt;</operator><name>backtrace_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"no such frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>contexts</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_frame_self_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>frame_get</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_SELF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_frame_class_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>frame_get</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_CLASS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_frame_binding_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>frame_get</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_BINDING</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_frame_iseq_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>frame</name> <init>= <expr><call><name>frame_get</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>iseq</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>CALLER_BINDING_ISEQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>rb_iseqw_new</name><argument_list>(<argument><expr><operator>(</operator><name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_debug_inspector_backtrace_locations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_debug_inspector_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dc</name><operator>-&gt;</operator><name>backtrace</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>rb_profile_frames</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_cfp</name> <init>= <expr><call><name>RUBY_VM_END_CONTROL_FRAME</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>cme</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>limit</name> <operator>&amp;&amp;</operator> <name>cfp</name> <operator>!=</operator> <name>end_cfp</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_RUBYFRAME_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cme</name> <operator>=</operator> <call><name>rb_vm_frame_method_entry</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cme</name> <operator>&amp;&amp;</operator> <name><name>cme</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VM_METHOD_TYPE_ISEQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>cme</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>calc_lineno</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cfp</name> <operator>=</operator> <call><name>RUBY_VM_PREVIOUS_CONTROL_FRAME</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type>

<name>frame2iseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>T_IMEMO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>imemo_type</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>imemo_iseq</name></expr>:</case>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>frame</name></expr>;</return>

<case>case <expr><name>imemo_ment</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>cme</name> <init>= <expr><operator>(</operator><name>rb_callable_method_entry_t</name> <operator>*</operator><operator>)</operator><name>frame</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cme</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VM_METHOD_TYPE_ISEQ</name></expr>:</case>

<return>return <expr><name><name>cme</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseqptr</name></name></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"frame2iseq: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_absolute_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_realpath</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_label</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_label</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_base_label</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_base_label</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_first_lineno</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_first_lineno</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>frame2klass</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>T_IMEMO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>cme</name> <init>= <expr><operator>(</operator><name>rb_callable_method_entry_t</name> <operator>*</operator><operator>)</operator><name>frame</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>imemo_type</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>imemo_ment</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>cme</name><operator>-&gt;</operator><name>defined_class</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_classpath</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>frame2klass</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>klass</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_ICLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>RBASIC</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>FL_SINGLETON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id__attached__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_CLASS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;%s:%p&gt;"</literal></expr></argument>, <argument><expr><call><name>rb_class2name</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_class_path</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_singleton_method_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>frame2klass</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>klass</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FL_TEST</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>FL_SINGLETON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_method_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>frame2iseq</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>iseq</name></expr> ?</condition><then> <expr><call><name>rb_iseq_method_name</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_qualified_method_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>method_name</name> <init>= <expr><call><name>rb_profile_frame_method_name</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>method_name</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>classpath</name> <init>= <expr><call><name>rb_profile_frame_classpath</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>singleton_p</name> <init>= <expr><call><name>rb_profile_frame_singleton_method_p</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>classpath</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">"%s%"</literal><name>PRIsVALUE</name></expr></argument>,

<argument><expr><name>classpath</name></expr></argument>, <argument><expr><ternary><condition><expr><name>singleton_p</name> <operator>==</operator> <name>Qtrue</name></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">"#"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>method_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>method_name</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_profile_frame_full_label</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>label</name> <init>= <expr><call><name>rb_profile_frame_label</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>base_label</name> <init>= <expr><call><name>rb_profile_frame_base_label</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>qualified_method_name</name> <init>= <expr><call><name>rb_profile_frame_qualified_method_name</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>qualified_method_name</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>base_label</name> <operator>==</operator> <name>qualified_method_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>label</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>label_length</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>base_label_length</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>base_label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name> <init>= <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><name>label_length</name> <operator>-</operator> <name>base_label_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%.*s%"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qualified_method_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
