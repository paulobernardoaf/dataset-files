<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\vsnprintf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_long</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_short</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_int</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDARG_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDARG_PROTOTYPES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__P</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDARG_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>const</specifier></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;varargs.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BSD_VA_LIST_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_VA_LIST_</name></cpp:macro> <cpp:value>va_list</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__const</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__const</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>__sbuf</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>_size</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>__sFILE</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_p</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

size_t _r; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>_w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>_file</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>__sbuf</name></name></type> <name>_bf</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

size_t _lbfsize; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vwrite</name>)<parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>vextra</name>)<parameter_list>()</parameter_list>;</function_decl>

}</block></struct></type> <name>FILE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SLBF</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SNBF</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SRD</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SWR</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SRW</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SEOF</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SERR</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SMBF</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SAPP</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SSTR</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SOPT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SNPT</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SOFF</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SMOD</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOF</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD__sfeof</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)-&gt;_flags &amp; __SEOF) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD__sferror</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)-&gt;_flags &amp; __SERR) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD__sclearerr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)((p)-&gt;_flags &amp;= ~(__SERR|__SEOF)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD__sfileno</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;_file)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>feof</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ferror</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>clearerr</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>feof</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSD__sfeof(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ferror</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSD__sferror(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clearerr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSD__sclearerr(p)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ANSI_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fileno</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSD__sfileno(p)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>__siov</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iov_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>iov_len</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>__suio</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>__siov</name></name> <modifier>*</modifier></type><name>uio_iov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uio_iovcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>uio_resid</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BSD__sfvwrite</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>__suio</name></name> <modifier>*</modifier></type><name>uio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>__siov</name></name> <modifier>*</modifier></type><name>iov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>size_t</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name><name>uio</name><operator>-&gt;</operator><name>uio_resid</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)memcpy((void *)fp-&gt;_p, (void *)p, (size_t)(n))</cpp:value></cpp:define>

<expr_stmt><expr><name>iov</name> <operator>=</operator> <name><name>uio</name><operator>-&gt;</operator><name>uio_iov</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iov</name><operator>++</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETIOV</name><parameter_list>(<parameter><type><name>extra_work</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while (len == 0) { extra_work; p = iov-&gt;iov_base; len = iov-&gt;iov_len; iov++; }</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;</operator> <name>__SNBF</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;</operator> <name>__SLBF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<macro><name>GETIOV</name><argument_list>(<argument>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>_w</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;</operator> <name>__SSTR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_w</name></name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_p</name></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>uio</name><operator>-&gt;</operator><name>uio_resid</name></name> <operator>-=</operator> <name>w</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BSD__sprint</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>__suio</name></name> <modifier>*</modifier></type><name>uio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uio</name><operator>-&gt;</operator><name>uio_resid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>uio</name><operator>-&gt;</operator><name>uio_iovcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>fp</name><operator>-&gt;</operator><name>vwrite</name></name>)<argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>uio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uio</name><operator>-&gt;</operator><name>uio_resid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uio</name><operator>-&gt;</operator><name>uio_iovcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BSD__sbprintf</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>to_digit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) - '0')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_digit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned)to_digit(c) &lt;= 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>to_char</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(char)((n) + '0')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>BSD__uqtoa</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>u_quad_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>octzero</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdigs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>endp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>quad_t</name></type> <name>sval</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>LLONG_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <name>val</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>sval</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sval</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>sval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>val</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>octzero</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <name><name>xdigs</name><index>[<expr><name>val</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>val</name></expr>)</condition>;</do>

<break>break;</break>

<default>default:</default> 

<break>break;</break> 

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>BSD__ultoa</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>u_long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>octzero</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdigs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>endp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>sval</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>LONG_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <name>val</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>sval</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sval</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>sval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>val</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>octzero</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <name><name>xdigs</name><index>[<expr><name>val</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>val</name></expr>)</condition>;</do>

<break>break;</break>

<default>default:</default> 

<break>break;</break> 

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXEXP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DBL_MAX_10_EXP</name> <operator>&gt;</operator> <operator>-</operator><name>DBL_MIN_10_EXP</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXEXP</name></cpp:macro> <cpp:value>(DBL_MAX_10_EXP)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXEXP</name></cpp:macro> <cpp:value>(-DBL_MIN_10_EXP)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXFRACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXFRACT</name></cpp:macro> <cpp:value>(MAXEXP*10/3)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF</name></cpp:macro> <cpp:value>(MAXEXP+MAXFRACT+1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFPREC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cvt</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>exponent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lower_hexdigits</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lower_hexdigits</name></cpp:macro> <cpp:value>"0123456789abcdef"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>upper_hexdigits</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>upper_hexdigits</name></cpp:macro> <cpp:value>"0123456789ABCDEF"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXPREFIX</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LADJUST</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGDBL</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGINT</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUADINT</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTINT</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZEROPAD</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPT</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<macro><name>ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS</name><argument_list>(<argument>static ssize_t BSD_vfprintf(FILE *fp, const char *fmt0, va_list ap)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>BSD_vfprintf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt0</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRI_EXTRA_MARK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>PRI_EXTRA_MARK_LEN</name> <init>= <expr><call><name>rb_strlen_lit</name><argument_list>(<argument><expr><name>PRI_EXTRA_MARK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>ch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>__siov</name></name> <modifier>*</modifier></type><name>iovp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prec</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>softsign</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>_double</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>expt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>expsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ndig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fprec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>expstr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>u_long</name></type> <name>MAYBE_UNUSED</name><parameter_list>(<parameter><decl><type><name>ulval</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_quad_t</name></type> <name>MAYBE_UNUSED</name><argument_list>(<argument><expr><name>uqval</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dprec</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>fieldsz</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>realsz</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdigs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOV</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>__suio</name></name></type> <name>uio</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>__siov</name></name></type> <name><name>iov</name><index>[<expr><name>NIOV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>ox</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ebuf</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<decl_stmt><decl><type><name>long</name></type> <name>ln</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>blanks</name><index>[<expr><name>PADSIZE</name></expr>]</index></name> <init>=

<expr><block>{<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zeroes</name><index>[<expr><name>PADSIZE</name></expr>]</index></name> <init>=

<expr><block>{<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ iovp-&gt;iov_base = (ptr); iovp-&gt;iov_len = (len); uio.uio_resid += (len); iovp++; if (++uio.uio_iovcnt &gt;= NIOV) { if (BSD__sprint(fp, &amp;uio)) goto error; iovp = iov; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD</name><parameter_list>(<parameter><type><name>howmany</name></type></parameter>, <parameter><type><name>with</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((n = (howmany)) &gt; 0) { while (n &gt; PADSIZE) { PRINT((with), PADSIZE); n -= PADSIZE; } PRINT((with), n); } }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_L</name><parameter_list>(<parameter><type><name>howmany</name></type></parameter>, <parameter><type><name>with</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ln = (howmany); if ((long)((int)ln) != ln) { errno = ENOMEM; goto error; } if (ln &gt; 0) PAD((int)ln, (with)); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_L</name><parameter_list>(<parameter><type><name>howmany</name></type></parameter>, <parameter><type><name>with</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PAD((howmany), (with))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ if (uio.uio_resid &amp;&amp; BSD__sprint(fp, &amp;uio)) goto error; uio.uio_iovcnt = 0; iovp = iov; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SARG</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(flags&amp;LONGINT ? va_arg(ap, long) : flags&amp;SHORTINT ? (long)(short)va_arg(ap, int) : (long)va_arg(ap, int))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UARG</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(flags&amp;LONGINT ? va_arg(ap, u_long) : flags&amp;SHORTINT ? (u_long)(u_short)va_arg(ap, int) : (u_long)va_arg(ap, u_int))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>__SNBF</name><operator>|</operator><name>__SWR</name><operator>|</operator><name>__SRW</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>__SNBF</name><operator>|</operator><name>__SWR</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>fp</name><operator>-&gt;</operator><name>_file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><call><name>BSD__sbprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmt0</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>fmt0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uio</name><operator>.</operator><name>uio_iov</name></name> <operator>=</operator> <name>iovp</name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uio</name><operator>.</operator><name>uio_resid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uio</name><operator>.</operator><name>uio_iovcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xdigs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>nc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fmt</name></expr>;</init> <condition><expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nc</name> <operator>=</operator> <name>fmt</name> <operator>-</operator> <name>cp</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>nc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dprec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<label><name>rflag</name>:</label> <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<label><name>reswitch</name>:</label> <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>rflag</name>;</goto>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>rflag</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LADJUST</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>is_digit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <call><name>to_digit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ZEROPAD</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <call><name>to_digit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>is_digit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<goto>goto <name>reswitch</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGDBL</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SHORTINT</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>QUADINT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>rflag</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>QUADINT</name></expr>;</expr_stmt>

<goto>goto <name>rflag</name>;</goto>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'3'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>fmt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'6'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>fmt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'4'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>QUADINT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>QUADINT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>rflag</name>;</goto>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MASK</name></cpp:macro> <cpp:value>(QUADINT|LONGINT|SHORTINT)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MASK</name></cpp:macro> <cpp:value>(LONGINT|SHORTINT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_HAVE_SANE_QUAD_</name> <operator>&amp;&amp;</operator> <name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_FLAG</name></cpp:macro> <cpp:value>QUADINT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_FLAG</name></cpp:macro> <cpp:value>LONGINT</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_FLAG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRI_EXTRA_MARK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PRI_EXTRA_MARK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PRI_EXTRA_MARK_LEN &lt; 1 || (*(s) == PRI_EXTRA_MARK[0] &amp;&amp; (PRI_EXTRA_MARK_LEN == 1 || strncmp((s)+1, &amp;PRI_EXTRA_MARK[1], PRI_EXTRA_MARK_LEN-1) == 0)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_EXTRA_MARK_LEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PRI_EXTRA_MARK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>vextra</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INTPTR_MASK</name><operator>)</operator> <operator>==</operator> <name>INTPTR_FLAG</name> <operator>&amp;&amp;</operator>

<call><name>IS_PRI_EXTRA_MARK</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <name>PRI_EXTRA_MARK_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLUSH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_HAVE_SANE_QUAD_</name> <operator>&amp;&amp;</operator> <name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>u_quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>fp</name><operator>-&gt;</operator><name>vextra</name></name>)<argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uqval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>uqval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldsz</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>u_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>fp</name><operator>-&gt;</operator><name>vextra</name></name>)<argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldsz</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>long_len</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>fieldsz</name> <operator>&lt;</operator> <name>prec</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>fieldsz</name></expr> </then><else>: <expr><name>prec</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<goto>goto <name>decimal</name>;</goto>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<label><name>decimal</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quad_t</name><operator>)</operator><name>uqval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>quad_t</name><operator>)</operator><name>uqval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <call><name>SARG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>ulval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>ulval</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<goto>goto <name>number</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prec</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fprec</name> <operator>=</operator> <name>prec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>fp_begin</name>;</goto>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>prec</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>

<expr><name>DEFPREC</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>fprec</name> <operator>=</operator> <name>prec</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>fp_begin</name>;</goto>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>DEFPREC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fprec</name> <operator>=</operator> <name>prec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>fp_begin</name>:</label> <expr_stmt><expr><name>_double</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>_double</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>_double</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="string">"Inf"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>_double</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="string">"NaN"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>cvt</name><argument_list>(<argument><expr><name>_double</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>prec</name> <operator>&lt;</operator> <name>MAXFRACT</name></expr> ?</condition><then> <expr><name>prec</name></expr> </then><else>: <expr><name>MAXFRACT</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>softsign</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>expt</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndig</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>expt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>expt</name> <operator>&gt;</operator> <name>prec</name> <operator>&amp;&amp;</operator> <name>expt</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'e'</literal></expr> </then><else>: <expr><literal type="char">'E'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HEXPREFIX</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>expt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expsize</name> <operator>=</operator> <call><name>exponent</name><argument_list>(<argument><expr><name>expstr</name></expr></argument>, <argument><expr><name>expt</name></expr></argument>, <argument><expr><name>ch</name> <operator>+</operator> <literal type="char">'p'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'x'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>expsize</name> <operator>+</operator> <name>ndig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>--</operator><name>expt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expsize</name> <operator>=</operator> <call><name>exponent</name><argument_list>(<argument><expr><name>expstr</name></expr></argument>, <argument><expr><name>expt</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>expsize</name> <operator>+</operator> <name>ndig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>fprec</name></expr><operator>,</operator> <expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>expt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>expt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>prec</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>prec</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>prec</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expt</name> <operator>&gt;=</operator> <name>ndig</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>expt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>ndig</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>expt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>-</operator> <name>expt</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>softsign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>quad_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LONGINT</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LONGINT</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SHORTINT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>short</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue> 

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>u_quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <call><name>UARG</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<goto>goto <name>nosign</name>;</goto>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>CHAR_BIT</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_LLP64_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>uqval</name> <operator>=</operator> <operator>(</operator><name>u_quad_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name><operator>)</operator> <operator>|</operator> <name>QUADINT</name> <operator>|</operator> <name>HEXPREFIX</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>QUADINT</name><operator>)</operator> <operator>|</operator> <name>HEXPREFIX</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name><operator>)</operator> <operator>|</operator> <name>HEXPREFIX</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xdigs</name> <operator>=</operator> <name>lower_hexdigits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>

<goto>goto <name>nosign</name>;</goto>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>cp</name><operator>)</operator> <operator>&lt;</operator> <name>prec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>prec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>fieldsz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>long_len</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LONGINT</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>u_quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <call><name>UARG</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<goto>goto <name>nosign</name>;</goto>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><name>xdigs</name> <operator>=</operator> <name>upper_hexdigits</name></expr>;</expr_stmt>

<goto>goto <name>hex</name>;</goto>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>xdigs</name> <operator>=</operator> <name>lower_hexdigits</name></expr>;</expr_stmt>

<label><name>hex</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uqval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>u_quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>ulval</name> <operator>=</operator> <call><name>UARG</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr> ?</condition><then> <expr><name>uqval</name> <operator>!=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>ulval</name> <operator>!=</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<name>ulval</name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HEXPREFIX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>nosign</name>:</label> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<label><name>number</name>:</label> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dprec</name> <operator>=</operator> <name>prec</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>ZEROPAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ebuf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_SANE_QUAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>QUADINT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>uqval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>prec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>BSD__uqtoa</name><argument_list>(<argument><expr><name>uqval</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr></argument>, <argument><expr><name>xdigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ulval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>prec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>BSD__ultoa</name><argument_list>(<argument><expr><name>ulval</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr></argument>, <argument><expr><name>xdigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ebuf</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>fieldsz</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<label><name>long_len</name>:</label>

<expr_stmt><expr><name>realsz</name> <operator>=</operator> <ternary><condition><expr><name>dprec</name> <operator>&gt;</operator> <name>fieldsz</name></expr> ?</condition><then> <expr><name>dprec</name></expr> </then><else>: <expr><name>fieldsz</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>realsz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HEXPREFIX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>realsz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>LADJUST</name><operator>|</operator><name>ZEROPAD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PAD_L</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>realsz</name></expr></argument>, <argument><expr><name>blanks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HEXPREFIX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>ox</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>LADJUST</name><operator>|</operator><name>ZEROPAD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>ZEROPAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PAD_L</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>realsz</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PAD_L</name><argument_list>(<argument><expr><name>dprec</name> <operator>-</operator> <name>fieldsz</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FPT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>fieldsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HEXPREFIX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>ox</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ndig</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>fprec</name><operator>-</operator><name>ndig</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>expstr</name></expr></argument>, <argument><expr><name>expsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>_double</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"0."</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>ndig</name> <operator>&gt;=</operator> <name>fprec</name></expr> ?</condition><then> <expr><name>ndig</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>fprec</name> <operator>-</operator> <operator>(</operator><name>ch</name> <operator>!=</operator> <literal type="char">'f'</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ndig</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"0."</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><operator>-</operator><name>expt</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ndig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>fprec</name> <operator>-</operator> <name>ndig</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr> ?</condition><then> <expr><name>expt</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expt</name> <operator>&gt;=</operator> <name>ndig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ndig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>expt</name> <operator>-</operator> <name>ndig</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>expt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>expt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ndig</name><operator>-</operator><name>expt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>fprec</name> <operator>-</operator> <name>ndig</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr> ?</condition><then> <expr><name>expt</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>ox</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_double</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ndig</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>ndig</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PAD</name><argument_list>(<argument><expr><name>fprec</name> <operator>-</operator> <name>ndig</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>expstr</name></expr></argument>, <argument><expr><name>expsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>fieldsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LADJUST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PAD_L</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>realsz</name></expr></argument>, <argument><expr><name>blanks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>realsz</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>realsz</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLUSH</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>FLUSH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>BSD__sferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>EOF</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>BSD__dtoa</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>BSD__hdtoa</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>cvt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndigits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decpt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>dsgn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>digits</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rve</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <call><name>signbit</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="char">'\000'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator><literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <call><name>BSD__hdtoa</name><argument_list>(<argument><expr><name>value</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'a'</literal></expr> ?</condition><then> <expr><name>lower_hexdigits</name></expr> </then><else>: <expr><name>upper_hexdigits</name></expr></else></ternary></expr></argument>,

<argument><expr><name>ndigits</name></expr></argument>, <argument><expr><name>decpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <call><name>BSD__dtoa</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>ndigits</name></expr></argument>, <argument><expr><name>decpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>, <argument><expr><name>rve</name> <operator>-</operator> <name>digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rve</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>rve</name> <operator>-</operator> <name>digits</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>digits</name> <operator>+</operator> <name>ndigits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>digits</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <operator>-</operator><name>ndigits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <operator>*</operator><name>decpt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>rve</name> <operator>&lt;</operator> <name>bp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rve</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>rve</name> <operator>-</operator> <name>digits</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>digits</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>exponent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmtch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>expbuf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>MAXEXP</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><ternary><condition><expr><name>MAXEXP</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>fmtch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>-</operator><name>exp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>expbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>t</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>exp</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>exp</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>t</name> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>expbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expbuf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fmtch</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>to_char</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
