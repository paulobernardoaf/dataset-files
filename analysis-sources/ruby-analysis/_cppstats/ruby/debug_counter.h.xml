<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\debug_counter.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_DEBUG_COUNTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_inline_hit</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_inline_miss_klass</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_inline_miss_invalidated</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_cme_complement</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_cme_complement_hit</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_search</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_search_notfound</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mc_search_super</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ci_packed</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ci_kw</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ci_nokw</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ci_runtime</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_new</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_temp</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_found_ccs</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_ent_invalidate</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_cme_invalidate</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_leaf</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_leaf_ccs</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_leaf_callable</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_tree</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_tree_cme</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>cc_invalidate_tree_callable</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccs_free</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccs_maxlen</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccs_found</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>iseq_num</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>iseq_cd_num</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_general</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_setup</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_setup_0start</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_setup_tailcall_0start</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_fix</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_opt</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_kw1</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_iseq_kw2</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_cfunc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_ivar</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_attrset</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_method_missing</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_zsuper</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_bmethod</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_opt_send</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_opt_call</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_opt_block_call</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ccf_super_method</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_method</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_block</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_class</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_top</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_cfunc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_ifunc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_eval</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_rescue</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_push_dummy</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_R2R</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_R2C</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_C2C</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>frame_C2R</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_ic_hit</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_ic_miss</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_ic_miss_serial</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_ic_miss_unset</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_ic_miss_noobject</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_hit</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_miss</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_miss_serial</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_miss_unset</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_miss_oorange</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_ic_miss_noobject</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_get_base</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>ivar_set_base</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>lvar_get</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>lvar_get_dynamic</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>lvar_set</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>lvar_set_dynamic</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>lvar_set_slowpath</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_count</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_minor_newobj</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_minor_malloc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_minor_method</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_minor_capi</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_minor_stress</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_major_nofree</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_major_oldgen</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_major_shady</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_major_force</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_major_oldmalloc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_isptr_trial</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_isptr_range</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_isptr_align</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>gc_isptr_maybe</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_newobj</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_newobj_slowpath</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_newobj_wb_unprotected</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_free</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_promote</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_wb_unprotect</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_obj_embed</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_obj_transient</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_obj_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_str_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_str_embed</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_str_shared</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_str_nofree</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_str_fstr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_embed</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_transient</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_extracapa</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_shared_create</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_shared</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_ary_shared_root_occupied</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_empty</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_1</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_2</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_3</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_4</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_5_8</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_g8</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_null</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_ar</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_st</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_transient</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_hash_force_convert</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_struct_embed</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_struct_transient</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_struct_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_data_empty</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_data_xfree</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_data_imm_free</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_data_zombie</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_match_under4</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_match_ge4</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_match_ge8</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_match_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_iclass_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_class_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_module_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_bignum_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_bignum_embed</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_float</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_complex</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_rational</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_regexp_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_file_ptr</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_symbol</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_ment</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_iseq</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_env</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_tmpbuf</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_ast</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_cref</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_svar</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_throw_data</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_ifunc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_memo</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_parser_strterm</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_callinfo</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>obj_imemo_callcache</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>artable_hint_hit</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>artable_hint_miss</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>artable_hint_notfound</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>heap_xmalloc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>heap_xrealloc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>heap_xfree</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>theap_alloc</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>theap_alloc_fail</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>theap_evacuate</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_exec</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_exec_not_added</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_exec_not_ready</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_exec_not_compiled</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_exec_call_func</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_add_iseq_to_process</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_unload_units</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_frame_VM2VM</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_frame_VM2JT</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_frame_JT2JT</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_frame_JT2VM</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel_ivar_inline</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel_exivar_inline</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel_send_inline</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel_opt_insn</argument>)</argument_list></macro> 

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_cancel_invalidate_all</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_length_unit_queue</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_length_active_units</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_length_compact_units</argument>)</argument_list></macro>

<macro><name>RB_DEBUG_COUNTER</name><argument_list>(<argument>mjit_length_stale_units</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>RB_DEBUG_COUNTER</name><argument_list>(<argument><expr><name>mjit_compile_failures</name></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_DEBUG_COUNTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DEBUG_COUNTER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>USE_DEBUG_COUNTER</name></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"USE_DEBUG_COUNTER is not supported by other than __GNUC__"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

enum <name>rb_debug_counter_type</name> <block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_DEBUG_COUNTER_##name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> __FILE__</cpp:include>

<expr><name>RB_DEBUG_COUNTER_MAX</name></expr>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_DEBUG_COUNTER</name></cpp:undef>

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_DEBUG_COUNTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name><name>rb_debug_counter</name><index>[]</index></name></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>rb_debug_counter_add</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>rb_debug_counter_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rb_debug_counter</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>]</index></name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cond</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>rb_debug_counter_max</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>rb_debug_counter_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rb_debug_counter</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>]</index></name> <operator>&lt;</operator> <name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rb_debug_counter</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>rb_debug_counter_reset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_debug_counter_show</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_debug_counter_add(RB_DEBUG_COUNTER_##type, 1, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC_UNLESS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!rb_debug_counter_add(RB_DEBUG_COUNTER_##type, 1, !(cond)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC_IF</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_debug_counter_add(RB_DEBUG_COUNTER_##type, 1, (cond))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_ADD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_debug_counter_add(RB_DEBUG_COUNTER_##type, (num), 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_SETMAX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_debug_counter_max(RB_DEBUG_COUNTER_##type, (unsigned int)(num))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC_UNLESS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cond)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_INC_IF</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cond)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_ADD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DEBUG_COUNTER_SETMAX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>rb_debug_counter_show_results</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>size_t</name></type> <name>ruby_debug_counter_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>counters_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_debug_counter_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_debug_counter_show_at_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
