<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\siphash.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT64_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>sip_uint64_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t</name></cpp:macro> <cpp:value>sip_uint64_t</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint64_t</name></type> <name>sip_uint64_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>msglen_byte</name></decl>;</decl_stmt>

}</block></struct></type> <name>sip_state</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sip_interface_st</name></name></type> <name>sip_interface</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>sip_state</name></type> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>sip_interface</name> <modifier>*</modifier></type><name>methods</name></decl>;</decl_stmt>

}</block></struct></type> <name>sip_hash</name>;</typedef>

<function_decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>sip_hash_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>sip_hash_init</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sip_hash_update</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sip_hash_final</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sip_hash_final_integer</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sip_hash_digest</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>digest_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sip_hash_digest_integer</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sip_hash_free</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sip_hash_dump</name><parameter_list>(<parameter><decl><type><name>sip_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>uint64_t sip_hash13(const uint8_t key[<literal type="number">16</literal>], const uint8_t *data, size_t len)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</unit>
