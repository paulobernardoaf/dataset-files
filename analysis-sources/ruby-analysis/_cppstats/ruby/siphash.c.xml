<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\siphash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"siphash.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIP_HASH_STREAMING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_HASH_STREAMING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>__LITTLE_ENDIAN</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>BYTE_ORDER</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE_ENDIAN</name></cpp:macro> <cpp:value>__LITTLE_ENDIAN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN</name></cpp:macro> <cpp:value>__BIG_ENDIAN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>LITTLE_ENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lo</name></cpp:macro> <cpp:value>u32[0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hi</name></cpp:macro> <cpp:value>u32[1]</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>BIG_ENDIAN</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hi</name></cpp:macro> <cpp:value>u32[0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lo</name></cpp:macro> <cpp:value>u32[1]</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Only strictly little or big endian supported"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mc68020__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_WORD_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_WORD_ACCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO32_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)((p)[0]) ) | ((uint32_t)((p)[1]) &lt;&lt; 8) | ((uint32_t)((p)[2]) &lt;&lt; 16) | ((uint32_t)((p)[3]) &lt;&lt; 24))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U32TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (p)[0] = (uint8_t)((v) ); (p)[1] = (uint8_t)((v) &gt;&gt; 8); (p)[2] = (uint8_t)((v) &gt;&gt; 16); (p)[3] = (uint8_t)((v) &gt;&gt; 24); } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT64_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)U8TO32_LE(p) | ((uint64_t)U8TO32_LE((p) + 4)) &lt;&lt; 32 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { U32TO8_LE((p), (uint32_t)((v) )); U32TO8_LE((p) + 4, (uint32_t)((v) &gt;&gt; 32)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL64</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &lt;&lt; (s)) | ((v) &gt;&gt; (64 - (s)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = ROTL64((v), (s)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) += (s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) ^= (s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR64_INT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) ^= (x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u8to64_le(p)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>

<name>u8to64_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <call><name>U8TO32_LE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <call><name>U8TO32_LE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u64to8_le(p, v)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>u64to8_le</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>U32TO8_LE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>U32TO8_LE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) &gt; 32 ? rotl64_swap(rotl64_to(&amp;(v), (s) - 32)) : (s) == 32 ? rotl64_swap(&amp;(v)) : rotl64_to(&amp;(v), (s)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <modifier>*</modifier></type>

<name>rotl64_to</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>uhi</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ulo</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <name>uhi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <name>ulo</name></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <modifier>*</modifier></type>

<name>rotl64_swap</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>hi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add64_to(&amp;(v), (s))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <modifier>*</modifier></type>

<name>add64_to</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>lo</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hi</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR64_TO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xor64_to(&amp;(v), (s))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <modifier>*</modifier></type>

<name>xor64_to</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lo</name></name> <operator>^=</operator> <name><name>s</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hi</name></name> <operator>^=</operator> <name><name>s</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR64_INT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).lo ^= (x))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<union><specifier>static</specifier> <specifier>const</specifier> union <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>bin</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>sip_init_state_bin</name> <init>= <expr><block>{<expr><literal type="string">"uespemos""</literal><name>modnarod</name><literal type="string">""</literal><name>arenegyl</name><literal type="string">""</literal><name>setybdet</name><literal type="string">"};

#define sip_init_state sip_init_state_bin.u64

#if SIP_HASH_STREAMING

struct sip_interface_st {

void (*init)(sip_state *s, const uint8_t *key);

void (*update)(sip_state *s, const uint8_t *data, size_t len);

void (*final)(sip_state *s, uint64_t *digest);

};

static void int_sip_init(sip_state *state, const uint8_t *key);

static void int_sip_update(sip_state *state, const uint8_t *data, size_t len);

static void int_sip_final(sip_state *state, uint64_t *digest);

static const sip_interface sip_methods = {

int_sip_init,

int_sip_update,

int_sip_final

};

#endif /* SIP_HASH_STREAMING */

#define SIP_COMPRESS(v0, v1, v2, v3) do { ADD64_TO((v0), (v1)); ADD64_TO((v2), (v3)); ROTL64_TO((v1), 13); ROTL64_TO((v3), 16); XOR64_TO((v1), (v0)); XOR64_TO((v3), (v2)); ROTL64_TO((v0), 32); ADD64_TO((v2), (v1)); ADD64_TO((v0), (v3)); ROTL64_TO((v1), 17); ROTL64_TO((v3), 21); XOR64_TO((v1), (v2)); XOR64_TO((v3), (v0)); ROTL64_TO((v2), 32); } while(0)

#if SIP_HASH_STREAMING

static void

int_sip_dump(sip_state *state)

{

int v;

for (v = 0; v &lt; 4; v++) {

#if HAVE_UINT64_T

printf("</literal><name>v</name><operator>%</operator><name>d</name><operator>:</operator> <operator>%</operator><literal type="string">" PRIx64 "</literal><operator>\</operator><name>n</name><literal type="string">", v, state-&gt;v[v]);

#else

printf("</literal><name>v</name><operator>%</operator><name>d</name><operator>:</operator> <operator>%</operator><literal type="string">" PRIx32 "</literal><operator>%</operator><literal type="number">.8</literal><literal type="string">" PRIx32 "</literal><operator>\</operator><name>n</name><literal type="string">"</literal></expr></block></expr></init></decl></union>, v, state-&gt;v[v].hi, state-&gt;v[v].lo);

#endif

}

}

static void

int_sip_init(sip_state *state, const uint8_t key[16])

{

uint64_t k0, k1;

k0 = U8TO64_LE(key);

k1 = U8TO64_LE(key + sizeof(uint64_t));

state-&gt;v[0] = k0; XOR64_TO(state-&gt;v[0], sip_init_state[0]);

state-&gt;v[1] = k1; XOR64_TO(state-&gt;v[1], sip_init_state[1]);

state-&gt;v[2] = k0; XOR64_TO(state-&gt;v[2], sip_init_state[2]);

state-&gt;v[3] = k1; XOR64_TO(state-&gt;v[3], sip_init_state[3]);

}

static inline void

int_sip_round(sip_state *state, int n)

{

int i;

for (i = 0; i &lt; n; i++) {

SIP_COMPRESS(state-&gt;v[0], state-&gt;v[1], state-&gt;v[2], state-&gt;v[3]);

}

}

static inline void

int_sip_update_block(sip_state *state, uint64_t m)

{

XOR64_TO(state-&gt;v[3], m);

int_sip_round(state, state-&gt;c);

XOR64_TO(state-&gt;v[0], m);

}

static inline void

int_sip_pre_update(sip_state *state, const uint8_t **pdata, size_t *plen)

{

int to_read;

uint64_t m;

if (!state-&gt;buflen) return;

to_read = sizeof(uint64_t) - state-&gt;buflen;

memcpy(state-&gt;buf + state-&gt;buflen, *pdata, to_read);

m = U8TO64_LE(state-&gt;buf);

int_sip_update_block(state, m);

*pdata += to_read;

*plen -= to_read;

state-&gt;buflen = 0;

}

static inline void

int_sip_post_update(sip_state *state, const uint8_t *data, size_t len)

{

uint8_t r = len % sizeof(uint64_t);

if (r) {

memcpy(state-&gt;buf, data + len - r, r);

state-&gt;buflen = r;

}

}

static void

int_sip_update(sip_state *state, const uint8_t *data, size_t len)

{

uint64_t *end;

uint64_t *data64;

state-&gt;msglen_byte = state-&gt;msglen_byte + (len % 256);

data64 = (uint64_t *) data;

int_sip_pre_update(state, &amp;data, &amp;len);

end = data64 + (len / sizeof(uint64_t));

#if BYTE_ORDER == LITTLE_ENDIAN

while (data64 != end) {

int_sip_update_block(state, *data64++);

}

#elif BYTE_ORDER == BIG_ENDIAN

{

uint64_t m;

uint8_t *data8 = data;

for (; data8 != (uint8_t *) end; data8 += sizeof(uint64_t)) {

m = U8TO64_LE(data8);

int_sip_update_block(state, m);

}

}

#endif

int_sip_post_update(state, data, len);

}

static inline void

int_sip_pad_final_block(sip_state *state)

{

int i;

/* pad with 0's and finalize with msg_len mod 256 */

for (i = state-&gt;buflen; i &lt; sizeof(uint64_t); i++) {

state-&gt;buf[i] = 0x00;

}

state-&gt;buf[sizeof(uint64_t) - 1] = state-&gt;msglen_byte;

}

static void

int_sip_final(sip_state *state, uint64_t *digest)

{

uint64_t m;

int_sip_pad_final_block(state);

m = U8TO64_LE(state-&gt;buf);

int_sip_update_block(state, m);

XOR64_INT(state-&gt;v[2], 0xff);

int_sip_round(state, state-&gt;d);

*digest = state-&gt;v[0];

XOR64_TO(*digest, state-&gt;v[1]);

XOR64_TO(*digest, state-&gt;v[2]);

XOR64_TO(*digest, state-&gt;v[3]);

}

sip_hash *

sip_hash_new(const uint8_t key[16], int c, int d)

{

sip_hash *h = NULL;

if (!(h = (sip_hash *) malloc(sizeof(sip_hash)))) return NULL;

return sip_hash_init(h, key, c, d);

}

sip_hash *

sip_hash_init(sip_hash *h, const uint8_t key[16], int c, int d)

{

h-&gt;state-&gt;c = c;

h-&gt;state-&gt;d = d;

h-&gt;state-&gt;buflen = 0;

h-&gt;state-&gt;msglen_byte = 0;

h-&gt;methods = &amp;sip_methods;

h-&gt;methods-&gt;init(h-&gt;state, key);

return h;

}

int

sip_hash_update(sip_hash *h, const uint8_t *msg, size_t len)

{

h-&gt;methods-&gt;update(h-&gt;state, msg, len);

return 1;

}

int

sip_hash_final(sip_hash *h, uint8_t **digest, size_t* len)

{

uint64_t digest64;

uint8_t *ret;

h-&gt;methods-&gt;final(h-&gt;state, &amp;digest64);

if (!(ret = (uint8_t *)malloc(sizeof(uint64_t)))) return 0;

U64TO8_LE(ret, digest64);

*len = sizeof(uint64_t);

*digest = ret;

return 1;

}

int

sip_hash_final_integer(sip_hash *h, uint64_t *digest)

{

h-&gt;methods-&gt;final(h-&gt;state, digest);

return 1;

}

int

sip_hash_digest(sip_hash *h, const uint8_t *data, size_t data_len, uint8_t **digest, size_t *digest_len)

{

if (!sip_hash_update(h, data, data_len)) return 0;

return sip_hash_final(h, digest, digest_len);

}

int

sip_hash_digest_integer(sip_hash *h, const uint8_t *data, size_t data_len, uint64_t *digest)

{

if (!sip_hash_update(h, data, data_len)) return 0;

return sip_hash_final_integer(h, digest);

}

void

sip_hash_free(sip_hash *h)

{

free(h);

}

void

sip_hash_dump(sip_hash *h)

{

int_sip_dump(h-&gt;state);

}

#endif /* SIP_HASH_STREAMING */

#define SIP_ROUND(m, v0, v1, v2, v3) do { XOR64_TO((v3), (m)); SIP_COMPRESS(v0, v1, v2, v3); XOR64_TO((v0), (m)); } while (0)

uint64_t

sip_hash13(const uint8_t key[16], const uint8_t *data, size_t len)

{

uint64_t k0, k1;

uint64_t v0, v1, v2, v3;

uint64_t m, last;

const uint8_t *end = data + len - (len % sizeof(uint64_t));

k0 = U8TO64_LE(key);

k1 = U8TO64_LE(key + sizeof(uint64_t));

v0 = k0; XOR64_TO(v0, sip_init_state[0]);

v1 = k1; XOR64_TO(v1, sip_init_state[1]);

v2 = k0; XOR64_TO(v2, sip_init_state[2]);

v3 = k1; XOR64_TO(v3, sip_init_state[3]);

#if BYTE_ORDER == LITTLE_ENDIAN &amp;&amp; UNALIGNED_WORD_ACCESS

{

uint64_t *data64 = (uint64_t *)data;

while (data64 != (uint64_t *) end) {

m = *data64++;

SIP_ROUND(m, v0, v1, v2, v3);

}

}

#else

for (; data != end; data += sizeof(uint64_t)) {

m = U8TO64_LE(data);

SIP_ROUND(m, v0, v1, v2, v3);

}

#endif

#if defined(HAVE_UINT64_T)
last = (uint64_t)len &lt;&lt; 56;

#define OR_BYTE(n) (last |= ((uint64_t) end[n]) &lt;&lt; ((n) * 8))

#else

last.hi = len &lt;&lt; 24;

last.lo = 0;

#define OR_BYTE(n) do { if (n &gt;= 4) last.hi |= ((uint32_t) end[n]) &lt;&lt; ((n) &gt;= 4 ? (n) * 8 - 32 : 0); else last.lo |= ((uint32_t) end[n]) &lt;&lt; ((n) &gt;= 4 ? 0 : (n) * 8); } while (0)

#endif

switch (len % sizeof(uint64_t)) {

case 7:

OR_BYTE(6);

case 6:

OR_BYTE(5);

case 5:

OR_BYTE(4);

case 4:

#if BYTE_ORDER == LITTLE_ENDIAN &amp;&amp; UNALIGNED_WORD_ACCESS

#if HAVE_UINT64_T

last |= (uint64_t) ((uint32_t *) end)[0];

#else

last.lo |= ((uint32_t *) end)[0];

#endif

break;

#else

OR_BYTE(3);

#endif

case 3:

OR_BYTE(2);

case 2:

OR_BYTE(1);

case 1:

OR_BYTE(0);

break;

case 0:

break;

}

SIP_ROUND(last, v0, v1, v2, v3);

XOR64_INT(v2, 0xff);

SIP_COMPRESS(v0, v1, v2, v3);

SIP_COMPRESS(v0, v1, v2, v3);

SIP_COMPRESS(v0, v1, v2, v3);

XOR64_TO(v0, v1);

XOR64_TO(v0, v2);

XOR64_TO(v0, v3);

return v0;

}

</unit>
