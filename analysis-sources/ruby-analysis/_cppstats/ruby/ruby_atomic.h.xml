<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ruby_atomic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GCC_ATOMIC_BUILTINS</name></expr></cpp:elif>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>rb_atomic_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__atomic_exchange_n(&amp;(var), (val), __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_fetch_add(&amp;(var), 1, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_fetch_sub(&amp;(var), 1, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_fetch_or(&amp;(var), (val), __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_exchange_n(&amp;(var), (val), __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK( __typeof__(var) oldvaldup = (oldval); __atomic_compare_exchange_n(&amp;(var), &amp;oldvaldup, (newval), 0, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); oldvaldup )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_fetch_add(&amp;(var), (val), __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_fetch_sub(&amp;(var), (val), __ATOMIC_SEQ_CST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ATOMIC_GENERIC_MACRO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GCC_SYNC_BUILTINS</name></expr></cpp:elif>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>rb_atomic_t</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__sync_lock_test_and_set(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_fetch_and_add(&amp;(var), 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_fetch_and_sub(&amp;(var), 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_fetch_and_or(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_lock_test_and_set(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_val_compare_and_swap(&amp;(var), (oldval), (newval))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_fetch_and_add(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_fetch_and_sub(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ATOMIC_GENERIC_MACRO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1300</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedOr</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>LONG</name></type> <name>rb_atomic_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchange(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedIncrement(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedDecrement(&amp;(var))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__("lock\n\t" "orl\t%1, %0" : "=m"(var) : "Ir"(val))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_BEFORE</name><argument_list>(<argument><expr><literal type="number">1300</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_w32_atomic_or(&amp;(var), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rb_w32_atomic_or</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>rb_atomic_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm mov eax, var;</asm>

<asm>__asm mov ecx, val;</asm>

<asm>__asm lock or [eax], ecx;</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> unsupported architecture</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_InterlockedOr(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchange(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedCompareExchange(&amp;(var), (newval), (oldval))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MSC_VERSION_BEFORE</name><argument_list>(<argument><expr><literal type="number">1300</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_atomic_t</name></type>

<name>rb_w32_atomic_cas</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>rb_atomic_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>rb_atomic_t</name><operator>)</operator><call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>(</operator><name>PVOID</name> <operator>*</operator><operator>)</operator><name>var</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name>newval</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name>oldval</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ATOMIC_CAS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_w32_atomic_cas(&amp;(var), (oldval), (newval))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchangeAdd64((LONG_LONG *)&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchangeAdd64((LONG_LONG *)&amp;(var), -(LONG)(val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedIncrement64(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedDecrement64(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchange64(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedCompareExchange64(&amp;(var), (newval), (oldval))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchangeAdd((LONG *)&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchangeAdd((LONG *)&amp;(var), -(LONG)(val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedIncrement((LONG *)&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedDecrement((LONG *)&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchange((LONG *)&amp;(var), (val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>InterlockedExchangePointer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InterlockedExchangePointer((PVOID volatile *)&amp;(var), (PVOID)(val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>rb_atomic_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)atomic_swap_uint(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_inc_uint(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_dec_uint(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_or_uint(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_swap_uint(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_cas_uint(&amp;(var), (oldval), (newval))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_I32LPx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_long(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_long(&amp;(var), -(val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_inc_ulong(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_dec_ulong(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_swap_ulong(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_cas_ulong(&amp;(var), (oldval), (val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_int(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_int(&amp;(var), -(val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_inc_uint(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_dec_uint(&amp;(var))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_swap_uint(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>rb_atomic_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_RUBY_ATOMIC_OPS</name></cpp:macro></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>rb_atomic_t</name></type> <name>ruby_atomic_exchange</name><parameter_list>(<parameter><decl><type><name>rb_atomic_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>rb_atomic_t</name></type> <name>ruby_atomic_compare_and_swap</name><parameter_list>(<parameter><decl><type><name>rb_atomic_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>rb_atomic_t</name></type> <name>cmp</name></decl></parameter>,

<parameter><decl><type><name>rb_atomic_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)((var) = (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var)++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var)--)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) |= (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_exchange(&amp;(var), (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_compare_and_swap(&amp;(var), (oldval), (newval))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_ADD</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)((var) += (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_SUB</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)((var) -= (val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_size_exchange(&amp;(var), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>ruby_atomic_size_exchange</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_SIZE_INC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_INC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_INC(var)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_SIZE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_DEC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_DEC(var)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_SIZE_EXCHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_EXCHANGE(var, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_SIZE_CAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SIZE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_CAS(var, oldval, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_ATOMIC_GENERIC_MACRO</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_PTR_EXCHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_EXCHANGE(var, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_PTR_CAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>newval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_CAS(var, oldval, newval)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_VALUE_EXCHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_EXCHANGE(var, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_VALUE_CAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_CAS(var, oldval, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_PTR_EXCHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_SIZE_T</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void *)ATOMIC_SIZE_EXCHANGE(*(size_t *)&amp;(var), (size_t)(val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_ptr_exchange((const void **)&amp;(var), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_atomic_ptr_exchange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_PTR_CAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_SIZE_T</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void *)ATOMIC_SIZE_CAS(*(size_t *)&amp;(var), (size_t)(oldval), (size_t)(val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_PTR_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_ptr_cas(&amp;(var), (oldval), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_atomic_ptr_cas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_VALUE_EXCHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>==</operator> <name>SIZEOF_SIZE_T</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_SIZE_EXCHANGE(*(size_t *)&amp;(var), (size_t)(val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_EXCHANGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_value_exchange(&amp;(var), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>ruby_atomic_value_exchange</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_VALUE_CAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>==</operator> <name>SIZEOF_SIZE_T</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_SIZE_CAS(*(size_t *)&amp;(var), (size_t)(oldval), (size_t)(val))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VALUE_CAS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>oldval</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_atomic_value_cas(&amp;(var), (oldval), (val))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>ruby_atomic_value_cas</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
