<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\iseq.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>int</name></type> <name><name>ruby_api_version</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_MAJOR_VERSION</name></cpp:macro> <cpp:value>((unsigned int)ruby_api_version[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_MINOR_VERSION</name></cpp:macro> <cpp:value>((unsigned int)ruby_api_version[1])</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_iseq_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>rb_iseq_struct</name></name></type> <name>rb_iseq_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_iseq_t</name></cpp:macro> <cpp:value>rb_iseq_t</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ID</name></type> <name><name>rb_iseq_shared_exc_local_tbl</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_COVERAGE</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>iseq-&gt;body-&gt;variable.coverage</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_COVERAGE_SET</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>, <parameter><type><name>cov</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_WRITE(iseq, &amp;iseq-&gt;body-&gt;variable.coverage, cov)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_LINE_COVERAGE</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RARRAY_AREF(ISEQ_COVERAGE(iseq), COVERAGE_INDEX_LINES)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_BRANCH_COVERAGE</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RARRAY_AREF(ISEQ_COVERAGE(iseq), COVERAGE_INDEX_BRANCHES)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_PC2BRANCHINDEX</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>iseq-&gt;body-&gt;variable.pc2branchindex</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_PC2BRANCHINDEX_SET</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_WRITE(iseq, &amp;iseq-&gt;body-&gt;variable.pc2branchindex, h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_FLIP_CNT</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(iseq)-&gt;body-&gt;variable.flip_count</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_snum_t</name></type>

<name>ISEQ_FLIP_CNT_INCREMENT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_snum_t</name></type> <name>cnt</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>flip_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>flip_count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>ISEQ_ORIGINAL_ISEQ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>original_iseq</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>ISEQ_ORIGINAL_ISEQ_CLEAR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>original_iseq</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>original_iseq</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>ISEQ_ORIGINAL_ISEQ_ALLOC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>variable</name><operator>.</operator><name>original_iseq</name></name> <operator>=</operator>

<call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_TRACE_EVENTS</name></cpp:macro> <cpp:value>(RUBY_EVENT_LINE | RUBY_EVENT_CLASS | RUBY_EVENT_END | RUBY_EVENT_CALL | RUBY_EVENT_RETURN| RUBY_EVENT_B_CALL| RUBY_EVENT_B_RETURN| RUBY_EVENT_COVERAGE_LINE| RUBY_EVENT_COVERAGE_BRANCH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_NOT_LOADED_YET</name></cpp:macro> <cpp:value>IMEMO_FL_USER1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_USE_COMPILE_DATA</name></cpp:macro> <cpp:value>IMEMO_FL_USER2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_TRANSLATED</name></cpp:macro> <cpp:value>IMEMO_FL_USER3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_MARKABLE_ISEQ</name></cpp:macro> <cpp:value>IMEMO_FL_USER4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ_EXECUTABLE_P</name><parameter_list>(<parameter><type><name>iseq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FL_TEST_RAW((iseq), ISEQ_NOT_LOADED_YET | ISEQ_USE_COMPILE_DATA) == 0)</cpp:value></cpp:define>

<struct>struct <name>iseq_compile_data</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>err_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>catch_table_ary</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_label_data</name></name> <modifier>*</modifier></type><name>start_label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_label_data</name></name> <modifier>*</modifier></type><name>end_label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_label_data</name></name> <modifier>*</modifier></type><name>redo_label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>current_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_ensure_node_stack</name></name> <modifier>*</modifier></type><name>ensure_node_stack</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>storage_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>storage_current</name></decl>;</decl_stmt>

}</block> <decl><name>node</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>storage_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>storage_current</name></decl>;</decl_stmt>

}</block> <decl><name>insn</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>loopval_popped</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>label_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>node_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ci_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_compile_option_t</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>ivar_cache_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_builtin_function</name></name> <modifier>*</modifier></type><name>builtin_function_table</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUPPORT_JOKE</name></expr></cpp:if>

<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>labels_table</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>iseq_compile_data</name></name> <modifier>*</modifier></type>

<name>ISEQ_COMPILE_DATA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISEQ_USE_COMPILE_DATA</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>iseq</name><operator>-&gt;</operator><name>aux</name><operator>.</operator><name>compile_data</name></name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>ISEQ_COMPILE_DATA_ALLOC</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>aux</name><operator>.</operator><name>compile_data</name></name> <operator>=</operator> <call><name>ZALLOC</name><argument_list>(<argument><expr>struct <name>iseq_compile_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISEQ_USE_COMPILE_DATA</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>ISEQ_COMPILE_DATA_CLEAR</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ISEQ_USE_COMPILE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iseq</name><operator>-&gt;</operator><name>aux</name><operator>.</operator><name>compile_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type>

<name>iseq_imemo_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><call><name>rb_imemo_new</name><argument_list>(<argument><expr><name>imemo_iseq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_ibf_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_ibf_load_iseq_complete</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_iseq_ibf_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_iseq_ibf_load_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_ibf_load_extra_data</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_init_trace</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_iseq_add_local_tracepoint_recursively</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>turnon_events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>target_line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_iseq_remove_local_tracepoint_recursively</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_iseq_load_iseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_INSN_INFO_TABLE_IMPL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>

<function_decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>rb_iseq_insns_info_decode_positions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>VALUE</name></type> <name>rb_iseq_compile_node</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_compile_callback</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_iseq_new_with_callback_callback_func</name></name> <modifier>*</modifier></type> <name>ifunc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rb_iseq_original_iseq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_build_from_ary</name><parameter_list>(<parameter><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>misc</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>locals</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>exception</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_mark_insn_storage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_proc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>rb_iseq_line_no</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_trace_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>turnon_events</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_trace_set_all</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>turnon_events</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_insns_info_encode_positions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>rb_iseq_constant_body</name></name> <modifier>*</modifier></type><name>rb_iseq_constant_body_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseqw_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_iseqw_to_iseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>iseqw</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_absolute_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_base_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_first_lineno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_method_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_code_location</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first_lineno</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first_column</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_lineno</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_column</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_iseq_remove_coverage_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_method_iseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>body</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_proc_get_iseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_proc</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>rb_compile_option_struct</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>inline_const_cache</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>peephole_optimization</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tailcall_optimization</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>specialized_instruction</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>operands_unification</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>instructions_unification</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stack_caching</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frozen_string_literal</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>debug_frozen_string_literal</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>coverage_enabled</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>debug_level</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>iseq_insn_info_entry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>line_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>iseq_catch_table_entry</name> <block>{

<enum>enum <name>catch_type</name> <block>{

<decl><name>CATCH_TYPE_RESCUE</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>CATCH_TYPE_ENSURE</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>CATCH_TYPE_RETRY</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>CATCH_TYPE_BREAK</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>CATCH_TYPE_REDO</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>CATCH_TYPE_NEXT</name> <init>= <macro><name>INT2FIX</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro></init></decl>

}</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sp</name></decl>;</decl_stmt>

}</block>;</struct>

<macro><name>PACKED_STRUCT_UNALIGNED</name><argument_list>(<argument>struct iseq_catch_table {

unsigned int size;

struct iseq_catch_table_entry entries[FLEX_ARY_LEN];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>iseq_catch_table_bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<enum>enum <block>{

<decl><name>catch_table_entry_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iseq_catch_table_entry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>,

<decl><name>catch_table_entries_max</name> <init>= <expr><operator>(</operator><name>INT_MAX</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>iseq_catch_table</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>catch_table_entry_size</name></expr></init></decl>

}</block>;</enum>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>catch_table_entries_max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"too large iseq_catch_table - %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>iseq_catch_table</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>n</name> <operator>*</operator> <name>catch_table_entry_size</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_ISEQ_COMPILE_DATA_STORAGE_BUFF_SIZE</name></cpp:macro> <cpp:value>(512)</cpp:value></cpp:define>

<struct>struct <name>iseq_compile_data_storage</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>iseq_compile_data_storage</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>FLEX_ARY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>defined_type</name> <block>{

<decl><name>DEFINED_NOT_DEFINED</name></decl>,

<decl><name>DEFINED_NIL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>DEFINED_IVAR</name></decl>,

<decl><name>DEFINED_LVAR</name></decl>,

<decl><name>DEFINED_GVAR</name></decl>,

<decl><name>DEFINED_CVAR</name></decl>,

<decl><name>DEFINED_CONST</name></decl>,

<decl><name>DEFINED_METHOD</name></decl>,

<decl><name>DEFINED_YIELD</name></decl>,

<decl><name>DEFINED_ZSUPER</name></decl>,

<decl><name>DEFINED_SELF</name></decl>,

<decl><name>DEFINED_TRUE</name></decl>,

<decl><name>DEFINED_FALSE</name></decl>,

<decl><name>DEFINED_ASGN</name></decl>,

<decl><name>DEFINED_EXPR</name></decl>,

<decl><name>DEFINED_IVAR2</name></decl>,

<decl><name>DEFINED_REF</name></decl>,

<decl><name>DEFINED_FUNC</name></decl>,

<decl><name>DEFINED_CONST_FROM</name></decl>

}</block>;</enum>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_defined_string</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>defined_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iseq_local_variables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>)</parameter_list>;</function_decl>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

</unit>
