<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\hrtime.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_HRTIME_PER_USEC</name></cpp:macro> <cpp:value>((rb_hrtime_t)1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_HRTIME_PER_MSEC</name></cpp:macro> <cpp:value>(RB_HRTIME_PER_USEC * (rb_hrtime_t)1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_HRTIME_PER_SEC</name></cpp:macro> <cpp:value>(RB_HRTIME_PER_MSEC * (rb_hrtime_t)1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_HRTIME_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MY_RUBY_BUILD_MAY_TIME_TRAVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int128_t</name></type> <name>rb_hrtime_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint64_t</name></type> <name>rb_hrtime_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>rb_hrtime_t</name></type> <name>rb_hrtime_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_hrtime_mul</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_MUL_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_mul_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RB_HRTIME_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <name>RB_HRTIME_MAX</name> <operator>/</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>RB_HRTIME_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_hrtime_add</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_ADD_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_add_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RB_HRTIME_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>RB_HRTIME_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_timeval2hrtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>s</name> <init>= <expr><call><name>rb_hrtime_mul</name><argument_list>(<argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>RB_HRTIME_PER_SEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>u</name> <init>= <expr><call><name>rb_hrtime_mul</name><argument_list>(<argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name></expr></argument>, <argument><expr><name>RB_HRTIME_PER_USEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_hrtime_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_timespec2hrtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>s</name> <init>= <expr><call><name>rb_hrtime_mul</name><argument_list>(<argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>RB_HRTIME_PER_SEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_hrtime_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_msec2hrtime</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>msec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_hrtime_mul</name><argument_list>(<argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name>msec</name></expr></argument>, <argument><expr><name>RB_HRTIME_PER_MSEC</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_hrtime_t</name></type>

<name>rb_sec2hrtime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_hrtime_mul</name><argument_list>(<argument><expr><operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><name>sec</name></expr></argument>, <argument><expr><name>RB_HRTIME_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type>

<name>rb_hrtime2timespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type><name>hrt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hrt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>hrt</name> <operator>/</operator> <name>RB_HRTIME_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>hrt</name> <operator>%</operator> <name>RB_HRTIME_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ts</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type>

<name>rb_hrtime2timeval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type><name>hrt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hrt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>hrt</name> <operator>/</operator> <name>RB_HRTIME_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>hrt</name> <operator>%</operator> <name>RB_HRTIME_PER_SEC</name><operator>)</operator><operator>/</operator><name>RB_HRTIME_PER_USEC</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>tv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
