<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\complex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/class.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/complex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/numeric.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby_assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name></cpp:macro> <cpp:value>INT2FIX(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE</name></cpp:macro> <cpp:value>INT2FIX(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWO</name></cpp:macro> <cpp:value>INT2FIX(2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFLOAT_0</name></cpp:macro> <cpp:value>DBL2NUM(0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>RFLOAT_0</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNBIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>signbit</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cComplex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_abs</name></decl>, <decl><type ref="prev"/><name>id_arg</name></decl>,

<decl><type ref="prev"/><name>id_denominator</name></decl>, <decl><type ref="prev"/><name>id_numerator</name></decl>,

<decl><type ref="prev"/><name>id_real_p</name></decl>, <decl><type ref="prev"/><name>id_i_real</name></decl>, <decl><type ref="prev"/><name>id_i_imag</name></decl>,

<decl><type ref="prev"/><name>id_finite_p</name></decl>, <decl><type ref="prev"/><name>id_infinite_p</name></decl>, <decl><type ref="prev"/><name>id_rationalize</name></decl>,

<decl><type ref="prev"/><name>id_PI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_to_i</name></cpp:macro> <cpp:value>idTo_i</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_to_r</name></cpp:macro> <cpp:value>idTo_r</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_negate</name></cpp:macro> <cpp:value>idUMinus</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_expt</name></cpp:macro> <cpp:value>idPow</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_to_f</name></cpp:macro> <cpp:value>idTo_f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_quo</name></cpp:macro> <cpp:value>idQuo</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_fdiv</name></cpp:macro> <cpp:value>idFdiv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_boolcast</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ? Qtrue : Qfalse)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fun1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inline static VALUE f_##n(VALUE x){return rb_funcall(x, id_##n, 0);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fun2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inline static VALUE f_##n(VALUE x, VALUE y){return rb_funcall(x, id_##n, 1, y);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESERVE_SIGNEDZERO</name></cpp:macro></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_add</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_float_plus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_rational_plus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_gt_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>x</name> <operator>&gt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>y</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_int_gt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_float_gt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>cmp</name> <init>= <expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_rational_cmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>idMULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><name>idMULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_float_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>idMULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_rational_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idMULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idMINUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_int_abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_float_abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_rational_abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_complex_abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>numeric_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>float_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>float_arg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_complex_arg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_float_numerator</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_float_denominator</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_negate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_float_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_rational_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_complex_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_negate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>nucomp_real_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>f_real_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nucomp_real_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_real_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>rb_str_to_dbl</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>fun1</name><argument_list>(<argument>to_r</argument>)</argument_list></macro>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_eqeq_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name> <operator>==</operator> <name>y</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>fun2</name><argument_list>(<argument>expt</argument>)</argument_list></macro>

<macro><name>fun2</name><argument_list>(<argument>fdiv</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>f_quo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_numeric_quo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_float_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_numeric_quo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_quo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_negative_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_num_negative_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_positive_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!f_negative_p(x))</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_zero_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>FLOAT_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_nonzero_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!f_zero_p(x))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_flo_is_finite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_finite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_flo_is_finite_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_finite_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>rb_flo_is_infinite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_infinite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_flo_is_infinite_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_infinite_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_kind_of_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>k_numeric_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_kind_of_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_exact_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!RB_FLOAT_TYPE_P(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_exact_zero_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(k_exact_p(x) &amp;&amp; f_zero_p(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_dat1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct RComplex *dat = RCOMPLEX(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_dat2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct RComplex *adat = RCOMPLEX(x), *bdat = RCOMPLEX(y)</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_new_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>real</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>imag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>NEWOBJ_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>RComplex</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_COMPLEX</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>RGENGC_WB_PROTECTED_COMPLEX</name></expr> ?</condition><then> <expr><name>FL_WB_PROTECTED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RCOMPLEX_SET_REAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RCOMPLEX_SET_IMAG</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_complex_new_bang1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_complex_new_bang2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CANONICALIZATION_FOR_MATHN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>canonicalization</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>RUBY_FUNC_EXPORTED</name> <name>void</name></type>

<name>nucomp_canonicalization</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>canonicalization</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>canonicalization</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>

<name>nucomp_real_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>f_real_p</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"not a real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_canonicalize_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>real</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>imag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>complex_r</name></decl>, <decl><type ref="prev"/><name>complex_i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CANONICALIZATION_FOR_MATHN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name>imag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>canonicalization</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>real</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>complex_r</name> <operator>=</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>real</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>complex_i</name> <operator>=</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>imag</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>complex_r</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>complex_i</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>complex_r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,

<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>real</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>complex_i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,

<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>,

<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,

<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>real</name></decl>, <decl><type ref="prev"/><name>imag</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>real</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imag</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>nucomp_s_canonicalize_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_complex_new2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_canonicalize_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>nucomp_convert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>nucomp_s_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_f_complex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>opts</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raise</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>raise</name> <operator>=</operator> <call><name>rb_opts_exception_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rb_cComplex</name> <operator>&amp;&amp;</operator> <name>a2</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>a1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nucomp_convert</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imp1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inline static VALUE m_##n##_bang(VALUE x){return rb_math_##n(x);}</cpp:value></cpp:define>

<macro><name>imp1</name><argument_list>(<argument>cos</argument>)</argument_list></macro>

<macro><name>imp1</name><argument_list>(<argument>cosh</argument>)</argument_list></macro>

<macro><name>imp1</name><argument_list>(<argument>exp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>m_log_bang</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_math_log</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>imp1</name><argument_list>(<argument>sin</argument>)</argument_list></macro>

<macro><name>imp1</name><argument_list>(<argument>sinh</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>m_cos</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>m_cos_bang</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>m_cos_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>m_cosh_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><call><name>m_sin_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>m_sinh_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>m_sin</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>m_sin_bang</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>m_sin_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>m_cosh_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>m_cos_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>m_sinh_bang</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>f_complex_polar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>RFLOAT_0</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>arg</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>M_PI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>RFLOAT_0</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>==</operator> <name>M_PI_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>RFLOAT_0</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>==</operator> <name>M_PI_2</name><operator>+</operator><name>M_PI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>RFLOAT_0</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>abs</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>real</name> <init>= <expr><name>abs</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>imag</name> <init>= <expr><name>abs</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <name>imag</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nucomp_s_canonicalize_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>m_cos</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>m_sin</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_dbl_complex_new_polar_pi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ang</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>fi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>fr</name> <init>= <expr><call><name>modf</name><argument_list>(<argument><expr><name>ang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>fr</name> <operator>==</operator> <operator>+</operator><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>||</operator> <name>fr</name> <operator>==</operator> <operator>-</operator><literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>modf</name><argument_list>(<argument><expr><name>fi</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>fr</name><operator>)</operator> <operator>^</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>-</operator><name>abs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_complex_new</name><argument_list>(<argument><expr><name>RFLOAT_0</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fr</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>modf</name><argument_list>(<argument><expr><name>fi</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>-</operator><name>abs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ang</name> <operator>*=</operator> <name>M_PI</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_complex_new</name><argument_list>(<argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>abs</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>abs</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_polar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>abs</name></decl>, <decl><type ref="prev"/><name>arg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>abs</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nucomp_real_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>f_complex_polar</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_real</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_imag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>real</name></decl>, <decl><type ref="prev"/><name>imag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>real</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imag</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_minus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>real</name></decl>, <decl><type ref="prev"/><name>imag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>real</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imag</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>safe_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>az</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>az</name> <operator>&amp;&amp;</operator> <name>bz</name> <operator>&amp;&amp;</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><call><name>signbit</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bz</name> <operator>&amp;&amp;</operator> <name>az</name> <operator>&amp;&amp;</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><call><name>signbit</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>comp_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>areal</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>aimag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>breal</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bimag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>real</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>imag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>arzero</name> <init>= <expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>areal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aizero</name> <init>= <expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>aimag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>brzero</name> <init>= <expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>breal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bizero</name> <init>= <expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>bimag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>real</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><call><name>safe_mul</name><argument_list>(<argument><expr><name>areal</name></expr></argument>, <argument><expr><name>breal</name></expr></argument>, <argument><expr><name>arzero</name></expr></argument>, <argument><expr><name>brzero</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>safe_mul</name><argument_list>(<argument><expr><name>aimag</name></expr></argument>, <argument><expr><name>bimag</name></expr></argument>, <argument><expr><name>aizero</name></expr></argument>, <argument><expr><name>bizero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>imag</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>safe_mul</name><argument_list>(<argument><expr><name>areal</name></expr></argument>, <argument><expr><name>bimag</name></expr></argument>, <argument><expr><name>arzero</name></expr></argument>, <argument><expr><name>bizero</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>safe_mul</name><argument_list>(<argument><expr><name>aimag</name></expr></argument>, <argument><expr><name>breal</name></expr></argument>, <argument><expr><name>aizero</name></expr></argument>, <argument><expr><name>brzero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>real</name></decl>, <decl><type ref="prev"/><name>imag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>comp_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_divide</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>,

<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flo</name> <operator>=</operator> <operator>(</operator><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_gt_p</name><argument_list>(<argument><expr><call><name>f_abs</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_abs</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>ONE</name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>ONE</name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_rational_canonicalize</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_rational_canonicalize</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_rational_canonicalize</name><argument_list>(<argument><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_rational_canonicalize</name><argument_list>(<argument><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_raise_zerodiv</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_raise(rb_eZeroDivError, "divided by 0")</cpp:value></cpp:define>

<function><type><name>VALUE</name></type>

<name>rb_complex_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_divide</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>f_quo</name></expr></argument>, <argument><expr><name>id_quo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nucomp_quo</name></cpp:macro> <cpp:value>rb_complex_div</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_fdiv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_divide</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>f_fdiv</name></expr></argument>, <argument><expr><name>id_fdiv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>

<name>f_reciprocal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_quo</name><argument_list>(<argument><expr><name>ONE</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_pow</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>f_complex_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RRATIONAL</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>RRATIONAL</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>other</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>ntheta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <call><name>f_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>m_exp_bang</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><call><name>m_log_bang</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ntheta</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>theta</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><call><name>m_log_bang</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_polar</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>ntheta</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ONE</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>f_reciprocal</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>xr</name> <init>= <expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></init></decl>, <decl><type ref="prev"/><name>xi</name> <init>= <expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></init></decl>, <decl><type ref="prev"/><name>zr</name> <init>= <expr><name>xr</name></expr></init></decl>, <decl><type ref="prev"/><name>zi</name> <init>= <expr><name>xi</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zr</name> <operator>=</operator> <call><name>rb_num_pow</name><argument_list>(<argument><expr><name>zr</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zi</name> <operator>=</operator> <call><name>rb_num_pow</name><argument_list>(<argument><expr><name>zi</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zi</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><name>zr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>zr</name> <operator>=</operator> <name>zi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zi</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>q</name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name>q</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>xr</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xi</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>TWO</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>comp_mul</name><argument_list>(<argument><expr><name>zr</name></expr></argument>, <argument><expr><name>zi</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zr</name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"in a**b, b may be too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <call><name>f_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_polar</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_expt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>theta</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>id_expt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_eqeq_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>f_eqeq_p</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>nucomp_real_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><ternary><condition><expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nucomp_real_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>nucomp_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>idCmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>idCmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_coerce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_real_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>f_complex_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">" can't be coerced into %"</literal><name>PRIsVALUE</name></expr></argument>,

<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>f_abs</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>f_to_f</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>f_abs</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>f_to_f</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_math_hypot</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_abs2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_math_atan2</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_rect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_polar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>f_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_conjugate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_false</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_lcm</name><argument_list>(<argument><expr><call><name>f_denominator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_denominator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>nucomp_denominator</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_complex_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>f_numerator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_div</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><call><name>f_denominator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>f_numerator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>f_div</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><call><name>f_denominator</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>st_index_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_hash</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_hash</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_memhash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ST2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_eql_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><operator>(</operator><call><name>CLASS_OF</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>CLASS_OF</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_signbit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>signbit</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_negative_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>f_tpositive_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>f_signbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>f_format</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>impos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>impos</name> <operator>=</operator> <call><name>f_tpositive_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name>impos</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>f_abs</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_isdigit</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_format</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_String</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>f_format</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_inspect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINITE_TYPE_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_INTEGER_TYPE_P(v) || RB_TYPE_P(v, T_RATIONAL))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_complex_finite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_finite_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_finite_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_complex_infinite_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>f_infinite_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><call><name>f_infinite_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_dumper</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_loader</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RCOMPLEX_SET_REAL</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>id_i_real</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RCOMPLEX_SET_IMAG</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>id_i_imag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_marshal_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_marshal_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"marshaled complex must have an array whose length is 2 but %ld"</literal></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_real</name></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_imag</name></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_raw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nucomp_s_new_internal</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nucomp_s_canonicalize_internal</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_new_polar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_complex_polar</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_complex_polar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_complex_new_polar</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_Complex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><call><name>nucomp_s_convert</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rb_cComplex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_dbl_complex_new</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>real</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>imag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_complex_raw</name><argument_list>(<argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>imag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into Integer"</literal></expr></argument>,

<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_to_i</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into Float"</literal></expr></argument>,

<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_to_f</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into Rational"</literal></expr></argument>,

<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_to_r</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_rationalize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into Rational"</literal></expr></argument>,

<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>id_rationalize</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_to_c</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nilclass_to_c</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_complex_new1</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_to_c</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_complex_new1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>issign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_sign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sign</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>isdecimal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdecimal</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdecimal</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>us</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>us</name></expr>)</condition><block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>;</do></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>islettere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_digits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_digits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>islettere</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sign</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_digits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>read_den</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_digits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_rat_nos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_den</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_rat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>read_sign</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_rat_nos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>

<name>isimagunit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'I'</literal> <operator>||</operator>

<name>c</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'J'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>str2num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_cstr_to_rat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strpbrk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".eE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>rb_cstr_to_dbl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_cstr_to_inum</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>num2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>read_sign</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isimagunit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>sign</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_rat_nos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isimagunit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>read_rat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>!</operator><call><name>isdecimal</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>bb</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new_polar</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>read_sign</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isimagunit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>sign</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_rat_nos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isimagunit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>rb_complex_new2</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>

<name>skip_ws</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>parse_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_ws</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_comp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>skip_ws</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>string_to_c_strict</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_must_asciicompat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"string contains null byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_modify</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_comp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid value for convert(): %+"</literal><name>PRIsVALUE</name></expr></argument>,

<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>string_to_c</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_must_asciicompat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_modify</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>parse_comp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>to_complex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_convert_type</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>, <argument><expr><literal type="string">"Complex"</literal></expr></argument>, <argument><expr><literal type="string">"to_c"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_convert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert nil into Complex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>string_to_c_strict</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>string_to_c_strict</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>real</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name> <operator>||</operator> <operator>(</operator><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a1</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>f_real_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>to_complex</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>to_complex</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>f_real_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>f_real_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,

<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,

<argument><expr><call><name>f_complex_new_bang2</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>nucomp_s_new</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>nucomp_s_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nucomp_convert</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_real</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_imag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_abs2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>f_positive_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>M_PI</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_rect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>float_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_polar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>abs</name></decl>, <decl><type ref="prev"/><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>rb_int_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>rb_float_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>float_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>rb_rational_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>f_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>f_arg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>numeric_conj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>float_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_tpositive_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>rb_mMath</name></expr></argument>, <argument><expr><name>id_PI</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_Complex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>compat</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<expr_stmt><expr><name>id_abs</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"abs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_arg</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_denominator</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"denominator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_numerator</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"numerator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_real_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"real?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_i_real</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_i_imag</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>id_finite_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"finite?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_infinite_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"infinite?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_rationalize</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"rationalize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_PI</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"PI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cComplex</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Complex"</literal></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>nucomp_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"allocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"rectangular"</literal></expr></argument>, <argument><expr><name>nucomp_s_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"rect"</literal></expr></argument>, <argument><expr><name>nucomp_s_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"polar"</literal></expr></argument>, <argument><expr><name>nucomp_s_polar</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"Complex"</literal></expr></argument>, <argument><expr><name>nucomp_f_complex</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_methods_from</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>rb_mComparable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"divmod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"modulo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"remainder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"step"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"truncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>, <argument><expr><name>rb_complex_real</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"imaginary"</literal></expr></argument>, <argument><expr><name>rb_complex_imag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"imag"</literal></expr></argument>, <argument><expr><name>rb_complex_imag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"-@"</literal></expr></argument>, <argument><expr><name>rb_complex_uminus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>rb_complex_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>rb_complex_minus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>rb_complex_mul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>rb_complex_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"quo"</literal></expr></argument>, <argument><expr><name>nucomp_quo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"fdiv"</literal></expr></argument>, <argument><expr><name>nucomp_fdiv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><name>rb_complex_pow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>nucomp_eqeq_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><name>nucomp_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"coerce"</literal></expr></argument>, <argument><expr><name>nucomp_coerce</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>, <argument><expr><name>rb_complex_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"magnitude"</literal></expr></argument>, <argument><expr><name>rb_complex_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"abs2"</literal></expr></argument>, <argument><expr><name>nucomp_abs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>, <argument><expr><name>rb_complex_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"angle"</literal></expr></argument>, <argument><expr><name>rb_complex_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"phase"</literal></expr></argument>, <argument><expr><name>rb_complex_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"rectangular"</literal></expr></argument>, <argument><expr><name>nucomp_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"rect"</literal></expr></argument>, <argument><expr><name>nucomp_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"polar"</literal></expr></argument>, <argument><expr><name>nucomp_polar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"conjugate"</literal></expr></argument>, <argument><expr><name>rb_complex_conjugate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"conj"</literal></expr></argument>, <argument><expr><name>rb_complex_conjugate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"real?"</literal></expr></argument>, <argument><expr><name>nucomp_false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name>nucomp_numerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name>nucomp_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>nucomp_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>nucomp_eql_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>nucomp_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>nucomp_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"positive?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"negative?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"finite?"</literal></expr></argument>, <argument><expr><name>rb_complex_finite_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"infinite?"</literal></expr></argument>, <argument><expr><name>rb_complex_infinite_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump"</literal></expr></argument>, <argument><expr><name>nucomp_marshal_dump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compat</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"compatible"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>compat</name></expr></argument>, <argument><expr><literal type="string">"marshal_load"</literal></expr></argument>, <argument><expr><name>nucomp_marshal_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_marshal_define_compat</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>nucomp_dumper</name></expr></argument>, <argument><expr><name>nucomp_loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>nucomp_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"to_f"</literal></expr></argument>, <argument><expr><name>nucomp_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>nucomp_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"rationalize"</literal></expr></argument>, <argument><expr><name>nucomp_rationalize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"to_c"</literal></expr></argument>, <argument><expr><name>nucomp_to_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNilClass</name></expr></argument>, <argument><expr><literal type="string">"to_c"</literal></expr></argument>, <argument><expr><name>nilclass_to_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"to_c"</literal></expr></argument>, <argument><expr><name>numeric_to_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"to_c"</literal></expr></argument>, <argument><expr><name>string_to_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"convert"</literal></expr></argument>, <argument><expr><name>nucomp_s_convert</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>, <argument><expr><name>numeric_real</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"imaginary"</literal></expr></argument>, <argument><expr><name>numeric_imag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"imag"</literal></expr></argument>, <argument><expr><name>numeric_imag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"abs2"</literal></expr></argument>, <argument><expr><name>numeric_abs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>, <argument><expr><name>numeric_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"angle"</literal></expr></argument>, <argument><expr><name>numeric_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"phase"</literal></expr></argument>, <argument><expr><name>numeric_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"rectangular"</literal></expr></argument>, <argument><expr><name>numeric_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"rect"</literal></expr></argument>, <argument><expr><name>numeric_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"polar"</literal></expr></argument>, <argument><expr><name>numeric_polar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"conjugate"</literal></expr></argument>, <argument><expr><name>numeric_conj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"conj"</literal></expr></argument>, <argument><expr><name>numeric_conj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>, <argument><expr><name>float_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"angle"</literal></expr></argument>, <argument><expr><name>float_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"phase"</literal></expr></argument>, <argument><expr><name>float_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>,

<argument><expr><call><name>f_complex_new_bang2</name><argument_list>(<argument><expr><name>rb_cComplex</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FLONUM</name></expr></cpp:if>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>RFLOAT_0</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_provide</name><argument_list>(<argument><expr><literal type="string">"complex.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

</unit>
