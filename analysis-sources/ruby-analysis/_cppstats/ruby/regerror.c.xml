<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\regerror.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onig_error_code_to_format</name><parameter_list>(<parameter><decl><type><name>OnigPosition</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ONIG_MISMATCH</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"mismatch"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIG_NO_SUPPORT_CONFIG</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"no support in this configuration"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_MEMORY</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"failed to allocate memory"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TYPE_BUG</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined type (bug)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_PARSER_BUG</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"internal parser error (bug)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_STACK_BUG</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"stack error (bug)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNDEFINED_BYTECODE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined bytecode (bug)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNEXPECTED_BYTECODE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"unexpected bytecode (bug)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_MATCH_STACK_LIMIT_OVER</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"match-stack limit over"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_PARSE_DEPTH_LIMIT_OVER</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"parse depth limit over"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_DEFAULT_ENCODING_IS_NOT_SET</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"default multibyte-encoding is not set"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_SPECIFIED_ENCODING_CANT_CONVERT_TO_WIDE_CHAR</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"can't convert to wide-char on specified multibyte-encoding"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_ARGUMENT</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid argument"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_AT_LEFT_BRACE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern at left brace"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_AT_LEFT_BRACKET</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern at left bracket"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_EMPTY_CHAR_CLASS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"empty char-class"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_PREMATURE_END_OF_CHAR_CLASS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"premature end of char-class"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_AT_ESCAPE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern at escape"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_AT_META</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern at meta"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_AT_CONTROL</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern at control"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_META_CODE_SYNTAX</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid meta-code syntax"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_CONTROL_CODE_SYNTAX</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid control-code syntax"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"char-class value at end of range"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_CHAR_CLASS_VALUE_AT_START_OF_RANGE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"char-class value at start of range"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNMATCHED_RANGE_SPECIFIER_IN_CHAR_CLASS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"unmatched range specifier in char-class"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"target of repeat operator is not specified"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"target of repeat operator is invalid"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_NESTED_REPEAT_OPERATOR</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"nested repeat operator"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNMATCHED_CLOSE_PARENTHESIS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"unmatched close parenthesis"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_WITH_UNMATCHED_PARENTHESIS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern with unmatched parenthesis"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_END_PATTERN_IN_GROUP</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"end pattern in group"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNDEFINED_GROUP_OPTION</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined group option"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_POSIX_BRACKET_TYPE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid POSIX bracket type"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_LOOK_BEHIND_PATTERN</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid pattern in look-behind"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_REPEAT_RANGE_PATTERN</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid repeat range {lower,upper}"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_CONDITION_PATTERN</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid conditional pattern"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_BIG_NUMBER</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too big number"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too big number for repeat range"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UPPER_SMALLER_THAN_LOWER_IN_REPEAT_RANGE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"upper is smaller than lower in repeat range"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_EMPTY_RANGE_IN_CHAR_CLASS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"empty range in char class"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_MISMATCH_CODE_LENGTH_IN_CLASS_RANGE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"mismatch multibyte code length in char-class range"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_MANY_MULTI_BYTE_RANGES</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too many multibyte code ranges are specified"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_SHORT_MULTI_BYTE_STRING</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too short multibyte code string"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_BIG_BACKREF_NUMBER</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too big backref number"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_BACKREF</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NAMED_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid backref number/name"</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid backref number"</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"numbered backref/call is not allowed. (use name)"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_SHORT_DIGITS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too short digits"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_LONG_WIDE_CHAR_VALUE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too long wide-char value"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_EMPTY_GROUP_NAME</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"group name is empty"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_GROUP_NAME</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid group name &lt;%n&gt;"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_CHAR_IN_GROUP_NAME</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NAMED_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid char in group name &lt;%n&gt;"</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid char in group number &lt;%n&gt;"</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ONIGERR_UNDEFINED_NAME_REFERENCE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined name &lt;%n&gt; reference"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_UNDEFINED_GROUP_REFERENCE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined group &lt;%n&gt; reference"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_MULTIPLEX_DEFINED_NAME</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"multiplex defined name &lt;%n&gt;"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"multiplex definition name &lt;%n&gt; call"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_NEVER_ENDING_RECURSION</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"never ending recursion"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_GROUP_NUMBER_OVER_FOR_CAPTURE_HISTORY</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"group number is too big for capture history"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid character property name {%n}"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_MANY_CAPTURE_GROUPS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too many capture groups are specified"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid code point value"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"too big wide-char value"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"not supported encoding combination"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONIGERR_INVALID_COMBINATION_OF_OPTIONS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"invalid combination of options"</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"undefined error code"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprint_byte</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprint_byte_with_x</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>to_ascii</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><name>UChar</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_over</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_MBC_MINLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0xffff</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>+</operator> <literal type="number">10</literal> <operator>&lt;=</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprint_byte_with_x</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprint_byte</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprint_byte</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprint_byte</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">6</literal> <operator>&lt;=</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprint_byte_with_x</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprint_byte</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><name>code</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>is_over</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>)</operator><call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xmemcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>is_over</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>buf_size</name> <operator>&lt;</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ERROR_PAR_LEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onig_error_code_to_str</name><parameter_list>(<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>OnigPosition</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigErrorInfo</name><modifier>*</modifier></type> <name>einfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_over</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name></type> <name><name>parbuf</name><index>[<expr><name>MAX_ERROR_PAR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>vargs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vargs</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ONIGERR_UNDEFINED_NAME_REFERENCE</name></expr>:</case>

<case>case <expr><name>ONIGERR_UNDEFINED_GROUP_REFERENCE</name></expr>:</case>

<case>case <expr><name>ONIGERR_MULTIPLEX_DEFINED_NAME</name></expr>:</case>

<case>case <expr><name>ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL</name></expr>:</case>

<case>case <expr><name>ONIGERR_INVALID_GROUP_NAME</name></expr>:</case>

<case>case <expr><name>ONIGERR_INVALID_CHAR_IN_GROUP_NAME</name></expr>:</case>

<case>case <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>:</case>

<expr_stmt><expr><name>einfo</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>vargs</name></expr></argument>, <argument><expr><name>OnigErrorInfo</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>to_ascii</name><argument_list>(<argument><expr><name><name>einfo</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>einfo</name><operator>-&gt;</operator><name>par</name></name></expr></argument>, <argument><expr><name><name>einfo</name><operator>-&gt;</operator><name>par_end</name></name></expr></argument>,

<argument><expr><name>parbuf</name></expr></argument>, <argument><expr><name>MAX_ERROR_PAR_LEN</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_over</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>onig_error_code_to_format</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>xmemcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>parbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_over</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xmemcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>normal_char</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<label><name>normal_char</name>:</label>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>onig_error_code_to_format</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>onigenc_str_bytelen_null</name><argument_list>(<argument><expr><name>ONIG_ENCODING_ASCII</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xmemcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>onig_vsnprintf_with_pattern</name><parameter_list>(<parameter><decl><type><name>UChar</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>,

<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>need</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name></type> <name><name>bs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>xvsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator> <operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <operator>)</operator><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need</name> <operator>=</operator> <operator>(</operator><name>pat_end</name> <operator>-</operator> <name>pat</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>+</operator> <name>need</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name> <operator>)</operator><name>bufsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sep</name><index>[]</index></name> <init>= <expr><literal type="string">": /"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator> <operator>)</operator><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>onigenc_str_bytelen_null</name><argument_list>(<argument><expr><name>ONIG_ENCODING_ASCII</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pat_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pat_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pat_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_MBC_MINLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>blen</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprint_byte_with_x</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator> <operator>)</operator><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>onigenc_str_bytelen_null</name><argument_list>(<argument><expr><name>ONIG_ENCODING_ASCII</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blen</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>bp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pat_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>)</operator><literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ONIGENC_IS_CODE_PRINT</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>ONIGENC_IS_CODE_SPACE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ONIGENC_IS_CODE_CNTRL</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprint_byte_with_x</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator> <operator>)</operator><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>onigenc_str_bytelen_null</name><argument_list>(<argument><expr><name>ONIG_ENCODING_ASCII</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>bp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

void

onig_snprintf_with_pattern(UChar buf[], int bufsize, OnigEncoding enc,

UChar* pat, UChar* pat_end, const UChar *fmt, ...)

{

va_list args;

va_start(args, fmt);

onig_vsnprintf_with_pattern(buf, bufsize, enc,

pat, pat_end, fmt, args);

va_end(args);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
