<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\regenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regint.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>OnigEncDefaultCharEncoding</name> <init>= <expr><name>ONIG_ENCODING_INIT_DEFAULT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigEncoding</name></type>

<name>onigenc_get_default_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>OnigEncDefaultCharEncoding</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_set_default_encoding</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>OnigEncDefaultCharEncoding</name> <operator>=</operator> <name>enc</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mbclen_approximate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ONIGENC_PRECISE_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_MBCLEN_CHARFOUND_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ONIGENC_MBCLEN_CHARFOUND_LEN</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_MBCLEN_NEEDMORE_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <call><name>ONIGENC_MBCLEN_NEEDMORE_LEN</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_get_right_adjust_char_head</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_get_right_adjust_char_head_with_prev</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_get_prev_char_head</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_step_back</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>ONIG_IS_NOT_NULL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_step</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>ONIGENC_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>q</name> <operator>&lt;=</operator> <name>end</name></expr> ?</condition><then> <expr><name>q</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_strlen</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>ONIGENC_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_strlen_null</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ONIGENC_MBC_MINLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>ONIGENC_MBC_MAXLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>ONIGENC_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_str_bytelen_null</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ONIGENC_MBC_MINLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>ONIGENC_MBC_MAXLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>ONIGENC_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncAsciiToLowerCaseTable</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="char">'\000'</literal></expr>, <expr><literal type="char">'\001'</literal></expr>, <expr><literal type="char">'\002'</literal></expr>, <expr><literal type="char">'\003'</literal></expr>, <expr><literal type="char">'\004'</literal></expr>, <expr><literal type="char">'\005'</literal></expr>, <expr><literal type="char">'\006'</literal></expr>, <expr><literal type="char">'\007'</literal></expr>,

<expr><literal type="char">'\010'</literal></expr>, <expr><literal type="char">'\011'</literal></expr>, <expr><literal type="char">'\012'</literal></expr>, <expr><literal type="char">'\013'</literal></expr>, <expr><literal type="char">'\014'</literal></expr>, <expr><literal type="char">'\015'</literal></expr>, <expr><literal type="char">'\016'</literal></expr>, <expr><literal type="char">'\017'</literal></expr>,

<expr><literal type="char">'\020'</literal></expr>, <expr><literal type="char">'\021'</literal></expr>, <expr><literal type="char">'\022'</literal></expr>, <expr><literal type="char">'\023'</literal></expr>, <expr><literal type="char">'\024'</literal></expr>, <expr><literal type="char">'\025'</literal></expr>, <expr><literal type="char">'\026'</literal></expr>, <expr><literal type="char">'\027'</literal></expr>,

<expr><literal type="char">'\030'</literal></expr>, <expr><literal type="char">'\031'</literal></expr>, <expr><literal type="char">'\032'</literal></expr>, <expr><literal type="char">'\033'</literal></expr>, <expr><literal type="char">'\034'</literal></expr>, <expr><literal type="char">'\035'</literal></expr>, <expr><literal type="char">'\036'</literal></expr>, <expr><literal type="char">'\037'</literal></expr>,

<expr><literal type="char">'\040'</literal></expr>, <expr><literal type="char">'\041'</literal></expr>, <expr><literal type="char">'\042'</literal></expr>, <expr><literal type="char">'\043'</literal></expr>, <expr><literal type="char">'\044'</literal></expr>, <expr><literal type="char">'\045'</literal></expr>, <expr><literal type="char">'\046'</literal></expr>, <expr><literal type="char">'\047'</literal></expr>,

<expr><literal type="char">'\050'</literal></expr>, <expr><literal type="char">'\051'</literal></expr>, <expr><literal type="char">'\052'</literal></expr>, <expr><literal type="char">'\053'</literal></expr>, <expr><literal type="char">'\054'</literal></expr>, <expr><literal type="char">'\055'</literal></expr>, <expr><literal type="char">'\056'</literal></expr>, <expr><literal type="char">'\057'</literal></expr>,

<expr><literal type="char">'\060'</literal></expr>, <expr><literal type="char">'\061'</literal></expr>, <expr><literal type="char">'\062'</literal></expr>, <expr><literal type="char">'\063'</literal></expr>, <expr><literal type="char">'\064'</literal></expr>, <expr><literal type="char">'\065'</literal></expr>, <expr><literal type="char">'\066'</literal></expr>, <expr><literal type="char">'\067'</literal></expr>,

<expr><literal type="char">'\070'</literal></expr>, <expr><literal type="char">'\071'</literal></expr>, <expr><literal type="char">'\072'</literal></expr>, <expr><literal type="char">'\073'</literal></expr>, <expr><literal type="char">'\074'</literal></expr>, <expr><literal type="char">'\075'</literal></expr>, <expr><literal type="char">'\076'</literal></expr>, <expr><literal type="char">'\077'</literal></expr>,

<expr><literal type="char">'\100'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,

<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,

<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,

<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\133'</literal></expr>, <expr><literal type="char">'\134'</literal></expr>, <expr><literal type="char">'\135'</literal></expr>, <expr><literal type="char">'\136'</literal></expr>, <expr><literal type="char">'\137'</literal></expr>,

<expr><literal type="char">'\140'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,

<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,

<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,

<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\173'</literal></expr>, <expr><literal type="char">'\174'</literal></expr>, <expr><literal type="char">'\175'</literal></expr>, <expr><literal type="char">'\176'</literal></expr>, <expr><literal type="char">'\177'</literal></expr>,

<expr><literal type="char">'\200'</literal></expr>, <expr><literal type="char">'\201'</literal></expr>, <expr><literal type="char">'\202'</literal></expr>, <expr><literal type="char">'\203'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>,

<expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, <expr><literal type="char">'\215'</literal></expr>, <expr><literal type="char">'\216'</literal></expr>, <expr><literal type="char">'\217'</literal></expr>,

<expr><literal type="char">'\220'</literal></expr>, <expr><literal type="char">'\221'</literal></expr>, <expr><literal type="char">'\222'</literal></expr>, <expr><literal type="char">'\223'</literal></expr>, <expr><literal type="char">'\224'</literal></expr>, <expr><literal type="char">'\225'</literal></expr>, <expr><literal type="char">'\226'</literal></expr>, <expr><literal type="char">'\227'</literal></expr>,

<expr><literal type="char">'\230'</literal></expr>, <expr><literal type="char">'\231'</literal></expr>, <expr><literal type="char">'\232'</literal></expr>, <expr><literal type="char">'\233'</literal></expr>, <expr><literal type="char">'\234'</literal></expr>, <expr><literal type="char">'\235'</literal></expr>, <expr><literal type="char">'\236'</literal></expr>, <expr><literal type="char">'\237'</literal></expr>,

<expr><literal type="char">'\240'</literal></expr>, <expr><literal type="char">'\241'</literal></expr>, <expr><literal type="char">'\242'</literal></expr>, <expr><literal type="char">'\243'</literal></expr>, <expr><literal type="char">'\244'</literal></expr>, <expr><literal type="char">'\245'</literal></expr>, <expr><literal type="char">'\246'</literal></expr>, <expr><literal type="char">'\247'</literal></expr>,

<expr><literal type="char">'\250'</literal></expr>, <expr><literal type="char">'\251'</literal></expr>, <expr><literal type="char">'\252'</literal></expr>, <expr><literal type="char">'\253'</literal></expr>, <expr><literal type="char">'\254'</literal></expr>, <expr><literal type="char">'\255'</literal></expr>, <expr><literal type="char">'\256'</literal></expr>, <expr><literal type="char">'\257'</literal></expr>,

<expr><literal type="char">'\260'</literal></expr>, <expr><literal type="char">'\261'</literal></expr>, <expr><literal type="char">'\262'</literal></expr>, <expr><literal type="char">'\263'</literal></expr>, <expr><literal type="char">'\264'</literal></expr>, <expr><literal type="char">'\265'</literal></expr>, <expr><literal type="char">'\266'</literal></expr>, <expr><literal type="char">'\267'</literal></expr>,

<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\271'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\273'</literal></expr>, <expr><literal type="char">'\274'</literal></expr>, <expr><literal type="char">'\275'</literal></expr>, <expr><literal type="char">'\276'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,

<expr><literal type="char">'\300'</literal></expr>, <expr><literal type="char">'\301'</literal></expr>, <expr><literal type="char">'\302'</literal></expr>, <expr><literal type="char">'\303'</literal></expr>, <expr><literal type="char">'\304'</literal></expr>, <expr><literal type="char">'\305'</literal></expr>, <expr><literal type="char">'\306'</literal></expr>, <expr><literal type="char">'\307'</literal></expr>,

<expr><literal type="char">'\310'</literal></expr>, <expr><literal type="char">'\311'</literal></expr>, <expr><literal type="char">'\312'</literal></expr>, <expr><literal type="char">'\313'</literal></expr>, <expr><literal type="char">'\314'</literal></expr>, <expr><literal type="char">'\315'</literal></expr>, <expr><literal type="char">'\316'</literal></expr>, <expr><literal type="char">'\317'</literal></expr>,

<expr><literal type="char">'\320'</literal></expr>, <expr><literal type="char">'\321'</literal></expr>, <expr><literal type="char">'\322'</literal></expr>, <expr><literal type="char">'\323'</literal></expr>, <expr><literal type="char">'\324'</literal></expr>, <expr><literal type="char">'\325'</literal></expr>, <expr><literal type="char">'\326'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>,

<expr><literal type="char">'\330'</literal></expr>, <expr><literal type="char">'\331'</literal></expr>, <expr><literal type="char">'\332'</literal></expr>, <expr><literal type="char">'\333'</literal></expr>, <expr><literal type="char">'\334'</literal></expr>, <expr><literal type="char">'\335'</literal></expr>, <expr><literal type="char">'\336'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>,

<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,

<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,

<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>,

<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UPPER_CASE_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncAsciiToUpperCaseTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="char">'\000'</literal></expr>, <expr><literal type="char">'\001'</literal></expr>, <expr><literal type="char">'\002'</literal></expr>, <expr><literal type="char">'\003'</literal></expr>, <expr><literal type="char">'\004'</literal></expr>, <expr><literal type="char">'\005'</literal></expr>, <expr><literal type="char">'\006'</literal></expr>, <expr><literal type="char">'\007'</literal></expr>,

<expr><literal type="char">'\010'</literal></expr>, <expr><literal type="char">'\011'</literal></expr>, <expr><literal type="char">'\012'</literal></expr>, <expr><literal type="char">'\013'</literal></expr>, <expr><literal type="char">'\014'</literal></expr>, <expr><literal type="char">'\015'</literal></expr>, <expr><literal type="char">'\016'</literal></expr>, <expr><literal type="char">'\017'</literal></expr>,

<expr><literal type="char">'\020'</literal></expr>, <expr><literal type="char">'\021'</literal></expr>, <expr><literal type="char">'\022'</literal></expr>, <expr><literal type="char">'\023'</literal></expr>, <expr><literal type="char">'\024'</literal></expr>, <expr><literal type="char">'\025'</literal></expr>, <expr><literal type="char">'\026'</literal></expr>, <expr><literal type="char">'\027'</literal></expr>,

<expr><literal type="char">'\030'</literal></expr>, <expr><literal type="char">'\031'</literal></expr>, <expr><literal type="char">'\032'</literal></expr>, <expr><literal type="char">'\033'</literal></expr>, <expr><literal type="char">'\034'</literal></expr>, <expr><literal type="char">'\035'</literal></expr>, <expr><literal type="char">'\036'</literal></expr>, <expr><literal type="char">'\037'</literal></expr>,

<expr><literal type="char">'\040'</literal></expr>, <expr><literal type="char">'\041'</literal></expr>, <expr><literal type="char">'\042'</literal></expr>, <expr><literal type="char">'\043'</literal></expr>, <expr><literal type="char">'\044'</literal></expr>, <expr><literal type="char">'\045'</literal></expr>, <expr><literal type="char">'\046'</literal></expr>, <expr><literal type="char">'\047'</literal></expr>,

<expr><literal type="char">'\050'</literal></expr>, <expr><literal type="char">'\051'</literal></expr>, <expr><literal type="char">'\052'</literal></expr>, <expr><literal type="char">'\053'</literal></expr>, <expr><literal type="char">'\054'</literal></expr>, <expr><literal type="char">'\055'</literal></expr>, <expr><literal type="char">'\056'</literal></expr>, <expr><literal type="char">'\057'</literal></expr>,

<expr><literal type="char">'\060'</literal></expr>, <expr><literal type="char">'\061'</literal></expr>, <expr><literal type="char">'\062'</literal></expr>, <expr><literal type="char">'\063'</literal></expr>, <expr><literal type="char">'\064'</literal></expr>, <expr><literal type="char">'\065'</literal></expr>, <expr><literal type="char">'\066'</literal></expr>, <expr><literal type="char">'\067'</literal></expr>,

<expr><literal type="char">'\070'</literal></expr>, <expr><literal type="char">'\071'</literal></expr>, <expr><literal type="char">'\072'</literal></expr>, <expr><literal type="char">'\073'</literal></expr>, <expr><literal type="char">'\074'</literal></expr>, <expr><literal type="char">'\075'</literal></expr>, <expr><literal type="char">'\076'</literal></expr>, <expr><literal type="char">'\077'</literal></expr>,

<expr><literal type="char">'\100'</literal></expr>, <expr><literal type="char">'\101'</literal></expr>, <expr><literal type="char">'\102'</literal></expr>, <expr><literal type="char">'\103'</literal></expr>, <expr><literal type="char">'\104'</literal></expr>, <expr><literal type="char">'\105'</literal></expr>, <expr><literal type="char">'\106'</literal></expr>, <expr><literal type="char">'\107'</literal></expr>,

<expr><literal type="char">'\110'</literal></expr>, <expr><literal type="char">'\111'</literal></expr>, <expr><literal type="char">'\112'</literal></expr>, <expr><literal type="char">'\113'</literal></expr>, <expr><literal type="char">'\114'</literal></expr>, <expr><literal type="char">'\115'</literal></expr>, <expr><literal type="char">'\116'</literal></expr>, <expr><literal type="char">'\117'</literal></expr>,

<expr><literal type="char">'\120'</literal></expr>, <expr><literal type="char">'\121'</literal></expr>, <expr><literal type="char">'\122'</literal></expr>, <expr><literal type="char">'\123'</literal></expr>, <expr><literal type="char">'\124'</literal></expr>, <expr><literal type="char">'\125'</literal></expr>, <expr><literal type="char">'\126'</literal></expr>, <expr><literal type="char">'\127'</literal></expr>,

<expr><literal type="char">'\130'</literal></expr>, <expr><literal type="char">'\131'</literal></expr>, <expr><literal type="char">'\132'</literal></expr>, <expr><literal type="char">'\133'</literal></expr>, <expr><literal type="char">'\134'</literal></expr>, <expr><literal type="char">'\135'</literal></expr>, <expr><literal type="char">'\136'</literal></expr>, <expr><literal type="char">'\137'</literal></expr>,

<expr><literal type="char">'\140'</literal></expr>, <expr><literal type="char">'\101'</literal></expr>, <expr><literal type="char">'\102'</literal></expr>, <expr><literal type="char">'\103'</literal></expr>, <expr><literal type="char">'\104'</literal></expr>, <expr><literal type="char">'\105'</literal></expr>, <expr><literal type="char">'\106'</literal></expr>, <expr><literal type="char">'\107'</literal></expr>,

<expr><literal type="char">'\110'</literal></expr>, <expr><literal type="char">'\111'</literal></expr>, <expr><literal type="char">'\112'</literal></expr>, <expr><literal type="char">'\113'</literal></expr>, <expr><literal type="char">'\114'</literal></expr>, <expr><literal type="char">'\115'</literal></expr>, <expr><literal type="char">'\116'</literal></expr>, <expr><literal type="char">'\117'</literal></expr>,

<expr><literal type="char">'\120'</literal></expr>, <expr><literal type="char">'\121'</literal></expr>, <expr><literal type="char">'\122'</literal></expr>, <expr><literal type="char">'\123'</literal></expr>, <expr><literal type="char">'\124'</literal></expr>, <expr><literal type="char">'\125'</literal></expr>, <expr><literal type="char">'\126'</literal></expr>, <expr><literal type="char">'\127'</literal></expr>,

<expr><literal type="char">'\130'</literal></expr>, <expr><literal type="char">'\131'</literal></expr>, <expr><literal type="char">'\132'</literal></expr>, <expr><literal type="char">'\173'</literal></expr>, <expr><literal type="char">'\174'</literal></expr>, <expr><literal type="char">'\175'</literal></expr>, <expr><literal type="char">'\176'</literal></expr>, <expr><literal type="char">'\177'</literal></expr>,

<expr><literal type="char">'\200'</literal></expr>, <expr><literal type="char">'\201'</literal></expr>, <expr><literal type="char">'\202'</literal></expr>, <expr><literal type="char">'\203'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>,

<expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, <expr><literal type="char">'\215'</literal></expr>, <expr><literal type="char">'\216'</literal></expr>, <expr><literal type="char">'\217'</literal></expr>,

<expr><literal type="char">'\220'</literal></expr>, <expr><literal type="char">'\221'</literal></expr>, <expr><literal type="char">'\222'</literal></expr>, <expr><literal type="char">'\223'</literal></expr>, <expr><literal type="char">'\224'</literal></expr>, <expr><literal type="char">'\225'</literal></expr>, <expr><literal type="char">'\226'</literal></expr>, <expr><literal type="char">'\227'</literal></expr>,

<expr><literal type="char">'\230'</literal></expr>, <expr><literal type="char">'\231'</literal></expr>, <expr><literal type="char">'\232'</literal></expr>, <expr><literal type="char">'\233'</literal></expr>, <expr><literal type="char">'\234'</literal></expr>, <expr><literal type="char">'\235'</literal></expr>, <expr><literal type="char">'\236'</literal></expr>, <expr><literal type="char">'\237'</literal></expr>,

<expr><literal type="char">'\240'</literal></expr>, <expr><literal type="char">'\241'</literal></expr>, <expr><literal type="char">'\242'</literal></expr>, <expr><literal type="char">'\243'</literal></expr>, <expr><literal type="char">'\244'</literal></expr>, <expr><literal type="char">'\245'</literal></expr>, <expr><literal type="char">'\246'</literal></expr>, <expr><literal type="char">'\247'</literal></expr>,

<expr><literal type="char">'\250'</literal></expr>, <expr><literal type="char">'\251'</literal></expr>, <expr><literal type="char">'\252'</literal></expr>, <expr><literal type="char">'\253'</literal></expr>, <expr><literal type="char">'\254'</literal></expr>, <expr><literal type="char">'\255'</literal></expr>, <expr><literal type="char">'\256'</literal></expr>, <expr><literal type="char">'\257'</literal></expr>,

<expr><literal type="char">'\260'</literal></expr>, <expr><literal type="char">'\261'</literal></expr>, <expr><literal type="char">'\262'</literal></expr>, <expr><literal type="char">'\263'</literal></expr>, <expr><literal type="char">'\264'</literal></expr>, <expr><literal type="char">'\265'</literal></expr>, <expr><literal type="char">'\266'</literal></expr>, <expr><literal type="char">'\267'</literal></expr>,

<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\271'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\273'</literal></expr>, <expr><literal type="char">'\274'</literal></expr>, <expr><literal type="char">'\275'</literal></expr>, <expr><literal type="char">'\276'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,

<expr><literal type="char">'\300'</literal></expr>, <expr><literal type="char">'\301'</literal></expr>, <expr><literal type="char">'\302'</literal></expr>, <expr><literal type="char">'\303'</literal></expr>, <expr><literal type="char">'\304'</literal></expr>, <expr><literal type="char">'\305'</literal></expr>, <expr><literal type="char">'\306'</literal></expr>, <expr><literal type="char">'\307'</literal></expr>,

<expr><literal type="char">'\310'</literal></expr>, <expr><literal type="char">'\311'</literal></expr>, <expr><literal type="char">'\312'</literal></expr>, <expr><literal type="char">'\313'</literal></expr>, <expr><literal type="char">'\314'</literal></expr>, <expr><literal type="char">'\315'</literal></expr>, <expr><literal type="char">'\316'</literal></expr>, <expr><literal type="char">'\317'</literal></expr>,

<expr><literal type="char">'\320'</literal></expr>, <expr><literal type="char">'\321'</literal></expr>, <expr><literal type="char">'\322'</literal></expr>, <expr><literal type="char">'\323'</literal></expr>, <expr><literal type="char">'\324'</literal></expr>, <expr><literal type="char">'\325'</literal></expr>, <expr><literal type="char">'\326'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>,

<expr><literal type="char">'\330'</literal></expr>, <expr><literal type="char">'\331'</literal></expr>, <expr><literal type="char">'\332'</literal></expr>, <expr><literal type="char">'\333'</literal></expr>, <expr><literal type="char">'\334'</literal></expr>, <expr><literal type="char">'\335'</literal></expr>, <expr><literal type="char">'\336'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>,

<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,

<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,

<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>,

<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>OnigEncAsciiCtypeTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,

<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x420c</literal></expr>, <expr><literal type="number">0x4209</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,

<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,

<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,

<expr><literal type="number">0x4284</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,

<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,

<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>,

<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,

<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,

<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,

<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,

<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x51a0</literal></expr>,

<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,

<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,

<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,

<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncISO_8859_1_ToLowerCaseTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="char">'\000'</literal></expr>, <expr><literal type="char">'\001'</literal></expr>, <expr><literal type="char">'\002'</literal></expr>, <expr><literal type="char">'\003'</literal></expr>, <expr><literal type="char">'\004'</literal></expr>, <expr><literal type="char">'\005'</literal></expr>, <expr><literal type="char">'\006'</literal></expr>, <expr><literal type="char">'\007'</literal></expr>,

<expr><literal type="char">'\010'</literal></expr>, <expr><literal type="char">'\011'</literal></expr>, <expr><literal type="char">'\012'</literal></expr>, <expr><literal type="char">'\013'</literal></expr>, <expr><literal type="char">'\014'</literal></expr>, <expr><literal type="char">'\015'</literal></expr>, <expr><literal type="char">'\016'</literal></expr>, <expr><literal type="char">'\017'</literal></expr>,

<expr><literal type="char">'\020'</literal></expr>, <expr><literal type="char">'\021'</literal></expr>, <expr><literal type="char">'\022'</literal></expr>, <expr><literal type="char">'\023'</literal></expr>, <expr><literal type="char">'\024'</literal></expr>, <expr><literal type="char">'\025'</literal></expr>, <expr><literal type="char">'\026'</literal></expr>, <expr><literal type="char">'\027'</literal></expr>,

<expr><literal type="char">'\030'</literal></expr>, <expr><literal type="char">'\031'</literal></expr>, <expr><literal type="char">'\032'</literal></expr>, <expr><literal type="char">'\033'</literal></expr>, <expr><literal type="char">'\034'</literal></expr>, <expr><literal type="char">'\035'</literal></expr>, <expr><literal type="char">'\036'</literal></expr>, <expr><literal type="char">'\037'</literal></expr>,

<expr><literal type="char">'\040'</literal></expr>, <expr><literal type="char">'\041'</literal></expr>, <expr><literal type="char">'\042'</literal></expr>, <expr><literal type="char">'\043'</literal></expr>, <expr><literal type="char">'\044'</literal></expr>, <expr><literal type="char">'\045'</literal></expr>, <expr><literal type="char">'\046'</literal></expr>, <expr><literal type="char">'\047'</literal></expr>,

<expr><literal type="char">'\050'</literal></expr>, <expr><literal type="char">'\051'</literal></expr>, <expr><literal type="char">'\052'</literal></expr>, <expr><literal type="char">'\053'</literal></expr>, <expr><literal type="char">'\054'</literal></expr>, <expr><literal type="char">'\055'</literal></expr>, <expr><literal type="char">'\056'</literal></expr>, <expr><literal type="char">'\057'</literal></expr>,

<expr><literal type="char">'\060'</literal></expr>, <expr><literal type="char">'\061'</literal></expr>, <expr><literal type="char">'\062'</literal></expr>, <expr><literal type="char">'\063'</literal></expr>, <expr><literal type="char">'\064'</literal></expr>, <expr><literal type="char">'\065'</literal></expr>, <expr><literal type="char">'\066'</literal></expr>, <expr><literal type="char">'\067'</literal></expr>,

<expr><literal type="char">'\070'</literal></expr>, <expr><literal type="char">'\071'</literal></expr>, <expr><literal type="char">'\072'</literal></expr>, <expr><literal type="char">'\073'</literal></expr>, <expr><literal type="char">'\074'</literal></expr>, <expr><literal type="char">'\075'</literal></expr>, <expr><literal type="char">'\076'</literal></expr>, <expr><literal type="char">'\077'</literal></expr>,

<expr><literal type="char">'\100'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,

<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,

<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,

<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\133'</literal></expr>, <expr><literal type="char">'\134'</literal></expr>, <expr><literal type="char">'\135'</literal></expr>, <expr><literal type="char">'\136'</literal></expr>, <expr><literal type="char">'\137'</literal></expr>,

<expr><literal type="char">'\140'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,

<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,

<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,

<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\173'</literal></expr>, <expr><literal type="char">'\174'</literal></expr>, <expr><literal type="char">'\175'</literal></expr>, <expr><literal type="char">'\176'</literal></expr>, <expr><literal type="char">'\177'</literal></expr>,

<expr><literal type="char">'\200'</literal></expr>, <expr><literal type="char">'\201'</literal></expr>, <expr><literal type="char">'\202'</literal></expr>, <expr><literal type="char">'\203'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>,

<expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, <expr><literal type="char">'\215'</literal></expr>, <expr><literal type="char">'\216'</literal></expr>, <expr><literal type="char">'\217'</literal></expr>,

<expr><literal type="char">'\220'</literal></expr>, <expr><literal type="char">'\221'</literal></expr>, <expr><literal type="char">'\222'</literal></expr>, <expr><literal type="char">'\223'</literal></expr>, <expr><literal type="char">'\224'</literal></expr>, <expr><literal type="char">'\225'</literal></expr>, <expr><literal type="char">'\226'</literal></expr>, <expr><literal type="char">'\227'</literal></expr>,

<expr><literal type="char">'\230'</literal></expr>, <expr><literal type="char">'\231'</literal></expr>, <expr><literal type="char">'\232'</literal></expr>, <expr><literal type="char">'\233'</literal></expr>, <expr><literal type="char">'\234'</literal></expr>, <expr><literal type="char">'\235'</literal></expr>, <expr><literal type="char">'\236'</literal></expr>, <expr><literal type="char">'\237'</literal></expr>,

<expr><literal type="char">'\240'</literal></expr>, <expr><literal type="char">'\241'</literal></expr>, <expr><literal type="char">'\242'</literal></expr>, <expr><literal type="char">'\243'</literal></expr>, <expr><literal type="char">'\244'</literal></expr>, <expr><literal type="char">'\245'</literal></expr>, <expr><literal type="char">'\246'</literal></expr>, <expr><literal type="char">'\247'</literal></expr>,

<expr><literal type="char">'\250'</literal></expr>, <expr><literal type="char">'\251'</literal></expr>, <expr><literal type="char">'\252'</literal></expr>, <expr><literal type="char">'\253'</literal></expr>, <expr><literal type="char">'\254'</literal></expr>, <expr><literal type="char">'\255'</literal></expr>, <expr><literal type="char">'\256'</literal></expr>, <expr><literal type="char">'\257'</literal></expr>,

<expr><literal type="char">'\260'</literal></expr>, <expr><literal type="char">'\261'</literal></expr>, <expr><literal type="char">'\262'</literal></expr>, <expr><literal type="char">'\263'</literal></expr>, <expr><literal type="char">'\264'</literal></expr>, <expr><literal type="char">'\265'</literal></expr>, <expr><literal type="char">'\266'</literal></expr>, <expr><literal type="char">'\267'</literal></expr>,

<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\271'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\273'</literal></expr>, <expr><literal type="char">'\274'</literal></expr>, <expr><literal type="char">'\275'</literal></expr>, <expr><literal type="char">'\276'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,

<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,

<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,

<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>,

<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>,

<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,

<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,

<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>,

<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UPPER_CASE_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncISO_8859_1_ToUpperCaseTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="char">'\000'</literal></expr>, <expr><literal type="char">'\001'</literal></expr>, <expr><literal type="char">'\002'</literal></expr>, <expr><literal type="char">'\003'</literal></expr>, <expr><literal type="char">'\004'</literal></expr>, <expr><literal type="char">'\005'</literal></expr>, <expr><literal type="char">'\006'</literal></expr>, <expr><literal type="char">'\007'</literal></expr>,

<expr><literal type="char">'\010'</literal></expr>, <expr><literal type="char">'\011'</literal></expr>, <expr><literal type="char">'\012'</literal></expr>, <expr><literal type="char">'\013'</literal></expr>, <expr><literal type="char">'\014'</literal></expr>, <expr><literal type="char">'\015'</literal></expr>, <expr><literal type="char">'\016'</literal></expr>, <expr><literal type="char">'\017'</literal></expr>,

<expr><literal type="char">'\020'</literal></expr>, <expr><literal type="char">'\021'</literal></expr>, <expr><literal type="char">'\022'</literal></expr>, <expr><literal type="char">'\023'</literal></expr>, <expr><literal type="char">'\024'</literal></expr>, <expr><literal type="char">'\025'</literal></expr>, <expr><literal type="char">'\026'</literal></expr>, <expr><literal type="char">'\027'</literal></expr>,

<expr><literal type="char">'\030'</literal></expr>, <expr><literal type="char">'\031'</literal></expr>, <expr><literal type="char">'\032'</literal></expr>, <expr><literal type="char">'\033'</literal></expr>, <expr><literal type="char">'\034'</literal></expr>, <expr><literal type="char">'\035'</literal></expr>, <expr><literal type="char">'\036'</literal></expr>, <expr><literal type="char">'\037'</literal></expr>,

<expr><literal type="char">'\040'</literal></expr>, <expr><literal type="char">'\041'</literal></expr>, <expr><literal type="char">'\042'</literal></expr>, <expr><literal type="char">'\043'</literal></expr>, <expr><literal type="char">'\044'</literal></expr>, <expr><literal type="char">'\045'</literal></expr>, <expr><literal type="char">'\046'</literal></expr>, <expr><literal type="char">'\047'</literal></expr>,

<expr><literal type="char">'\050'</literal></expr>, <expr><literal type="char">'\051'</literal></expr>, <expr><literal type="char">'\052'</literal></expr>, <expr><literal type="char">'\053'</literal></expr>, <expr><literal type="char">'\054'</literal></expr>, <expr><literal type="char">'\055'</literal></expr>, <expr><literal type="char">'\056'</literal></expr>, <expr><literal type="char">'\057'</literal></expr>,

<expr><literal type="char">'\060'</literal></expr>, <expr><literal type="char">'\061'</literal></expr>, <expr><literal type="char">'\062'</literal></expr>, <expr><literal type="char">'\063'</literal></expr>, <expr><literal type="char">'\064'</literal></expr>, <expr><literal type="char">'\065'</literal></expr>, <expr><literal type="char">'\066'</literal></expr>, <expr><literal type="char">'\067'</literal></expr>,

<expr><literal type="char">'\070'</literal></expr>, <expr><literal type="char">'\071'</literal></expr>, <expr><literal type="char">'\072'</literal></expr>, <expr><literal type="char">'\073'</literal></expr>, <expr><literal type="char">'\074'</literal></expr>, <expr><literal type="char">'\075'</literal></expr>, <expr><literal type="char">'\076'</literal></expr>, <expr><literal type="char">'\077'</literal></expr>,

<expr><literal type="char">'\100'</literal></expr>, <expr><literal type="char">'\101'</literal></expr>, <expr><literal type="char">'\102'</literal></expr>, <expr><literal type="char">'\103'</literal></expr>, <expr><literal type="char">'\104'</literal></expr>, <expr><literal type="char">'\105'</literal></expr>, <expr><literal type="char">'\106'</literal></expr>, <expr><literal type="char">'\107'</literal></expr>,

<expr><literal type="char">'\110'</literal></expr>, <expr><literal type="char">'\111'</literal></expr>, <expr><literal type="char">'\112'</literal></expr>, <expr><literal type="char">'\113'</literal></expr>, <expr><literal type="char">'\114'</literal></expr>, <expr><literal type="char">'\115'</literal></expr>, <expr><literal type="char">'\116'</literal></expr>, <expr><literal type="char">'\117'</literal></expr>,

<expr><literal type="char">'\120'</literal></expr>, <expr><literal type="char">'\121'</literal></expr>, <expr><literal type="char">'\122'</literal></expr>, <expr><literal type="char">'\123'</literal></expr>, <expr><literal type="char">'\124'</literal></expr>, <expr><literal type="char">'\125'</literal></expr>, <expr><literal type="char">'\126'</literal></expr>, <expr><literal type="char">'\127'</literal></expr>,

<expr><literal type="char">'\130'</literal></expr>, <expr><literal type="char">'\131'</literal></expr>, <expr><literal type="char">'\132'</literal></expr>, <expr><literal type="char">'\133'</literal></expr>, <expr><literal type="char">'\134'</literal></expr>, <expr><literal type="char">'\135'</literal></expr>, <expr><literal type="char">'\136'</literal></expr>, <expr><literal type="char">'\137'</literal></expr>,

<expr><literal type="char">'\140'</literal></expr>, <expr><literal type="char">'\101'</literal></expr>, <expr><literal type="char">'\102'</literal></expr>, <expr><literal type="char">'\103'</literal></expr>, <expr><literal type="char">'\104'</literal></expr>, <expr><literal type="char">'\105'</literal></expr>, <expr><literal type="char">'\106'</literal></expr>, <expr><literal type="char">'\107'</literal></expr>,

<expr><literal type="char">'\110'</literal></expr>, <expr><literal type="char">'\111'</literal></expr>, <expr><literal type="char">'\112'</literal></expr>, <expr><literal type="char">'\113'</literal></expr>, <expr><literal type="char">'\114'</literal></expr>, <expr><literal type="char">'\115'</literal></expr>, <expr><literal type="char">'\116'</literal></expr>, <expr><literal type="char">'\117'</literal></expr>,

<expr><literal type="char">'\120'</literal></expr>, <expr><literal type="char">'\121'</literal></expr>, <expr><literal type="char">'\122'</literal></expr>, <expr><literal type="char">'\123'</literal></expr>, <expr><literal type="char">'\124'</literal></expr>, <expr><literal type="char">'\125'</literal></expr>, <expr><literal type="char">'\126'</literal></expr>, <expr><literal type="char">'\127'</literal></expr>,

<expr><literal type="char">'\130'</literal></expr>, <expr><literal type="char">'\131'</literal></expr>, <expr><literal type="char">'\132'</literal></expr>, <expr><literal type="char">'\173'</literal></expr>, <expr><literal type="char">'\174'</literal></expr>, <expr><literal type="char">'\175'</literal></expr>, <expr><literal type="char">'\176'</literal></expr>, <expr><literal type="char">'\177'</literal></expr>,

<expr><literal type="char">'\200'</literal></expr>, <expr><literal type="char">'\201'</literal></expr>, <expr><literal type="char">'\202'</literal></expr>, <expr><literal type="char">'\203'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>,

<expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, <expr><literal type="char">'\215'</literal></expr>, <expr><literal type="char">'\216'</literal></expr>, <expr><literal type="char">'\217'</literal></expr>,

<expr><literal type="char">'\220'</literal></expr>, <expr><literal type="char">'\221'</literal></expr>, <expr><literal type="char">'\222'</literal></expr>, <expr><literal type="char">'\223'</literal></expr>, <expr><literal type="char">'\224'</literal></expr>, <expr><literal type="char">'\225'</literal></expr>, <expr><literal type="char">'\226'</literal></expr>, <expr><literal type="char">'\227'</literal></expr>,

<expr><literal type="char">'\230'</literal></expr>, <expr><literal type="char">'\231'</literal></expr>, <expr><literal type="char">'\232'</literal></expr>, <expr><literal type="char">'\233'</literal></expr>, <expr><literal type="char">'\234'</literal></expr>, <expr><literal type="char">'\235'</literal></expr>, <expr><literal type="char">'\236'</literal></expr>, <expr><literal type="char">'\237'</literal></expr>,

<expr><literal type="char">'\240'</literal></expr>, <expr><literal type="char">'\241'</literal></expr>, <expr><literal type="char">'\242'</literal></expr>, <expr><literal type="char">'\243'</literal></expr>, <expr><literal type="char">'\244'</literal></expr>, <expr><literal type="char">'\245'</literal></expr>, <expr><literal type="char">'\246'</literal></expr>, <expr><literal type="char">'\247'</literal></expr>,

<expr><literal type="char">'\250'</literal></expr>, <expr><literal type="char">'\251'</literal></expr>, <expr><literal type="char">'\252'</literal></expr>, <expr><literal type="char">'\253'</literal></expr>, <expr><literal type="char">'\254'</literal></expr>, <expr><literal type="char">'\255'</literal></expr>, <expr><literal type="char">'\256'</literal></expr>, <expr><literal type="char">'\257'</literal></expr>,

<expr><literal type="char">'\260'</literal></expr>, <expr><literal type="char">'\261'</literal></expr>, <expr><literal type="char">'\262'</literal></expr>, <expr><literal type="char">'\263'</literal></expr>, <expr><literal type="char">'\264'</literal></expr>, <expr><literal type="char">'\265'</literal></expr>, <expr><literal type="char">'\266'</literal></expr>, <expr><literal type="char">'\267'</literal></expr>,

<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\271'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\273'</literal></expr>, <expr><literal type="char">'\274'</literal></expr>, <expr><literal type="char">'\275'</literal></expr>, <expr><literal type="char">'\276'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,

<expr><literal type="char">'\300'</literal></expr>, <expr><literal type="char">'\301'</literal></expr>, <expr><literal type="char">'\302'</literal></expr>, <expr><literal type="char">'\303'</literal></expr>, <expr><literal type="char">'\304'</literal></expr>, <expr><literal type="char">'\305'</literal></expr>, <expr><literal type="char">'\306'</literal></expr>, <expr><literal type="char">'\307'</literal></expr>,

<expr><literal type="char">'\310'</literal></expr>, <expr><literal type="char">'\311'</literal></expr>, <expr><literal type="char">'\312'</literal></expr>, <expr><literal type="char">'\313'</literal></expr>, <expr><literal type="char">'\314'</literal></expr>, <expr><literal type="char">'\315'</literal></expr>, <expr><literal type="char">'\316'</literal></expr>, <expr><literal type="char">'\317'</literal></expr>,

<expr><literal type="char">'\320'</literal></expr>, <expr><literal type="char">'\321'</literal></expr>, <expr><literal type="char">'\322'</literal></expr>, <expr><literal type="char">'\323'</literal></expr>, <expr><literal type="char">'\324'</literal></expr>, <expr><literal type="char">'\325'</literal></expr>, <expr><literal type="char">'\326'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>,

<expr><literal type="char">'\330'</literal></expr>, <expr><literal type="char">'\331'</literal></expr>, <expr><literal type="char">'\332'</literal></expr>, <expr><literal type="char">'\333'</literal></expr>, <expr><literal type="char">'\334'</literal></expr>, <expr><literal type="char">'\335'</literal></expr>, <expr><literal type="char">'\336'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>,

<expr><literal type="char">'\300'</literal></expr>, <expr><literal type="char">'\301'</literal></expr>, <expr><literal type="char">'\302'</literal></expr>, <expr><literal type="char">'\303'</literal></expr>, <expr><literal type="char">'\304'</literal></expr>, <expr><literal type="char">'\305'</literal></expr>, <expr><literal type="char">'\306'</literal></expr>, <expr><literal type="char">'\307'</literal></expr>,

<expr><literal type="char">'\310'</literal></expr>, <expr><literal type="char">'\311'</literal></expr>, <expr><literal type="char">'\312'</literal></expr>, <expr><literal type="char">'\313'</literal></expr>, <expr><literal type="char">'\314'</literal></expr>, <expr><literal type="char">'\315'</literal></expr>, <expr><literal type="char">'\316'</literal></expr>, <expr><literal type="char">'\317'</literal></expr>,

<expr><literal type="char">'\320'</literal></expr>, <expr><literal type="char">'\321'</literal></expr>, <expr><literal type="char">'\322'</literal></expr>, <expr><literal type="char">'\323'</literal></expr>, <expr><literal type="char">'\324'</literal></expr>, <expr><literal type="char">'\325'</literal></expr>, <expr><literal type="char">'\326'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>,

<expr><literal type="char">'\330'</literal></expr>, <expr><literal type="char">'\331'</literal></expr>, <expr><literal type="char">'\332'</literal></expr>, <expr><literal type="char">'\333'</literal></expr>, <expr><literal type="char">'\334'</literal></expr>, <expr><literal type="char">'\335'</literal></expr>, <expr><literal type="char">'\336'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

extern void

onigenc_set_default_caseconv_table(const UChar* table ARG_UNUSED)

{

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_get_left_adjust_char_head</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>OnigAsciiLowerMap</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x61</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x62</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x64</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x66</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x67</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x68</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x69</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x6a</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x6b</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x6c</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x6d</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6e</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x6f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x70</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x71</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x72</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x73</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x74</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x75</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x76</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x78</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x79</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x7a</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_ascii_apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>OnigAsciiLowerMap</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>OnigAsciiLowerMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>OnigAsciiLowerMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>OnigAsciiLowerMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>OnigAsciiLowerMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_ascii_get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x41</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x5a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">0x61</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x7a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ss_apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>ss</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x73</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="number">0xdf</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_apply_all_case_fold_with_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>map_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ess_tsett_flag</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,

<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onigenc_ascii_apply_all_case_fold</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ess_tsett_flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ss_apply_all_case_fold</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_get_case_fold_codes_by_str_with_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>map_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ess_tsett_flag</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x41</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x5a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x53</literal> <operator>&amp;&amp;</operator> <name>ess_tsett_flag</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x53</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x73</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="number">0xdf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">0x61</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x7a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x73</literal> <operator>&amp;&amp;</operator> <name>ess_tsett_flag</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x73</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x53</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="number">0xdf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xdf</literal> <operator>&amp;&amp;</operator> <name>ess_tsett_flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_not_support_get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name> <name>ctype</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigCodePoint</name><modifier>*</modifier> <name>sb_out</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier> <name><name>ranges</name><index>[]</index></name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ONIG_NO_SUPPORT_CONFIG</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_is_mbc_newline_0x0a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_ascii_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

extern int

onigenc_ascii_is_mbc_ambiguous(OnigCaseFoldType flag ARG_UNUSED,

const UChar** pp, const UChar* end ARG_UNUSED)

{

const UChar* p = *pp;

(*pp)++;

return ONIGENC_IS_ASCII_CODE_CASE_AMBIG(*p);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_single_byte_mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>p</name></type> <name>ARG_UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>e</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigCodePoint</name></type>

<name>onigenc_single_byte_mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_single_byte_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name> <name>code</name></type> <name>ARG_UNUSED</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_single_byte_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"%u out of char range"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type>

<name>onigenc_single_byte_left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>start</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_always_true_is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>s</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_always_false_is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>s</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_ascii_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>,

<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigCodePoint</name></type>

<name>onigenc_mbn_mbc_to_code</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mbn_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lower</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

extern int

onigenc_mbn_is_mbc_ambiguous(OnigEncoding enc, OnigCaseFoldType flag,

const UChar** pp, const UChar* end ARG_UNUSED)

{

const UChar* p = *pp;

if (ONIGENC_IS_MBC_ASCII(p)) {

(*pp)++;

return ONIGENC_IS_ASCII_CODE_CASE_AMBIG(*p);

}

(*pp) += enclen(enc, p);

return FALSE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb2_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb4_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb2_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb4_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_minimum_property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PosixBracketEntryType</name></type> <name><name>PBS</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Alnum"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_ALNUM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Alpha"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_ALPHA</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Blank"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_BLANK</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Cntrl"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_CNTRL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Digit"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_DIGIT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Graph"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_GRAPH</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Lower"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_LOWER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Print"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_PRINT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Punct"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_PUNCT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Space"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_SPACE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Upper"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_UPPER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"XDigit"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_XDIGIT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"ASCII"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_ASCII</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>POSIX_BRACKET_ENTRY_INIT</name><argument_list>(<argument><expr><literal type="string">"Word"</literal></expr></argument>, <argument><expr><name>ONIGENC_CTYPE_WORD</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PosixBracketEntryType</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>onigenc_strlen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pb</name> <operator>=</operator> <name>PBS</name></expr>;</init> <condition><expr><name>pb</name> <operator>&lt;</operator> <name>PBS</name> <operator>+</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>PBS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>pb</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>

<call><name>onigenc_with_ascii_strnicmp</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pb</name><operator>-&gt;</operator><name>ctype</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb2_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTYPE_IS_WORD_GRAPH_PRINT</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ONIGENC_CODE_TO_MBCLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_mb4_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTYPE_IS_WORD_GRAPH_PRINT</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ONIGENC_CODE_TO_MBCLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_with_ascii_strncmp</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>sascii</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>sascii</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>)</operator><call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>sascii</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sascii</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_with_ascii_strnicmp</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>sascii</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>sascii</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>)</operator><call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_ASCII_CODE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>sascii</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sascii</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int

resize_property_list(int new_size, const OnigCodePoint*** plist, int* psize)

{

size_t size;

const OnigCodePoint **list = *plist;

size = sizeof(OnigCodePoint*) * new_size;

if (IS_NULL(list)) {

list = (const OnigCodePoint** )xmalloc(size);

if (IS_NULL(list)) return ONIGERR_MEMORY;

}

else {

const OnigCodePoint **tmp;

tmp = (const OnigCodePoint** )xrealloc((void* )list, size);

if (IS_NULL(tmp)) return ONIGERR_MEMORY;

list = tmp;

}

*plist = list;

*psize = new_size;

return 0;

}

extern int

onigenc_property_list_add_property(UChar* name, const OnigCodePoint* prop,

hash_table_type **table, const OnigCodePoint*** plist, int *pnum,

int *psize)

{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROP_INIT_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

int r;

if (*psize &lt;= *pnum) {

int new_size = (*psize == 0 ? PROP_INIT_SIZE : *psize * 2);

r = resize_property_list(new_size, plist, psize);

if (r != 0) return r;

}

(*plist)[*pnum] = prop;

if (ONIG_IS_NULL(*table)) {

*table = onig_st_init_strend_table_with_size(PROP_INIT_SIZE);

if (ONIG_IS_NULL(*table)) return ONIGERR_MEMORY;

}

*pnum = *pnum + 1;

onig_st_insert_strend(*table, name, name + strlen((char* )name),

(hash_data_type )(*pnum + ONIGENC_MAX_STD_CTYPE));

return 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_ascii_only_case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigUChar</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>flags</name> <init>= <expr><operator>*</operator><name>flagP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codepoint_length</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codepoint_length</name> <operator>=</operator> <call><name>ONIGENC_PRECISE_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>codepoint_length</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>codepoint_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>flags</name> <operator>^=</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>flagP</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>

<name>onigenc_single_byte_ascii_only_case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigUChar</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>flags</name> <init>= <expr><operator>*</operator><name>flagP</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>flags</name> <operator>^=</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>flagP</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
