<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\intrax8.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_INTRAX8_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_INTRAX8_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegpicture.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>IntraX8Context</name> <block>{
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name><name>j_ac_vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>j_orient_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name><name>j_dc_vlc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_quant_matrix</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prediction_table</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ScanTable</name></type> <name><name>scantable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WMV2DSPContext</name></type> <name>wdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idct_permutation</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>block_last_index</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>


<decl_stmt><decl><type><name>IntraX8DSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dquant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loopfilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>quant_dc_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>divide_quant_dc_luma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>divide_quant_dc_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scratchpad</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flat_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predicted_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raw_orient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_orient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>est_run</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <name>mb_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
}</block></struct></type> <name>IntraX8Context</name>;</typedef>












<decl_stmt><decl><type><name>int</name></type> <name>ff_intrax8_common_init</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>,
<argument><expr><name>IntraX8Context</name> <operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>IDCTDSPContext</name> <operator>*</operator><name>idsp</name></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name><name>block_last_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>int</name> <name>mb_width</name></expr></argument>, <argument><expr><name>int</name> <name>mb_height</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>ff_intrax8_common_end</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>ff_intrax8_decode_picture</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>halfpq</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>loopfilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lowdelay</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
