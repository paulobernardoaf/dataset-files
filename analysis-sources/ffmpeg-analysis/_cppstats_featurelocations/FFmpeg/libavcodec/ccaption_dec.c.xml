<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ccaption_dec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_ROWS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_COLUMNS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAG</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (var) |= ( 1 &lt;&lt; (val)) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET_FLAG</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (var) &amp;= ~( 1 &lt;&lt; (val)) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_FLAG</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (var) &amp; ( 1 &lt;&lt; (val)) )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name>ms_tb</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>





<enum>enum <name>cc_mode</name> <block>{
<decl><name>CCMODE_POPON</name></decl>,
<decl><name>CCMODE_PAINTON</name></decl>,
<decl><name>CCMODE_ROLLUP</name></decl>,
<decl><name>CCMODE_TEXT</name></decl>,
}</block>;</enum>

<enum>enum <name>cc_color_code</name> <block>{
<decl><name>CCCOL_WHITE</name></decl>,
<decl><name>CCCOL_GREEN</name></decl>,
<decl><name>CCCOL_BLUE</name></decl>,
<decl><name>CCCOL_CYAN</name></decl>,
<decl><name>CCCOL_RED</name></decl>,
<decl><name>CCCOL_YELLOW</name></decl>,
<decl><name>CCCOL_MAGENTA</name></decl>,
<decl><name>CCCOL_USERDEFINED</name></decl>,
<decl><name>CCCOL_BLACK</name></decl>,
<decl><name>CCCOL_TRANSPARENT</name></decl>,
}</block>;</enum>

<enum>enum <name>cc_font</name> <block>{
<decl><name>CCFONT_REGULAR</name></decl>,
<decl><name>CCFONT_ITALICS</name></decl>,
<decl><name>CCFONT_UNDERLINED</name></decl>,
<decl><name>CCFONT_UNDERLINED_ITALICS</name></decl>,
}</block>;</enum>

<enum>enum <name>cc_charset</name> <block>{
<decl><name>CCSET_BASIC_AMERICAN</name></decl>,
<decl><name>CCSET_SPECIAL_AMERICAN</name></decl>,
<decl><name>CCSET_EXTENDED_SPANISH_FRENCH_MISC</name></decl>,
<decl><name>CCSET_EXTENDED_PORTUGUESE_GERMAN_DANISH</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>charset_overrides</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>CCSET_BASIC_AMERICAN</name></expr>]</index> <operator>=</operator> <block>{
<expr><index>[<expr><literal type="number">0x27</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2019"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2a</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e1"</literal></expr>,
<expr><index>[<expr><literal type="number">0x5c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e9"</literal></expr>,
<expr><index>[<expr><literal type="number">0x5e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ed"</literal></expr>,
<expr><index>[<expr><literal type="number">0x5f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f3"</literal></expr>,
<expr><index>[<expr><literal type="number">0x60</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00fa"</literal></expr>,
<expr><index>[<expr><literal type="number">0x7b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e7"</literal></expr>,
<expr><index>[<expr><literal type="number">0x7c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f7"</literal></expr>,
<expr><index>[<expr><literal type="number">0x7d</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d1"</literal></expr>,
<expr><index>[<expr><literal type="number">0x7e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f1"</literal></expr>,
<expr><index>[<expr><literal type="number">0x7f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2588"</literal></expr>
}</block></expr>,
<expr><index>[<expr><name>CCSET_SPECIAL_AMERICAN</name></expr>]</index> <operator>=</operator> <block>{
<expr><index>[<expr><literal type="number">0x30</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ae"</literal></expr>,
<expr><index>[<expr><literal type="number">0x31</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00b0"</literal></expr>,
<expr><index>[<expr><literal type="number">0x32</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00bd"</literal></expr>,
<expr><index>[<expr><literal type="number">0x33</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00bf"</literal></expr>,
<expr><index>[<expr><literal type="number">0x34</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2122"</literal></expr>,
<expr><index>[<expr><literal type="number">0x35</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a2"</literal></expr>,
<expr><index>[<expr><literal type="number">0x36</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a3"</literal></expr>,
<expr><index>[<expr><literal type="number">0x37</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u266a"</literal></expr>,
<expr><index>[<expr><literal type="number">0x38</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e0"</literal></expr>,
<expr><index>[<expr><literal type="number">0x39</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00A0"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3a</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e8"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e2"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ea"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3d</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ee"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00fb"</literal></expr>,
}</block></expr>,
<expr><index>[<expr><name>CCSET_EXTENDED_SPANISH_FRENCH_MISC</name></expr>]</index> <operator>=</operator> <block>{
<expr><index>[<expr><literal type="number">0x20</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c1"</literal></expr>,
<expr><index>[<expr><literal type="number">0x21</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c9"</literal></expr>,
<expr><index>[<expr><literal type="number">0x22</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d3"</literal></expr>,
<expr><index>[<expr><literal type="number">0x23</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00da"</literal></expr>,
<expr><index>[<expr><literal type="number">0x24</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00dc"</literal></expr>,
<expr><index>[<expr><literal type="number">0x25</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00fc"</literal></expr>,
<expr><index>[<expr><literal type="number">0x26</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00b4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x27</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a1"</literal></expr>,
<expr><index>[<expr><literal type="number">0x28</literal></expr>]</index> <operator>=</operator> <literal type="string">"*"</literal></expr>,
<expr><index>[<expr><literal type="number">0x29</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2018"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2a</literal></expr>]</index> <operator>=</operator> <literal type="string">"-"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a9"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2120"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2d</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00b7"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u201c"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u201d"</literal></expr>,
<expr><index>[<expr><literal type="number">0x30</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c0"</literal></expr>,
<expr><index>[<expr><literal type="number">0x31</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c2"</literal></expr>,
<expr><index>[<expr><literal type="number">0x32</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c7"</literal></expr>,
<expr><index>[<expr><literal type="number">0x33</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c8"</literal></expr>,
<expr><index>[<expr><literal type="number">0x34</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ca"</literal></expr>,
<expr><index>[<expr><literal type="number">0x35</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00cb"</literal></expr>,
<expr><index>[<expr><literal type="number">0x36</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00eb"</literal></expr>,
<expr><index>[<expr><literal type="number">0x37</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ce"</literal></expr>,
<expr><index>[<expr><literal type="number">0x38</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00cf"</literal></expr>,
<expr><index>[<expr><literal type="number">0x39</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ef"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3a</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d9"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f9"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3d</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00db"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ab"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00bb"</literal></expr>,
}</block></expr>,
<expr><index>[<expr><name>CCSET_EXTENDED_PORTUGUESE_GERMAN_DANISH</name></expr>]</index> <operator>=</operator> <block>{
<expr><index>[<expr><literal type="number">0x20</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c3"</literal></expr>,
<expr><index>[<expr><literal type="number">0x21</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e3"</literal></expr>,
<expr><index>[<expr><literal type="number">0x22</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00cd"</literal></expr>,
<expr><index>[<expr><literal type="number">0x23</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00cc"</literal></expr>,
<expr><index>[<expr><literal type="number">0x24</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00ec"</literal></expr>,
<expr><index>[<expr><literal type="number">0x25</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d2"</literal></expr>,
<expr><index>[<expr><literal type="number">0x26</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f2"</literal></expr>,
<expr><index>[<expr><literal type="number">0x27</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d5"</literal></expr>,
<expr><index>[<expr><literal type="number">0x28</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f5"</literal></expr>,
<expr><index>[<expr><literal type="number">0x29</literal></expr>]</index> <operator>=</operator> <literal type="string">"{"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2a</literal></expr>]</index> <operator>=</operator> <literal type="string">"}"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\\"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2c</literal></expr>]</index> <operator>=</operator> <literal type="string">"^"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2d</literal></expr>]</index> <operator>=</operator> <literal type="string">"_"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2e</literal></expr>]</index> <operator>=</operator> <literal type="string">"|"</literal></expr>,
<expr><index>[<expr><literal type="number">0x2f</literal></expr>]</index> <operator>=</operator> <literal type="string">"~"</literal></expr>,
<expr><index>[<expr><literal type="number">0x30</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x31</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x32</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d6"</literal></expr>,
<expr><index>[<expr><literal type="number">0x33</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f6"</literal></expr>,
<expr><index>[<expr><literal type="number">0x34</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00df"</literal></expr>,
<expr><index>[<expr><literal type="number">0x35</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a5"</literal></expr>,
<expr><index>[<expr><literal type="number">0x36</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a4"</literal></expr>,
<expr><index>[<expr><literal type="number">0x37</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00a6"</literal></expr>,
<expr><index>[<expr><literal type="number">0x38</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00c5"</literal></expr>,
<expr><index>[<expr><literal type="number">0x39</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00e5"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3a</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00d8"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3b</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u00f8"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3c</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u250c"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3d</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2510"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3e</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2514"</literal></expr>,
<expr><index>[<expr><literal type="number">0x3f</literal></expr>]</index> <operator>=</operator> <literal type="string">"\u2518"</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pac2_attribs</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= 
<expr><block>{
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_GREEN</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_GREEN</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_BLUE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_BLUE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_CYAN</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_CYAN</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_RED</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_RED</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_YELLOW</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_YELLOW</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_MAGENTA</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_MAGENTA</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_ITALICS</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED_ITALICS</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_REGULAR</name></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>CCCOL_WHITE</name></expr>, <expr><name>CCFONT_UNDERLINED</name></expr>, <expr><literal type="number">28</literal></expr> }</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>Screen</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>characters</name><index>[<expr><name>SCREEN_ROWS</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>charsets</name><index>[<expr><name>SCREEN_ROWS</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>colors</name><index>[<expr><name>SCREEN_ROWS</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fonts</name><index>[<expr><name>SCREEN_ROWS</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int16_t</name></type> <name>row_used</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>CCaptionSubContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>real_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name></type> <name><name>screen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cursor_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cursor_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cursor_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cursor_font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cursor_charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rollup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>cc_mode</name></name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>startv_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_touched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_real_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>prev_cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pktbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pktbuf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>readorder</name></decl>;</decl_stmt>
}</block></struct></type> <name>CCaptionSubContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_ROLLUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rollup</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_subtitle_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Monospace"</literal></expr></argument>,
<argument><expr><name>ASS_DEFAULT_FONT_SIZE</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_COLOR</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BACK_COLOR</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BOLD</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_ITALIC</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_UNDERLINE</name></expr></argument>,
<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>ASS_DEFAULT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>close_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>row_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>row_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_ROLLUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rollup</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_font</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_color</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_real_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen_touched</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>write_char</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>col</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>charsets</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>SCREEN_COLUMNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>row</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>font</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_font</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>charset</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_BASIC_AMERICAN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>col</name> <operator>==</operator> <name>SCREEN_COLUMNS</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>row</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Data Ignored since exceeding screen width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_cc_data_pair</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cc_data_pair</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cc_valid</name> <init>= <expr><operator>(</operator><operator>*</operator><name>cc_data_pair</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cc_type</name> <init>= <expr><operator>*</operator><name>cc_data_pair</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cc_valid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cc_type</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>cc_type</name><operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_parity</name><argument_list>(<argument><expr><name><name>cc_data_pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_parity</name><argument_list>(<argument><expr><name><name>cc_data_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc_data_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cc_data_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFA</literal> <operator>||</operator> <name><name>cc_data_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFC</literal> <operator>||</operator> <name><name>cc_data_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFD</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cc_data_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cc_data_pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cc_type</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>cc_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>cc_data_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc_data_pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>get_writing_screen</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CCMODE_POPON</name></expr>:</case>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name></name> <operator>+</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr>;</return>
<case>case <expr><name>CCMODE_PAINTON</name></expr>:</case>
<case>case <expr><name>CCMODE_ROLLUP</name></expr>:</case>
<case>case <expr><name>CCMODE_TEXT</name></expr>:</case>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>roll_up</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>keep_lines</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>CCMODE_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>get_writing_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>keep_lines</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rollup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>-</operator> <name>keep_lines</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>UNSET_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keep_lines</name> <operator>&amp;&amp;</operator> <name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_row</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>-</operator> <name>keep_lines</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SCREEN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SCREEN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SCREEN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>charsets</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>charsets</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SCREEN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name>i_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name>i_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UNSET_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>capture_screen</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tab</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>cc_font</name></name></type> <name>prev_font</name> <init>= <expr><name>CCFONT_REGULAR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>charsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>charset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>CCSET_BASIC_AMERICAN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>tab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>charsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>seen_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>charset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>CCSET_BASIC_AMERICAN</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>tab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>ASS_DEFAULT_PLAYRESX</name> <operator>*</operator> <operator>(</operator><literal type="number">0.1</literal> <operator>+</operator> <literal type="number">0.0250</literal> <operator>*</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ASS_DEFAULT_PLAYRESY</name> <operator>*</operator> <operator>(</operator><literal type="number">0.1</literal> <operator>+</operator> <literal type="number">0.0533</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"{\\an7}{\\pos(%d,%d)}"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SCREEN_COLUMNS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_tag</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s_tag</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_font</name> <operator>!=</operator> <name><name>font</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>prev_font</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CCFONT_ITALICS</name></expr>:</case>
<expr_stmt><expr><name>e_tag</name> <operator>=</operator> <literal type="string">"{\\i0}"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CCFONT_UNDERLINED</name></expr>:</case>
<expr_stmt><expr><name>e_tag</name> <operator>=</operator> <literal type="string">"{\\u0}"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CCFONT_UNDERLINED_ITALICS</name></expr>:</case>
<expr_stmt><expr><name>e_tag</name> <operator>=</operator> <literal type="string">"{\\u0}{\\i0}"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name><name>font</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CCFONT_ITALICS</name></expr>:</case>
<expr_stmt><expr><name>s_tag</name> <operator>=</operator> <literal type="string">"{\\i1}"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CCFONT_UNDERLINED</name></expr>:</case>
<expr_stmt><expr><name>s_tag</name> <operator>=</operator> <literal type="string">"{\\u1}"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CCFONT_UNDERLINED_ITALICS</name></expr>:</case>
<expr_stmt><expr><name>s_tag</name> <operator>=</operator> <literal type="string">"{\\u1}{\\i1}"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_font</name> <operator>=</operator> <name><name>font</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>charset_overrides</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>charset</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>override</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>e_tag</name></expr></argument>, <argument><expr><name>s_tag</name></expr></argument>, <argument><expr><name>override</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_char</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>seen_char</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s\\h"</literal></expr></argument>, <argument><expr><name>e_tag</name></expr></argument>, <argument><expr><name>s_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%c"</literal></expr></argument>, <argument><expr><name>e_tag</name></expr></argument>, <argument><expr><name>s_tag</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_char</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reap_screen</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>startv_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>startv_time</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<return>return <expr><call><name>capture_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_textattr</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lo</name> <operator>-</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>get_writing_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_color</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_font</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_pac</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>row_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>hi</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0e</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><name>lo</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>get_writing_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>row_map</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Invalid pac index encountered\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lo</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>=</operator> <name><name>row_map</name><index>[<expr><name>index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_color</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>lo</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_font</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>lo</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_BASIC_AMERICAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>lo</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_edm</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reap_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reap_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_eoc</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_edm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name> <operator>=</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reap_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_delete_end_of_row</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>get_writing_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_char</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>get_writing_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>hi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x11</literal></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_SPECIAL_AMERICAN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x12</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_EXTENDED_SPANISH_FRENCH_MISC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x13</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_EXTENDED_PORTUGUESE_GERMAN_DANISH</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_charset</name></name> <operator>=</operator> <name>CCSET_BASIC_AMERICAN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>lo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>write_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>CCMODE_POPON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen_touched</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"(%c,%c)\n"</literal></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"(%c)\n"</literal></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_cc608</name><parameter_list>(<parameter><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>lo</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>hi</name> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>lo</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&lt;=</operator> <literal type="number">0x5f</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>(</operator><name>hi</name> <operator>&gt;=</operator> <literal type="number">0x11</literal> <operator>&amp;&amp;</operator> <name>hi</name> <operator>&lt;=</operator> <literal type="number">0x17</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lo</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_pac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator> <name>hi</name> <operator>==</operator> <literal type="number">0x11</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&lt;=</operator> <literal type="number">0x2f</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>hi</name> <operator>==</operator> <literal type="number">0x17</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&gt;=</operator> <literal type="number">0x2e</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&lt;=</operator> <literal type="number">0x2f</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_textattr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hi</name> <operator>==</operator> <literal type="number">0x14</literal> <operator>||</operator> <name>hi</name> <operator>==</operator> <literal type="number">0x15</literal> <operator>||</operator> <name>hi</name> <operator>==</operator> <literal type="number">0x1c</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>lo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_POPON</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x24</literal></expr>:</case>
<expr_stmt><expr><call><name>handle_delete_end_of_row</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x25</literal></expr>:</case>
<case>case <expr><literal type="number">0x26</literal></expr>:</case>
<case>case <expr><literal type="number">0x27</literal></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rollup</name></name> <operator>=</operator> <name>lo</name> <operator>-</operator> <literal type="number">0x23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_ROLLUP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x29</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_PAINTON</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2b</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CCMODE_TEXT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2c</literal></expr>:</case>

<expr_stmt><expr><call><name>handle_edm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2d</literal></expr>:</case>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"carriage return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reap_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>roll_up</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2e</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>screen</name></name> <operator>+</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>active_screen</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2f</literal></expr>:</case>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"handle_eoc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_eoc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown command 0x%hhx 0x%hhx\n"</literal></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hi</name> <operator>&gt;=</operator> <literal type="number">0x11</literal> <operator>&amp;&amp;</operator> <name>hi</name> <operator>&lt;=</operator> <literal type="number">0x13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hi</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hi</name> <operator>==</operator> <literal type="number">0x17</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&gt;=</operator> <literal type="number">0x21</literal> <operator>&amp;&amp;</operator> <name>lo</name> <operator>&lt;=</operator> <literal type="number">0x23</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lo</name> <operator>-</operator> <literal type="number">0x20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>handle_char</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown command 0x%hhx 0x%hhx\n"</literal></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CCaptionSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>start_time</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf_size</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Insufficient Memory of %d truncated to %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pktbuf</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktbuf</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cc_type</name> <init>= <expr><operator>*</operator><operator>(</operator><name>bptr</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>validate_cc_data_pair</name><argument_list>(<argument><expr><name>bptr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cc_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_cc608</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>bptr</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>bptr</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"cdp writing data (%s)\n"</literal></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>end_time</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>,
<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name>ms_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_real_time</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen_touched</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>real_time</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>screen_touched</name></name> <operator>&amp;&amp;</operator>
<name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_real_time</name></name> <operator>+</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>ms_tb</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_real_time</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>screen_touched</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_screen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CCaptionSubContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"real_time"</literal></expr>, <expr><literal type="string">"emit subtitle events as they are decoded for real-time display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>real_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ccaption_dec_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Closed caption Decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ccaption_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cc_dec"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Closed Caption (EIA-608 / CEA-708)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_EIA_608</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CCaptionSubContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init_decoder</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>close_decoder</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush_decoder</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ccaption_dec_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
