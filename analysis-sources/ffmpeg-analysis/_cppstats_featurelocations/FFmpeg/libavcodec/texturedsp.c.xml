<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\texturedsp.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGBA</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint8_t)(r) &lt;&lt; 0) | ((uint8_t)(g) &lt;&lt; 8) | ((uint8_t)(b) &lt;&lt; 16) | ((unsigned)(uint8_t)(a) &lt;&lt; 24))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>extract_color</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>colors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>color0</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>color1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dxtn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name>dxtn</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>color0</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">32</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>color0</name> <operator>&amp;</operator> <literal type="number">0x07E0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g0</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">64</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>color0</name> <operator>&amp;</operator> <literal type="number">0x001F</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">32</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>color1</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">32</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>color1</name> <operator>&amp;</operator> <literal type="number">0x07E0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">64</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>color1</name> <operator>&amp;</operator> <literal type="number">0x001F</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">32</literal> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dxtn</name> <operator>||</operator> <name>color0</name> <operator>&gt;</operator> <name>color1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>g0</name> <operator>+</operator> <name>g1</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>b0</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r1</name> <operator>+</operator> <name>r0</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>g1</name> <operator>+</operator> <name>g0</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>b1</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><operator>(</operator><name>r0</name> <operator>+</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>g0</name> <operator>+</operator> <name>g1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>b0</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dxt1_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>colors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color0</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color1</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extract_color</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>color0</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><name><name>colors</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt1_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dxt1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt1a_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dxt1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dxt3_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>colors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color0</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color1</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extract_color</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>color0</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>alpha_code</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alpha_values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>alpha_code</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>alpha_code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>alpha_code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>alpha_code</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_values</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><name><name>colors</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>alpha</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>premult2straight</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>r</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>g</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>b</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt2_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dxt3_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>premult2straight</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt3_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dxt3_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>void</name></type> <name>decompress_indices</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dxt5_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>colors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alpha_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color0</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>color1</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha0</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decompress_indices</name><argument_list>(<argument><expr><name>alpha_indices</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extract_color</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>color0</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_code</name> <init>= <expr><name><name>alpha_indices</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name>alpha0</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha_code</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name>alpha1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alpha0</name> <operator>&gt;</operator> <name>alpha1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>alpha_code</name><operator>)</operator> <operator>*</operator> <name>alpha0</name> <operator>+</operator>
<operator>(</operator><name>alpha_code</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>alpha1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alpha_code</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha_code</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>alpha_code</name><operator>)</operator> <operator>*</operator> <name>alpha0</name> <operator>+</operator>
<operator>(</operator><name>alpha_code</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>alpha1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>alpha</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt4_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dxt5_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>premult2straight</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt5_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dxt5_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>ycocg2rgba</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scaled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scaled</name></expr> ?</condition><then> <expr><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>co</name> <init>= <expr><operator>(</operator><name>r</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cg</name> <init>= <expr><operator>(</operator><name>g</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>co</name> <operator>-</operator> <name>cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>co</name> <operator>-</operator> <name>cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>scaled</name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt5y_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>dxt5_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ycocg2rgba</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt5ys_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>dxt5_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ycocg2rgba</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgtc_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>color_tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mono</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pix_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decompress_indices</name><argument_list>(<argument><expr><name>indices</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>indices</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>color_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mono</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>dst</name> <index>[<expr><name>x</name> <operator>*</operator> <name>pix_size</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>RGBA</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">255U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>pix_size</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgtc1_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mono</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pix_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>color_table</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>r0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r0</name> <operator>&gt;</operator> <name>r1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">6</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>*</operator> <name>r0</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rgtc_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>color_table</name></expr></argument>, <argument><expr><name>mono</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>pix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc1s_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc1u_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc1u_alpha_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc1u_gray_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgtc2_block_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>c0</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>c1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgtc1_block_internal</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>c1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>*</operator> <literal type="number">255</literal> <operator>-</operator> <name>r</name> <operator>*</operator> <name>r</name> <operator>-</operator> <name>g</name> <operator>*</operator> <name>g</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc2s_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc2_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc2u_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rgtc2_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxn3dc_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rgtc2_block_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_texturedsp_init</name><parameter_list>(<parameter><decl><type><name>TextureDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt1_block</name></name> <operator>=</operator> <name>dxt1_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt1a_block</name></name> <operator>=</operator> <name>dxt1a_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt2_block</name></name> <operator>=</operator> <name>dxt2_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt3_block</name></name> <operator>=</operator> <name>dxt3_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt4_block</name></name> <operator>=</operator> <name>dxt4_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt5_block</name></name> <operator>=</operator> <name>dxt5_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt5y_block</name></name> <operator>=</operator> <name>dxt5y_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt5ys_block</name></name> <operator>=</operator> <name>dxt5ys_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc1s_block</name></name> <operator>=</operator> <name>rgtc1s_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc1u_block</name></name> <operator>=</operator> <name>rgtc1u_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc1u_gray_block</name></name> <operator>=</operator> <name>rgtc1u_gray_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc1u_alpha_block</name></name> <operator>=</operator> <name>rgtc1u_alpha_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc2s_block</name></name> <operator>=</operator> <name>rgtc2s_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc2u_block</name></name> <operator>=</operator> <name>rgtc2u_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxn3dc_block</name></name> <operator>=</operator> <name>dxn3dc_block</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
