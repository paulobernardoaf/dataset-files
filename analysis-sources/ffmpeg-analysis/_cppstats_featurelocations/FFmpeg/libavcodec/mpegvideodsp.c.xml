<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegvideodsp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodsp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gmc1_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x16</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y16</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>y16</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>y16</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y16</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y16</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_gmc_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dxx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dxy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dyx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dyy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>vx</name></decl>, <decl><type ref="prev"/><name>vy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vx</name> <operator>=</operator> <name>ox</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_x</name> <init>= <expr><name>vx</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_y</name> <init>= <expr><name>vy</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frac_x</name> <init>= <expr><name>src_x</name> <operator>&amp;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frac_y</name> <init>= <expr><name>src_y</name> <operator>&amp;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_x</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_x</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_y</name> <operator>&lt;</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>src_x</name> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>frac_x</name><operator>)</operator> <operator>+</operator>
<name><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>frac_x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>frac_y</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>frac_x</name><operator>)</operator> <operator>+</operator>
<name><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>frac_x</name><operator>)</operator> <operator>*</operator> <name>frac_y</name> <operator>+</operator>
<name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>src_x</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>frac_x</name><operator>)</operator> <operator>+</operator>
<name><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>frac_x</name><operator>)</operator> <operator>*</operator> <name>s</name> <operator>+</operator>
<name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_y</name> <operator>&lt;</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>frac_y</name><operator>)</operator> <operator>+</operator>
<name><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <name>frac_y</name><operator>)</operator> <operator>*</operator> <name>s</name> <operator>+</operator>
<name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vx</name> <operator>+=</operator> <name>dxx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vy</name> <operator>+=</operator> <name>dyx</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ox</name> <operator>+=</operator> <name>dxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oy</name> <operator>+=</operator> <name>dyy</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpegvideodsp_init</name><parameter_list>(<parameter><decl><type><name>MpegVideoDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>gmc1</name></name> <operator>=</operator> <name>gmc1_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>gmc</name></name> <operator>=</operator> <name>ff_gmc_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mpegvideodsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mpegvideodsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
