<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacsbr_fixed.c">























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbrdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbr_fixed_tablegen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbrdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>vlc_sbr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>aacsbr_func_ptr_init</name><parameter_list>(<parameter><decl><type><name>AACSBRContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CONST_LN2</name> <init>= <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.6931471806</literal><operator>/</operator><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CONST_RECIP_LN2</name> <init>= <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.7213475204</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CONST_076923</name> <init>= <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.76923076923076923077f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>fixed_log_table</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <macro><name>Q31</name><argument_list>(<argument><literal type="number">1.0</literal>/<literal type="number">11</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fixed_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>xpow</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xpow</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>xpow</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name><name>fixed_log_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xpow</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name><name>fixed_log_table</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>fixed_exp_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">720</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">5040</literal></expr></argument>)</argument_list></call></expr>, <macro><name>Q31</name><argument_list>(<argument><literal type="number">1.0</literal>/<literal type="number">40320</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fixed_exp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>xpow</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0x800000</literal> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xpow</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>xpow</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xpow</name> <operator>*</operator> <name><name>fixed_exp_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_bands</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>bands</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_bands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>previous</name></decl>, <decl><type ref="prev"/><name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>, <decl><type ref="prev"/><name>prod</name></decl>, <decl><type ref="prev"/><name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>stop</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>/</operator> <name>start</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>base</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>fixed_log</name><argument_list>(<argument><expr><name>base</name> <operator>-</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>base</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>nz</name><operator>)</operator><operator>*</operator><name>CONST_LN2</name><operator>)</operator> <operator>/</operator> <name>num_bands</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>fixed_exp</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prod</name> <operator>=</operator> <name>start</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_bands</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>prod</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>prod</name> <operator>*</operator> <name>base</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>present</name> <operator>=</operator> <operator>(</operator><name>prod</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bands</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>present</name> <operator>-</operator> <name>previous</name></expr>;</expr_stmt>
<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>present</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bands</name><index>[<expr><name>num_bands</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>stop</name> <operator>-</operator> <name>previous</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_dequant</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_aac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_aac</name> <operator>==</operator> <name>TYPE_CPE</name> <operator>&amp;&amp;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><ternary><condition><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_amp_res</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pan_offset</name> <init>= <expr><ternary><condition><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_amp_res</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bs_freq_res</name><index>[<expr><name>e</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>fac</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>env_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>alpha</name> <operator>+</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">759250125</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <operator>(</operator><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&gt;</operator> <literal type="number">66</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"envelope scalefactor overflow in dequant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>FLOAT_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <operator>(</operator><name>pan_offset</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>env_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp2</name><operator>.</operator><name>exp</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">759250125</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <operator>(</operator><name><name>temp2</name><operator>.</operator><name>exp</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fac</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>env_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>fac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>env_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>fac</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_num_noise</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>fac</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name>NOISE_FLOOR_OFFSET</name> <operator>-</operator> \
<name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>noise_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&lt;=</operator> <literal type="number">66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">12</literal> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>noise_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp2</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fac</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>noise_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>fac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>noise_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>fac</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <operator>(</operator><name>id_aac</name> <operator>==</operator> <name>TYPE_CPE</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><ternary><condition><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bs_amp_res</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bs_num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>bs_freq_res</name><index>[<expr><name>e</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>temp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>env_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">759250125</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <operator>(</operator><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp1</name><operator>.</operator><name>exp</name></name> <operator>&gt;</operator> <literal type="number">66</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"envelope scalefactor overflow in dequant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>FLOAT_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>env_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>temp1</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bs_num_noise</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>noise_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>=</operator> <name>NOISE_FLOOR_OFFSET</name> <operator>-</operator> \
<name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>noise_facs_q</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>noise_facs</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_inverse_filter</name><argument_list>(<argument><expr><name>SBRDSPContext</name> <operator>*</operator><name>dsp</name></expr></argument>,
<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>alpha0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>alpha1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><specifier>const</specifier> <name>int</name> <name><name>X_low</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>int</name> <name>k0</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k0</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name><name>phi</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>a00</name></decl>, <decl><type ref="prev"/><name>a01</name></decl>, <decl><type ref="prev"/><name>a10</name></decl>, <decl><type ref="prev"/><name>a11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>dk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>autocorrelate</name></name><argument_list>(<argument><expr><name><name>X_low</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dk</name> <operator>=</operator> <call><name>av_sub_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_0999999</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dk</name><operator>.</operator><name>mant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a10</name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a11</name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>temp_real</name></decl>, <decl><type ref="prev"/><name>temp_im</name></decl>;</decl_stmt>
<expr_stmt><expr><name>temp_real</name> <operator>=</operator> <call><name>av_sub_sf</name><argument_list>(<argument><expr><call><name>av_sub_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_im</name> <operator>=</operator> <call><name>av_sub_sf</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a10</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp_real</name></expr></argument>, <argument><expr><name>dk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a11</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp_im</name></expr></argument>, <argument><expr><name>dk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a00</name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a01</name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>temp_real</name></decl>, <decl><type ref="prev"/><name>temp_im</name></decl>;</decl_stmt>
<expr_stmt><expr><name>temp_real</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a10</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a11</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_im</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_sub_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a11</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a10</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_real</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>-</operator><name><name>temp_real</name><operator>.</operator><name>mant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_im</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>-</operator><name><name>temp_im</name><operator>.</operator><name>mant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a00</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp_real</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a01</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>temp_im</name></expr></argument>, <argument><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>a00</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a00</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a00</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>a01</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a01</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a01</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>a10</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a10</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a10</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>a11</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a11</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a11</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> \
<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> \
<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0x20000000</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> \
<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> \
<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0x20000000</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha0</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_chirp</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_bw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>bw_tab</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1610612736</literal></expr>, <expr><literal type="number">1932735283</literal></expr>, <expr><literal type="number">2104533975</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_bw</name> <operator>=</operator> <literal type="number">1288490189</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_bw</name> <operator>=</operator> <name><name>bw_tab</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_bw</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bw_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>new_bw</name> <operator>*</operator> <literal type="number">1610612736</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bw_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>new_bw</name> <operator>*</operator> <literal type="number">1946157056</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bw_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">201326592</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bw_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>new_bw</name> <operator>&lt;</operator> <literal type="number">0x2000000</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>new_bw</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_gain_calc</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,
<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>e_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name><name>limgain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">760155524</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">758351638</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">625000000</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>e</name> <operator>==</operator> <name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>e</name> <operator>==</operator> <name><name>e_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>gain_boost</name></decl>, <decl><type ref="prev"/><name>gain_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SoftFloat</name></type> <name>temp</name> <init>= <expr><call><name>av_div_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><call><name>av_int2sf</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>s_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(<argument><expr><call><name>av_div_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(<argument><expr><call><name>av_div_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(
<argument><expr><call><name>av_div_sf</name><argument_list>(
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_1</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>FLOAT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>gain_max</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>limgain</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_gains</name></name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_sqrt_sf</name><argument_list>(
<argument><expr><call><name>av_div_sf</name><argument_list>(
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_EPSILON</name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_EPSILON</name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gt_sf</name><argument_list>(<argument><expr><name>gain_max</name></expr></argument>, <argument><expr><name>FLOAT_100000</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain_max</name> <operator>=</operator> <name>FLOAT_100000</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>q_m_max</name> <init>= <expr><call><name>av_div_sf</name><argument_list>(
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain_max</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gt_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>q_m_max</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>q_m_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gt_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain_max</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>gain_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>FLOAT_0</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>gain_boost</name> <operator>=</operator> <call><name>av_sqrt_sf</name><argument_list>(
<argument><expr><call><name>av_div_sf</name><argument_list>(
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_EPSILON</name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>FLOAT_EPSILON</name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gt_sf</name><argument_list>(<argument><expr><name>gain_boost</name></expr></argument>, <argument><expr><name>FLOAT_1584893192</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain_boost</name> <operator>=</operator> <name>FLOAT_1584893192</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain_boost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain_boost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain_boost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_assemble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>Y1</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>X_high</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>e_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h_SL</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>bs_smoothing_mode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kx</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_max</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name><name>h_smooth</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">715827883</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">647472402</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">937030863</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">989249804</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">546843842</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SoftFloat</name> <argument_list>(<argument><expr><operator>*</operator><name>g_temp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">48</literal></expr>]</index> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>g_temp</name></name></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>q_temp</name><operator>)</operator><index>[<expr><literal type="number">48</literal></expr>]</index> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>q_temp</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indexnoise</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>f_indexnoise</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indexsine</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>f_indexsine</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h_SL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h_SL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>g_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env_num_env_old</name></name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>q_temp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env_num_env_old</name></name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q_temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_temp</name><index>[<expr><name>h_SL</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>m_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q_temp</name><index>[<expr><name>h_SL</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>m_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name><name>g_filt_tab</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name><name>q_filt_tab</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name> <modifier>*</modifier></type><name>g_filt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q_filt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h_SL</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name><name>e_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g_filt</name> <operator>=</operator> <name>g_filt_tab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q_filt</name> <operator>=</operator> <name>q_filt_tab</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx1</name> <init>= <expr><name>i</name> <operator>+</operator> <name>h_SL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>h_SL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>g_temp</name><index>[<expr><name>idx1</name> <operator>-</operator> <name>j</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>h_smooth</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name><name>q_temp</name><index>[<expr><name>idx1</name> <operator>-</operator> <name>j</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>h_smooth</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>g_filt</name> <operator>=</operator> <name><name>g_temp</name><index>[<expr><name>i</name> <operator>+</operator> <name>h_SL</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q_filt</name> <operator>=</operator> <name><name>q_temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>hf_g_filt</name></name><argument_list>(<argument><expr><name><name>Y1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>kx</name></expr></argument>, <argument><expr><name>X_high</name> <operator>+</operator> <name>kx</name></expr></argument>, <argument><expr><name>g_filt</name></expr></argument>, <argument><expr><name>m_max</name></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name><name>e_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>hf_apply_noise</name><index>[<expr><name>indexsine</name></expr>]</index></name><operator>(</operator><name><name>Y1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>kx</name><operator>,</operator> <name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index></name><operator>,</operator>
<name>q_filt</name><operator>,</operator> <name>indexnoise</name><operator>,</operator>
<name>kx</name><operator>,</operator> <name>m_max</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>indexsine</name><operator>&amp;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>indexsine</name><operator>+</operator><operator>(</operator><name>kx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>A</name><operator>^</operator><operator>(</operator><operator>-</operator><name>idx</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>Y1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>kx</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SoftFloat</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>s_m</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>in</name><index>[<expr><name>m</name></expr> ]</index></name><operator>.</operator><name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift2</name><operator>=</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>in</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>exp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>shift2</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in sbr_hf_assemble, shift=%d,%d\n"</literal></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>m</name></expr> ]</index></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>in</name><index>[<expr><name>m</name></expr> ]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name>A</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift2</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift2</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>m</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>in</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name>B</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>m_max</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>in</name><index>[<expr><name>m</name></expr> ]</index></name><operator>.</operator><name>exp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in sbr_hf_assemble, shift=%d\n"</literal></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>m</name></expr> ]</index></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>in</name><index>[<expr><name>m</name></expr> ]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name>A</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>indexnoise</name> <operator>=</operator> <operator>(</operator><name>indexnoise</name> <operator>+</operator> <name>m_max</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>indexsine</name> <operator>=</operator> <operator>(</operator><name>indexsine</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>f_indexnoise</name></name> <operator>=</operator> <name>indexnoise</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>f_indexsine</name></name> <operator>=</operator> <name>indexsine</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbr_template.c"</cpp:file></cpp:include>
</unit>
