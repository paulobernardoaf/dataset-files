<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\nuv.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lzo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtjpeg.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>NuvContext</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_frameheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>decomp_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decomp_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>lq</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <name><name>cq</name><index>[<expr><literal type="number">64</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>RTJpegContext</name></type> <name>rtj</name></decl>;</decl_stmt>
}</block></struct></type> <name>NuvContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>fallback_lquant</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">55</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">62</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">77</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">92</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">101</literal></expr>,
<expr><literal type="number">72</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">99</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>fallback_cquant</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>
}</block></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>src_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_image_fill_arrays</name><argument_list>(<argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>src_data</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>get_quant</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"insufficient rtjpeg quant data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>get_quant_quality</name><parameter_list>(<parameter><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>quality</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>quality</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fallback_lquant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <name>quality</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fallback_cquant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <name>quality</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>codec_reinit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_quant_quality</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name>height</name> <operator>*</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal>
<operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>AV_LZO_OUTPUT_PADDING</name></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>RTJPEG_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate decompression buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtjpeg_decode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rtj</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lq</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>quality</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtjpeg_decode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rtj</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lq</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_size</name> <init>= <expr><name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>init_frame</name> <init>= <expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>NUV_UNCOMPRESSED</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>,
<decl><name>NUV_RTJPEG</name> <init>= <expr><literal type="char">'1'</literal></expr></init></decl>,
<decl><name>NUV_RTJPEG_IN_LZO</name> <init>= <expr><literal type="char">'2'</literal></expr></init></decl>,
<decl><name>NUV_LZO</name> <init>= <expr><literal type="char">'3'</literal></expr></init></decl>,
<decl><name>NUV_BLACK</name> <init>= <expr><literal type="char">'N'</literal></expr></init></decl>,
<decl><name>NUV_COPY_LAST</name> <init>= <expr><literal type="char">'L'</literal></expr></init></decl>
}</block> <decl><name>comptype</name></decl>;</enum>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"coded frame too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_quant</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtjpeg_decode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rtj</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lq</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>orig_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"not a nuv video frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>comptype</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>comptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUV_RTJPEG_IN_LZO</name></expr>:</case>
<case>case <expr><name>NUV_RTJPEG</name></expr>:</case>
<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NUV_COPY_LAST</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FF_REGET_BUFFER_FLAG_READONLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name>comptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUV_UNCOMPRESSED</name></expr>:</case>
<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUV_RTJPEG</name></expr>:</case>
<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUV_BLACK</name></expr>:</case>
<case>case <expr><name>NUV_COPY_LAST</name></expr>:</case>
<case>case <expr><name>NUV_LZO</name></expr>:</case>
<case>case <expr><name>NUV_RTJPEG_IN_LZO</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown compression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>minsize</name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<label><name>retry</name>:</label>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comptype</name> <operator>==</operator> <name>NUV_RTJPEG_IN_LZO</name> <operator>||</operator> <name>comptype</name> <operator>==</operator> <name>NUV_LZO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>, <argument><expr><name>AV_LZO_OUTPUT_PADDING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inlen</name> <init>= <expr><name>buf_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_lzo1x_decode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error during lzo decompression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>, <argument><expr><name>AV_LZO_OUTPUT_PADDING</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codec_frameheader</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>RTJPEG_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too small NUV video frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x000c</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown secondary frame header (wrong codec_tag?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>codec_reinit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><name>RTJPEG_HEADER_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>RTJPEG_HEADER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size_change</name> <operator>||</operator> <name>keyframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>init_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>init_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name>keyframe</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name>keyframe</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>comptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUV_LZO</name></expr>:</case>
<case>case <expr><name>NUV_UNCOMPRESSED</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"uncompressed frame too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_frame</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>NUV_RTJPEG_IN_LZO</name></expr>:</case>
<case>case <expr><name>NUV_RTJPEG</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtjpeg_decode_frame_yuv420</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rtj</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NUV_BLACK</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUV_COPY_LAST</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>orig_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codec_frameheader</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'J'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_quant</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_rtjpeg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rtj</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>codec_reinit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NuvContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_nuv_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nuv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"NuppelVideo/RTJPEG"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_NUV</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NuvContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
