<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_metadata_bsf.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_levels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_sei.h"</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>PASS</name></decl>,
<decl><name>INSERT</name></decl>,
<decl><name>REMOVE</name></decl>,
<decl><name>EXTRACT</name></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>FLIP_HORIZONTAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FLIP_VERTICAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>LEVEL_UNSET</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>LEVEL_AUTO</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>H264MetadataContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>access_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_first_au</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sample_aspect_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overscan_appropriate_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_full_range_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colour_primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transfer_characteristics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matrix_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_sample_loc_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tick_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_frame_rate_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sei_user_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delete_filler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_orientation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rotate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
}</block></struct></type> <name>H264MetadataContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_metadata_update_sps</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,
<parameter><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_vui</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_unit_x</name></decl>, <decl><type ref="prev"/><name>crop_unit_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>sar_idc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>
<name>den</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_width</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_height</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VUI_FIELD</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ctx-&gt;field &gt;= 0) { sps-&gt;vui.field = ctx-&gt;field; need_vui = 1; } } while (0)</cpp:value></cpp:define>






<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>overscan_appropriate_flag</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>overscan_appropriate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>overscan_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_format</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_top_field</name></name> <operator>=</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_bottom_field</name></name> <operator>=</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>UINT32_MAX</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>time_scale</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>num_units_in_tick</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SET_VUI_FIELD</name><argument_list>(<argument><expr><name>fixed_frame_rate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crop_unit_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>crop_unit_y</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>crop_unit_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crop_unit_y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROP</name><parameter_list>(<parameter><type><name>border</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ctx-&gt;crop_ ##border &gt;= 0) { if (ctx-&gt;crop_ ##border % unit != 0) { av_log(bsf, AV_LOG_ERROR, "Invalid value for crop_%s: " "must be a multiple of %d.\n", #border, unit); return AVERROR(EINVAL); } sps-&gt;frame_crop_ ##border ##_offset = ctx-&gt;crop_ ##border / unit; sps-&gt;frame_cropping_flag = 1; } } while (0)</cpp:value></cpp:define>











<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>crop_unit_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>crop_unit_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>crop_unit_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>crop_unit_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CROP</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>LEVEL_UNSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>LEVEL_AUTO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264LevelDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>dpb_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>framerate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name><operator>.</operator><name>bit_rate_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name><operator>.</operator><name>bit_rate_scale</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name><operator>.</operator><name>bit_rate_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name><operator>.</operator><name>bit_rate_scale</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <name>bit_rate</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>dpb_frames</name> <operator>=</operator> <ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>bitstream_restriction_flag</name></name></expr> ?</condition><then>
<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>max_dec_frame_buffering</name></name></expr> </then><else>: <expr><name>H264_MAX_DPB_FRAMES</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing_info_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>time_scale</name></name> <operator>/</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>num_units_in_tick</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ff_h264_guess_level</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></argument>, <argument><expr><name>bit_rate</name></expr></argument>, <argument><expr><name>framerate</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>dpb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level_idc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Stream does not appear to "</literal>
<literal type="string">"conform to any level: using level 6.2.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level_idc</name> <operator>=</operator> <literal type="number">62</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>level_idc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level_idc</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">66</literal> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">77</literal> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <name>level_idc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_vui</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_metadata_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>has_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawAUD</name></type> <name>aud</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No NAL units in packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_AUD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name> <operator>==</operator> <name>REMOVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name> <operator>==</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>primary_pic_type_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x084</literal></expr>, 
<expr><literal type="number">0x0a5</literal></expr>, 
<expr><literal type="number">0x0e7</literal></expr>, 
<expr><literal type="number">0x210</literal></expr>, 
<expr><literal type="number">0x318</literal></expr>, 
<expr><literal type="number">0x294</literal></expr>, 
<expr><literal type="number">0x3bd</literal></expr>, 
<expr><literal type="number">0x3ff</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>primary_pic_type_mask</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SLICE</name> <operator>||</operator>
<name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>primary_pic_type_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>primary_pic_type_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>slice_type</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>primary_pic_type_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>primary_pic_type_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>primary_pic_type_mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>primary_pic_type_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No usable primary_pic_type: "</literal>
<literal type="string">"invalid slice types?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>aud</name> <operator>=</operator> <operator>(</operator><name>H264RawAUD</name><operator>)</operator> <block>{
<expr><operator>.</operator><name><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_AUD</name></expr>,
<expr><operator>.</operator><name>primary_pic_type</name> <operator>=</operator> <name>j</name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_NAL_AUD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to insert AUD.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>has_sps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h264_metadata_update_sps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>has_sps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>has_sps</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>done_first_au</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSEIPayload</name></type> <name>payload</name> <init>= <expr><block>{
<expr><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIUserDataUnregistered</name> <modifier>*</modifier></type><name>udu</name> <init>=
<expr><operator>&amp;</operator><name><name>payload</name><operator>.</operator><name>payload</name><operator>.</operator><name>user_data_unregistered</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ?</condition><then> <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr> </then><else>: <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>invalid_user_data</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>udu</name><operator>-&gt;</operator><name>uuid_iso_iec_11578</name><index>[<expr><name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>udu</name><operator>-&gt;</operator><name>uuid_iso_iec_11578</name><index>[<expr><name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>udu</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>udu</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>udu</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>udu</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>udu</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udu</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sei_user_data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_h264_add_sei_message</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to add user data SEI "</literal>
<literal type="string">"message to access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>invalid_user_data</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid user data: "</literal>
<literal type="string">"must be \"UUID+string\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delete_filler</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_FILLER_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SEI</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>==</operator>
<name>H264_SEI_TYPE_FILLER_PAYLOAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_cbs_h264_delete_sei_message</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>display_orientation</name></name> <operator>!=</operator> <name>PASS</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>H264_NAL_SEI</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sei</name> <operator>=</operator> <name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSEIDisplayOrientation</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>matrix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>!=</operator>
<name>H264_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>display_orientation</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>display_orientation</name></name> <operator>==</operator> <name>REMOVE</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>display_orientation</name></name> <operator>==</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_cbs_h264_delete_sei_message</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matrix</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matrix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_display_rotation_set</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>,
<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>anticlockwise_rotation</name></name> <operator>*</operator>
<literal type="number">180.0</literal> <operator>/</operator> <literal type="number">65536.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_display_matrix_flip</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>hor_flip</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ver_flip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_packet_add_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>matrix</name></expr></argument>,
<argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to attach extracted "</literal>
<literal type="string">"displaymatrix side data to packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>display_orientation</name></name> <operator>==</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSEIPayload</name></type> <name>payload</name> <init>= <expr><block>{
<expr><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIDisplayOrientation</name> <modifier>*</modifier></type><name>disp</name> <init>=
<expr><operator>&amp;</operator><name><name>payload</name><operator>.</operator><name>payload</name><operator>.</operator><name>display_orientation</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hflip</name></decl>, <decl><type ref="prev"/><name>vflip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hflip</name> <operator>=</operator> <name>vflip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hflip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vflip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_display_matrix_flip</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>hflip</name></expr></argument>, <argument><expr><name>vflip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>av_display_rotation_get</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>angle</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">180.0</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;=</operator> <literal type="number">180.0</literal> <operator>)</operator> <operator>||</operator>
<name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input display matrix is not "</literal>
<literal type="string">"representable in H.264 parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>hor_flip</name></name> <operator>=</operator> <name>hflip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>ver_flip</name></name> <operator>=</operator> <name>vflip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>anticlockwise_rotation</name></name> <operator>=</operator>
<operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>rint</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>angle</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><name>angle</name></expr>
</then><else>: <expr><name>angle</name> <operator>+</operator> <literal type="number">360.0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator>
<literal type="number">65536.0</literal> <operator>/</operator> <literal type="number">360.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>write</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_sps</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>done_first_au</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotate</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>anticlockwise_rotation</name></name> <operator>=</operator>
<operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>rint</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotate</name></name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>rotate</name></name></expr>
</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>rotate</name></name> <operator>+</operator> <literal type="number">360.0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator>
<literal type="number">65536.0</literal> <operator>/</operator> <literal type="number">360.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>write</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>hor_flip</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flip</name></name> <operator>&amp;</operator> <name>FLIP_HORIZONTAL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>ver_flip</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flip</name></name> <operator>&amp;</operator> <name>FLIP_VERTICAL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>write</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>display_orientation_repetition_period</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_h264_add_sei_message</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to add display orientation "</literal>
<literal type="string">"SEI message to access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>done_first_au</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_metadata_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h264_metadata_update_sps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_metadata_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(H264MetadataContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_BSF_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>h264_metadata_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Access Unit Delimiter NAL units"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><name>PASS</name></expr>, <expr><name>REMOVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"aud"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INSERT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REMOVE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sample_aspect_ratio"</literal></expr>, <expr><literal type="string">"Set sample aspect ratio (table E-1)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_aspect_ratio</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"overscan_appropriate_flag"</literal></expr>, <expr><literal type="string">"Set VUI overscan appropriate flag"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overscan_appropriate_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video_format"</literal></expr>, <expr><literal type="string">"Set video format (table E-2)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"video_full_range_flag"</literal></expr>, <expr><literal type="string">"Set video full range flag"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"colour_primaries"</literal></expr>, <expr><literal type="string">"Set colour primaries (table E-3)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"transfer_characteristics"</literal></expr>, <expr><literal type="string">"Set transfer characteristics (table E-4)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"matrix_coefficients"</literal></expr>, <expr><literal type="string">"Set matrix coefficients (table E-5)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_sample_loc_type"</literal></expr>, <expr><literal type="string">"Set chroma sample location type (figure E-1)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_sample_loc_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tick_rate"</literal></expr>, <expr><literal type="string">"Set VUI tick rate (num_units_in_tick / time_scale)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fixed_frame_rate_flag"</literal></expr>, <expr><literal type="string">"Set VUI fixed frame rate flag"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fixed_frame_rate_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_left"</literal></expr>, <expr><literal type="string">"Set left border crop offset"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_left</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>H264_MAX_WIDTH</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crop_right"</literal></expr>, <expr><literal type="string">"Set right border crop offset"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_right</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>H264_MAX_WIDTH</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crop_top"</literal></expr>, <expr><literal type="string">"Set top border crop offset"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_top</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>H264_MAX_HEIGHT</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crop_bottom"</literal></expr>, <expr><literal type="string">"Set bottom border crop offset"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_bottom</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>H264_MAX_HEIGHT</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sei_user_data"</literal></expr>, <expr><literal type="string">"Insert SEI user data (UUID+string)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sei_user_data</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delete_filler"</literal></expr>, <expr><literal type="string">"Delete all filler (both NAL and SEI)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delete_filler</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"display_orientation"</literal></expr>, <expr><literal type="string">"Display orientation SEI"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>display_orientation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><name>PASS</name></expr>, <expr><name>EXTRACT</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"disp_or"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"disp_or"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INSERT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"disp_or"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REMOVE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"disp_or"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extract"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EXTRACT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"disp_or"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rotate"</literal></expr>, <expr><literal type="string">"Set rotation in display orientation SEI (anticlockwise angle in degrees)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rotate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>NAN</name></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">360.0</literal></expr>, <expr><operator>+</operator><literal type="number">360.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flip"</literal></expr>, <expr><literal type="string">"Set flip in display orientation SEI"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLIP_HORIZONTAL</name> <operator>|</operator> <name>FLIP_VERTICAL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"horizontal"</literal></expr>, <expr><literal type="string">"Set hor_flip"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLIP_HORIZONTAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><literal type="string">"Set ver_flip"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLIP_VERTICAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flip"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set level (table A-1)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LEVEL_UNSET</name></expr> }</block></expr>, <expr><name>LEVEL_UNSET</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"Attempt to guess level from stream properties"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LEVEL_AUTO</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"level"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, .flags = FLAGS, .unit = "level"</cpp:value></cpp:define>

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1b"</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.1"</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.2"</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.3"</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.1"</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.2"</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3"</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.1"</literal></argument>, <argument><literal type="number">31</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.2"</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4"</literal></argument>, <argument><literal type="number">40</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.1"</literal></argument>, <argument><literal type="number">41</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.2"</literal></argument>, <argument><literal type="number">42</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.1"</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.2"</literal></argument>, <argument><literal type="number">52</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.1"</literal></argument>, <argument><literal type="number">61</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.2"</literal></argument>, <argument><literal type="number">62</literal></argument>)</argument_list></macro> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVEL</name></cpp:undef>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>h264_metadata_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h264_metadata_bsf"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>h264_metadata_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>h264_metadata_codec_ids</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_h264_metadata_bsf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_metadata"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>H264MetadataContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>h264_metadata_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>h264_metadata_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>h264_metadata_close</name></expr>,
<expr><operator>.</operator><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name>h264_metadata_filter</name></expr>,
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>h264_metadata_codec_ids</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
