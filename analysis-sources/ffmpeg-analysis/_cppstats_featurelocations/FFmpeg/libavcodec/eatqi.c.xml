<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\eatqi.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aandcttab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eaidct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TqiContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bsdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanTable</name></type> <name>intra_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bitstream_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitstream_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <name>mb_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>TqiContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tqi_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TqiContext</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bsdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable_permutation</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><name>FF_IDCT_PERM_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>, <argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mpeg12_init_vlcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tqi_decode_mb</name><argument_list>(<argument><expr><name>TqiContext</name> <operator>*</operator><name>t</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_blocks</name></name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_mpeg1_decode_block_intra</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>last_dc</name></name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ac-tex damaged at %d %d\n"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tqi_idct_put</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>, <argument><expr><name>AVFrame</name> <operator>*</operator><name>frame</name></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TqiContext</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_y</name></expr></argument> , <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>linesize</name></expr></argument> , <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ea_idct_put_c</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tqi_calculate_qtable</name><parameter_list>(<parameter><decl><type><name>TqiContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>qscale</name> <init>= <expr><operator>(</operator><literal type="number">215</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>quant</name><operator>)</operator><operator>*</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ff_inv_aanscales</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_mpeg1_default_intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ff_inv_aanscales</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_mpeg1_default_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>qscale</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tqi_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name><operator>+</operator><name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TqiContext</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tqi_calculate_qtable</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf_size</name></name></expr></argument>,
<argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>bsdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>t</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>t</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name><name>t</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&lt;</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name><name>t</name><operator>-&gt;</operator><name>mb_x</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tqi_decode_mb</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tqi_idct_put</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<label><name>end</name>:</label>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tqi_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TqiContext</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bitstream_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_eatqi_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"eatqi"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Electronic Arts TQI Video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TQI</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TqiContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tqi_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tqi_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>tqi_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
