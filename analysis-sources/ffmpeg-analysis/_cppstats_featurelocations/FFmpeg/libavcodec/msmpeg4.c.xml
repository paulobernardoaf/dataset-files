<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\msmpeg4.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>











<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_h263_dc_for_msmpeg4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>uni_code</name></decl>, <decl><type ref="prev"/><name>uni_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ff_v2_dc_chroma_table</name><index>[<expr><literal type="number">255</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><operator>-</operator><literal type="number">256</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name><operator>=</operator> <operator>(</operator><operator>-</operator><name>level</name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name><operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>uni_code</name><operator>=</operator> <name><name>ff_mpeg4_DCtab_lum</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name> <operator>=</operator> <name><name>ff_mpeg4_DCtab_lum</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_code</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>uni_len</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uni_code</name><operator>&lt;&lt;=</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name>uni_code</name><operator>|=</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name><operator>+=</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>uni_code</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>uni_code</name><operator>|=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ff_v2_dc_lum_table</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uni_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_v2_dc_lum_table</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>uni_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name>uni_code</name><operator>=</operator> <name><name>ff_mpeg4_DCtab_chrom</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name> <operator>=</operator> <name><name>ff_mpeg4_DCtab_chrom</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_code</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>uni_len</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uni_code</name><operator>&lt;&lt;=</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name>uni_code</name><operator>|=</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name><operator>+=</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>uni_code</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>uni_code</name><operator>|=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uni_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ff_v2_dc_chroma_table</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uni_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_v2_dc_chroma_table</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>uni_len</name></expr>;</expr_stmt>

</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_msmpeg4_common_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>ff_mpeg1_dc_scale_table</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator> <name>ff_old_ff_y_dc_scale_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>ff_wmv1_c_dc_scale_table</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator> <name>ff_mpeg4_y_dc_scale_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>ff_mpeg4_c_dc_scale_table</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator> <name>ff_wmv1_y_dc_scale_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>ff_wmv1_c_dc_scale_table</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_DECODER</name></expr></cpp:if>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator> <name>ff_wmv3_dc_scale_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>ff_wmv3_dc_scale_table</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>


<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;=</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>, <argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_h_scantable</name></name></expr></argument>, <argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_v_scantable</name></name></expr></argument>, <argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name></name></expr></argument>, <argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>init_h263_dc_for_msmpeg4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_msmpeg4_coded_block_pred</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>coded_block_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xy</name></decl>, <decl><type ref="prev"/><name>wrap</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>coded_block_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>pred</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_dc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>block_size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>block_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><call><name>FASTDIV</name><argument_list>(<argument><expr><operator>(</operator><name>sum</name> <operator>+</operator> <operator>(</operator><name>scale</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_msmpeg4_pred_dc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dc_val_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dir_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>wrap</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_val</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_val</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dc_val</name><index>[ <expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>dc_val</name><index>[ <expr><operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dc_val</name><index>[ <expr><operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&lt;</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>b</name><operator>=</operator><name>c</name><operator>=</operator><literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_7REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
<asm>__asm__ <specifier>volatile</specifier>(
"movl %3, %%eax \n\t"
"shrl $1, %%eax \n\t"
"addl %%eax, %2 \n\t"
"addl %%eax, %1 \n\t"
"addl %0, %%eax \n\t"
"imull %4 \n\t"
"movl %%edx, %0 \n\t"
"movl %1, %%eax \n\t"
"imull %4 \n\t"
"movl %%edx, %1 \n\t"
"movl %2, %%eax \n\t"
"imull %4 \n\t"
"movl %%edx, %2 \n\t"
: "+b" (a), "+c" (b), "+D" (c)
: "g" (scale), "S" (ff_inverse[scale])
: "%eax", "%edx"
);</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><name>scale</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>scale</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <operator>(</operator><name>scale</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bs</name> <init>= <expr><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>wrap</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>)</operator> <operator>*</operator> <name>bs</name><operator>*</operator> <name>wrap</name> <operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>)</operator> <operator>*</operator> <name>bs</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>wrap</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>bs</name> <operator>*</operator> <name>wrap</name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <name>bs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name><operator>=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>+</operator> <operator>(</operator><name>scale</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name>scale</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>a</name><operator>=</operator> <call><name>get_dc</name><argument_list>(<argument><expr><name>dest</name><operator>-</operator><name>bs</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>scale</name><operator>*</operator><literal type="number">8</literal><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>+</operator> <operator>(</operator><name>scale</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name>scale</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>=</operator> <call><name>get_dc</name><argument_list>(<argument><expr><name>dest</name><operator>-</operator><name>bs</name><operator>*</operator><name>wrap</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>scale</name><operator>*</operator><literal type="number">8</literal><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name><operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>dc_val_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>pred</name></expr>;</return>
</block_content>}</block></function>

</unit>
