<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ffv1dec.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangecoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffv1.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_flatten</name> <name>int</name></type> <name>get_symbol_inline</name><parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_signed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>a</name> <operator>+</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name> <operator>+</operator> <literal type="number">22</literal> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>is_signed</name> <operator>&amp;&amp;</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><operator>(</operator><name>a</name> <operator>^</operator> <name>e</name><operator>)</operator> <operator>-</operator> <name>e</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>int</name></type> <name>get_symbol</name><parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_signed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_symbol_inline</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>is_signed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_vlc_symbol</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VlcState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>error_sum</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_sr_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"v:%d bias:%d error:%d drift:%d count:%d k:%d"</literal></expr></argument>,
<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bias</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>error_sum</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>drift</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>drift</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fold</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>bias</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_vlc_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_input_end</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac</name></name> <operator>!=</operator> <name>AC_GOLOMB_RICE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <name>MAX_OVERREAD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffv1dec_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name ##32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffv1dec_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_plane</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_index</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>sample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_buffer</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_buffer</name></name> <operator>+</operator> <name>w</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>run_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>sample_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>*</operator><name>pixel_stride</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name></expr>]</index></name> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packed_at_lsb</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>y</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name><operator>*</operator><name>pixel_stride</name></expr>]</index> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>y</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name><operator>*</operator><name>pixel_stride</name></expr>]</index> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sample</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice_header</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ps</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>context_count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <operator>(</operator><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <operator>(</operator><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>/=</operator> <name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>/=</operator> <name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>/</operator><name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name><operator>/</operator><name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name>
<operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PlaneContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"quant_table_index out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_tables</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>context_count</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>context_count</name></name> <operator>&lt;</operator> <name>context_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>context_count</name></name> <operator>=</operator> <name>context_count</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ps</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ps</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_sar</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ignoring invalid SAR: %u/%u\n"</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_reset_contexts</name></name> <operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_coding_mode</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>slice_coding_mode</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_by_coef</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_ry_coef</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_by_coef</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_ry_coef</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"slice_rct_y_coef out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ps</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>si</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>si</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>fs</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>si</name></expr>]</index></name></expr>;</condition> <incr><expr><name>si</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fsrc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fsrc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fssrc</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>fsrc</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>si</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fsdst</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>si</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>fsdst</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>plane_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>fsdst</name> <operator>==</operator> <name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>|=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_damaged</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PlaneContext</name> <modifier>*</modifier></type><name>psrc</name> <init>= <expr><operator>&amp;</operator><name><name>fssrc</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PlaneContext</name> <modifier>*</modifier></type><name>pdst</name> <init>= <expr><operator>&amp;</operator><name><name>fsdst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>pdst</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pdst</name></expr></argument>, <argument><expr><name>psrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdst</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fssrc</name><operator>-&gt;</operator><name>ac</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdst</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>CONTEXT_SIZE</name></expr></argument>, <argument><expr><name><name>psrc</name><operator>-&gt;</operator><name>context_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdst</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>psrc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>CONTEXT_SIZE</name> <operator>*</operator> <name><name>psrc</name><operator>-&gt;</operator><name>context_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>psrc</name><operator>-&gt;</operator><name>context_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>, <argument><expr><name><name>psrc</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pdst</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>psrc</name><operator>-&gt;</operator><name>context_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_by_coef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_rct_ry_coef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_ffv1_init_slice_state</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decode_slice_header</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_ffv1_init_slice_state</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_reset_contexts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_ffv1_clear_slice_state</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>ac</name></name> <operator>==</operator> <name>AC_GOLOMB_RICE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>micro_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<macro><name>get_rac</name><argument_list>(<argument>&amp;fs-&gt;c</argument>, <argument>(uint8_t[]) { <literal type="number">129</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ac_byte_count</name></name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>y</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,
<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>ac_byte_count</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>ac_byte_count</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>width</name> <operator>&amp;&amp;</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>||</operator> <operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>transparency</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_height</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cx</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cy</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>cx</name><operator>+</operator><name>cy</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chroma_width</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>cx</name><operator>+</operator><name>cy</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chroma_width</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> , <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_plane</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ps</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>use32bit</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_rgb_frame32</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>ps</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_rgb_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>ac</name></name> <operator>!=</operator> <name>AC_GOLOMB_RICE</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<macro><name>get_rac</name><argument_list>(<argument>&amp;fs-&gt;c</argument>, <argument>(uint8_t[]) { <literal type="number">129</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bytestream end mismatching by %d\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_quant_table</name><parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>quant_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>-</operator> <name>i</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>quant_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quant_table</name><index>[<expr><literal type="number">256</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>quant_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>quant_table</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>quant_table</name><index>[<expr><literal type="number">127</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_quant_tables</name><parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>quant_table</name><index>[<expr><name>MAX_CONTEXT_INPUTS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>context_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_quant_table</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>quant_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>context_count</name> <operator>*=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>context_count</name> <operator>&gt;</operator> <literal type="number">32768U</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>context_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_extra_header</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state2</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state2</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_build_rac_states</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0.05</literal> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid version in global header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>micro_version</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>micro_version</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name> <operator>==</operator> <name>AC_RANGE_CUSTOM_TAB</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state_transition</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>one_state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name> <operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>version</name></name><operator>&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>&gt;</operator> <literal type="number">4U</literal> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>&gt;</operator> <literal type="number">4U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma shift parameters %d %d are invalid\n"</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>||</operator>
<name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"slice count invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>MAX_QUANT_TABLES</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"quant table count %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read_quant_tables</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"read_quant_table error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_ffv1_allocate_initial_states</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>CONTEXT_SIZE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>initial_states</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>initial_states</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>pred</name> <operator>+</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>state2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>micro_version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CRC mismatch %X!\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"global: ver:%d.%d, coder:%d, colorspace: %d bpr:%d chroma:%d(%d:%d), alpha:%d slices:%dx%d qtabs:%d ec:%d intra:%d CRC:0x%08X\n"</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>micro_version</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>intra</name></name></expr></argument>,
<argument><expr><name>crc</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>context_count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_planes</name></decl>, <decl><type ref="prev"/><name>chroma_h_shift</name></decl>, <decl><type ref="prev"/><name>chroma_v_shift</name></decl>, <decl><type ref="prev"/><name>transparency</name></decl>, <decl><type ref="prev"/><name>colorspace</name></decl>, <decl><type ref="prev"/><name>bits_per_raw_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name><init>= <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid version %d in ver01 header\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name> <operator>==</operator> <name>AC_RANGE_CUSTOM_TAB</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>one_state</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>st</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid state transition %d\n"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state_transition</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>colorspace</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>bits_per_raw_sample</name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_planes</name> <operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_h_shift</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_v_shift</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transparency</name> <operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colorspace</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>transparency</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>colorspace</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>||</operator>
<name>bits_per_raw_sample</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>||</operator>
<name>chroma_planes</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>||</operator>
<name>chroma_h_shift</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>||</operator>
<name>chroma_v_shift</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>||</operator>
<name>transparency</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid change of global parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_h_shift</name> <operator>&gt;</operator> <literal type="number">4U</literal> <operator>||</operator> <name>chroma_v_shift</name> <operator>&gt;</operator> <literal type="number">4U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma shift parameters %d %d are invalid\n"</literal></expr></argument>,
<argument><expr><name>chroma_h_shift</name></expr></argument>, <argument><expr><name>chroma_v_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>colorspace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name>bits_per_raw_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>=</operator> <name>chroma_planes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <name>chroma_h_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <name>chroma_v_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name> <operator>=</operator> <name>transparency</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY9</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY10</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY12</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_planes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YA8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name><operator>&lt;=</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x22</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><literal type="number">16</literal><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P9</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P9</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P10</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P12</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P14</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P14</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P14</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P16</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P16</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"chroma subsampling not supported in this colorspace\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_0RGB32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP9</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP10</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP12</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP14</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>use32bit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>transparency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>use32bit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"colorspace not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"format not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d %d %d\n"</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>context_count</name> <operator>=</operator> <call><name>read_quant_tables</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>context_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"read_quant_table error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>max_slice_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;</operator> <name>MAX_SLICES</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>ec</name></name> <operator>&lt;</operator> <name>p</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</condition>
<incr><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>trailer</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>trailer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>trailer</name> <operator>&gt;</operator> <name>p</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <name>size</name> <operator>+</operator> <name>trailer</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>MAX_SLICES</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>max_slice_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"slice count %d is invalid (max=%d)\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>max_slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ac</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ac</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>packed_at_lsb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <operator>(</operator><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <operator>(</operator><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>/=</operator> <name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>/=</operator> <name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>/</operator> <name><name>f</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>/</operator> <name><name>f</name><operator>-&gt;</operator><name>num_v_slices</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name>
<operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PlaneContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>get_symbol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"quant_table_index out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_tables</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>context_count</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>quant_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>context_count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>context_count</name></name> <operator>&lt;</operator> <name>context_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>vlc_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>context_count</name></name> <operator>=</operator> <name>context_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_ffv1_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_extra_header</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_ffv1_init_slice_contexts</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>keystate</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>ThreadFrame</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>&gt;</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TT</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_build_rac_states</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0.05</literal> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keystate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>key_frame_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_header</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>key_frame_ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>key_frame_ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Cannot decode non-keyframe without valid keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ver:%d keyframe:%d coder:%d ec:%d slices:%d bps:%d\n"</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>ac</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trailer</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>buf_p</name><operator>-</operator><name>trailer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>trailer</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>buf_p</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_p</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice pointer chain broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_p</name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ec</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name> <init>= <expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>crc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr> </then><else>: <expr><name><name>avpkt</name><operator>-&gt;</operator><name>dts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"slice CRC mismatch %X!"</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"at %f seconds\n"</literal></expr></argument>, <argument><expr><name>ts</name><operator>*</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"at %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"slice %d, CRC: 0x%08"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf_p</name> <operator>+</operator> <name>v</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>buf_p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name> <operator>=</operator> <name>buf_p</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name>decode_slice</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pixshift</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sv</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>&gt;&gt;</operator> <name>sv</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixshift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>&gt;&gt;</operator> <name>sv</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixshift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator>
<name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,
<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_width</name></name></expr></argument>,
<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>slice_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sample_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>max_slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>quant_table_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>initial_states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>initial_states</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>context_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>initial_states</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_ffv1_init_slice_contexts</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_fields</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fsdst</name></decl></parameter>, <parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fssrc</name></decl></parameter>, <parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fsrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>micro_version</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>micro_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>chroma_planes</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>chroma_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>transparency</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>transparency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>ac</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>ac</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>ec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>intra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_damaged</name></name> <operator>=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_damaged</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>key_frame_ok</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>key_frame_ok</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>packed_at_lsb</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>packed_at_lsb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fsrc</name><operator>-&gt;</operator><name>version</name></name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_x</name></name> <operator>=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_y</name></name> <operator>=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsdst</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name><name>fssrc</name><operator>-&gt;</operator><name>slice_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fsrc</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fdst</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>picture</name> <init>= <expr><name><name>fdst</name><operator>-&gt;</operator><name>picture</name></name></expr></init></decl>, <decl><type ref="prev"/><name>last_picture</name> <init>= <expr><name><name>fdst</name><operator>-&gt;</operator><name>last_picture</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>initial_states</name><index>[<expr><name>MAX_QUANT_TABLES</name></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FFV1Context</name></name> <modifier>*</modifier></type><name><name>slice_context</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>initial_states</name></expr></argument>, <argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>initial_states</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>initial_states</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>slice_context</name></expr></argument>, <argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>slice_context</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>slice_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fdst</name></expr></argument>, <argument><expr><name>fsrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fdst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>initial_states</name></name></expr></argument>, <argument><expr><name>initial_states</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>initial_states</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>slice_context</name></name></expr></argument>, <argument><expr><name>slice_context</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>slice_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdst</name><operator>-&gt;</operator><name>picture</name></name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdst</name><operator>-&gt;</operator><name>last_picture</name></name> <operator>=</operator> <name>last_picture</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>fdst</name><operator>-&gt;</operator><name>num_h_slices</name></name> <operator>*</operator> <name><name>fdst</name><operator>-&gt;</operator><name>num_v_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fssrc</name> <init>= <expr><name><name>fsrc</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fsdst</name> <init>= <expr><name><name>fdst</name><operator>-&gt;</operator><name>slice_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_fields</name><argument_list>(<argument><expr><name>fsdst</name></expr></argument>, <argument><expr><name>fssrc</name></expr></argument>, <argument><expr><name>fsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>fdst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>fdst</name><operator>-&gt;</operator><name>sample_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>fdst</name><operator>-&gt;</operator><name>max_slice_count</name></name> <operator>==</operator> <name><name>fsrc</name><operator>-&gt;</operator><name>max_slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdst</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fsrc</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdst</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fsrc</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fdst</name><operator>-&gt;</operator><name>fsrc</name></name> <operator>=</operator> <name>fsrc</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ffv1_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ffv1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"FFmpeg video codec #1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FFV1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFV1Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_ffv1_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>update_thread_context</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
