<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\xxan.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>XanContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>scratch_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
}</block></struct></type> <name>XanContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xan_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xan_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame height: %d.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame width: %d.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>+</operator> <literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xan_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xan_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_unpack_luma</name><parameter_list>(<parameter><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tree_size</name></decl>, <decl><type ref="prev"/><name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tree_root</name></decl>, <decl><type ref="prev"/><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>tree</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_off</name> <init>= <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tree_size</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tree_root</name> <operator>=</operator> <name>eof</name> <operator>+</operator> <name>tree_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>tree_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tree_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start_off</name> <operator>+</operator> <name>node</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>bit</name> <operator>-</operator> <name>eof</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>eof</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&lt;</operator> <name>eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&gt;</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tree_root</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>dst</name> <operator>!=</operator> <name>dst_end</name></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_unpack</name><parameter_list>(<parameter><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>orig_dest</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dest_end</name> <init>= <expr><name>dest</name> <operator>+</operator> <name>dest_len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>dest</name> <operator>&lt;</operator> <name>dest_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>, <decl><type ref="prev"/><name>back</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>size2</name> <operator>&gt;</operator> <name>dest_end</name> <operator>-</operator> <name>dest</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>size2</name> <operator>&gt;</operator> <name>dest_end</name> <operator>||</operator>
<name>dest</name> <operator>-</operator> <name>orig_dest</name> <operator>+</operator> <name>size</name> <operator>&lt;</operator> <name>back</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>back</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><name>opcode</name> <operator>&gt;=</operator> <literal type="number">0xfc</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>finish</name></expr> ?</condition><then> <expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dest_end</name> <operator>-</operator> <name>dest</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>finish</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>dest</name> <operator>-</operator> <name>orig_dest</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_decode_chroma</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>chroma_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>U</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>uval</name></decl>, <decl><type ref="prev"/><name>vval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>dec_size</name></decl>, <decl><type ref="prev"/><name>table_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma_off</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_off</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chroma block position\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>chroma_off</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>table_size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>table_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>table_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chroma block offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dec_size</name> <operator>=</operator> <call><name>xan_unpack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chroma unpacking failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dec_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_end</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>dec_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_end</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>table_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uval</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vval</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>uval</name> <operator>|</operator> <operator>(</operator><name>uval</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>vval</name> <operator>|</operator> <operator>(</operator><name>vval</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>U2</name> <init>= <expr><name>U</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>V2</name> <init>= <expr><name>V</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_end</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>table_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uval</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vval</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>U2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>U2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>uval</name> <operator>|</operator> <operator>(</operator><name>uval</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>V2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>V2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vval</name> <operator>|</operator> <operator>(</operator><name>vval</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>U2</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>V2</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <name>lines</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lines</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <name>lines</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lines</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_decode_frame_type0</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ybuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>chroma_off</name></decl>, <decl><type ref="prev"/><name>corr_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chroma_off</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>corr_off</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xan_decode_chroma</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>chroma_off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>corr_off</name> <operator>&gt;=</operator> <call><name>bytestream2_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring invalid correction block position\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>corr_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xan_unpack_luma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Luma decoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ybuf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>last</name> <operator>+</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>+</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cur</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <name>ybuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>prev_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>prev_buf</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>+</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cur</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <name>ybuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>corr_off</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dec_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name>corr_off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dec_size</name> <operator>=</operator> <call><name>xan_unpack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dec_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dec_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>dec_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dec_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>y_buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_decode_frame_type1</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ybuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scratch_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xan_decode_chroma</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xan_unpack_luma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Luma decoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ybuf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name><name>ybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name><name>ybuf</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>last</name> <operator>+</operator> <name>cur</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ybuf</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xan_decode_frame_type0</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xan_decode_frame_type1</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown frame type %d\n"</literal></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_xan_wc4_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xan_wc4"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Wing Commander IV / Xxan"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_XAN_WC4</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XanContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xan_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>xan_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>xan_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
