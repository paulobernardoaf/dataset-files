<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\xvididct.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xvididct.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND0</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND1</name></cpp:macro> <cpp:value>3597</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND2</name></cpp:macro> <cpp:value>2260</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND3</name></cpp:macro> <cpp:value>1203</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND4</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND5</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND6</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND7</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>TAB04</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">12873</literal></expr>, <expr><literal type="number">8867</literal></expr>, <expr><literal type="number">4520</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>TAB17</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">31521</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">17855</literal></expr>, <expr><literal type="number">12299</literal></expr>, <expr><literal type="number">6270</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>TAB26</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">16819</literal></expr>, <expr><literal type="number">11585</literal></expr>, <expr><literal type="number">5906</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>TAB35</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">15137</literal></expr>, <expr><literal type="number">10426</literal></expr>, <expr><literal type="number">5315</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idct_row</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c5</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c6</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c7</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>right</name> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>rnd</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><name>k</name> <operator>+</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><name>k</name> <operator>+</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a2</name> <init>= <expr><name>k</name> <operator>-</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><name>k</name> <operator>-</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b0</name> <init>= <expr><name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b2</name> <init>= <expr><name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b3</name> <init>= <expr><name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><name>k</name> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator>
<name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>left</name> <operator>|</operator> <name>right</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><operator>(</operator><name>rnd</name> <operator>+</operator> <name>c4</name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><operator>(</operator><name>rnd</name> <operator>+</operator> <name>c4</name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>rnd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><name>k</name> <operator>+</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><name>k</name> <operator>+</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a2</name> <init>= <expr><name>k</name> <operator>-</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><name>k</name> <operator>-</operator> <name>c2</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>c4</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>c6</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b0</name> <init>= <expr><name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b2</name> <init>= <expr><name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b3</name> <init>= <expr><name>c7</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>c5</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name>c1</name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAN1</name></cpp:macro> <cpp:value>0x32EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAN2</name></cpp:macro> <cpp:value>0x6A0A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAN3</name></cpp:macro> <cpp:value>0xAB0E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRT2</name></cpp:macro> <cpp:value>0x5A82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) * (x)) &gt;&gt; (n))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tmp) = (a) + (b); (b) = (a) - (b); (a) = (tmp)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_BUTTERFLY</name><parameter_list>(<parameter><type><name>m1</name></type></parameter>, <parameter><type><name>m2</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(m1) = (s)[(a)] + (s)[(b)]; (m2) = (s)[(a)] - (s)[(b)]</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_col_8</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mm0</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>mm3</name></decl>, <decl><type ref="prev"/><name>mm4</name></decl>, <decl><type ref="prev"/><name>mm5</name></decl>, <decl><type ref="prev"/><name>mm6</name></decl>, <decl><type ref="prev"/><name>mm7</name></decl>, <decl><type ref="prev"/><name>spill</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mm4</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm7</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mm0</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN1</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>mm7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm1</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN1</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>mm4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN3</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>mm6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm3</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN3</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>mm5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mm7</name> <operator>=</operator> <name>mm0</name> <operator>+</operator> <name>mm2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm4</name> <operator>=</operator> <name>mm1</name> <operator>-</operator> <name>mm3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm0</name> <operator>=</operator> <name>mm0</name> <operator>-</operator> <name>mm2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm1</name> <operator>=</operator> <name>mm1</name> <operator>+</operator> <name>mm3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <name>mm0</name> <operator>+</operator> <name>mm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <name>mm0</name> <operator>-</operator> <name>mm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 




<expr_stmt><expr><name>mm1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm3</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN2</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>mm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN2</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>mm2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>spill</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm0</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm7</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm3</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm4</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm1</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm6</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm2</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm5</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_col_4</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mm0</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>mm3</name></decl>, <decl><type ref="prev"/><name>mm4</name></decl>, <decl><type ref="prev"/><name>mm5</name></decl>, <decl><type ref="prev"/><name>mm6</name></decl>, <decl><type ref="prev"/><name>mm7</name></decl>, <decl><type ref="prev"/><name>spill</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mm0</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mm1</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN1</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm3</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN3</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mm7</name> <operator>=</operator> <name>mm0</name> <operator>+</operator> <name>mm2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm4</name> <operator>=</operator> <name>mm1</name> <operator>-</operator> <name>mm3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm0</name> <operator>=</operator> <name>mm0</name> <operator>-</operator> <name>mm2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm1</name> <operator>=</operator> <name>mm1</name> <operator>+</operator> <name>mm3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <name>mm0</name> <operator>+</operator> <name>mm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <name>mm0</name> <operator>-</operator> <name>mm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>mm0</name> <operator>=</operator> <name>mm1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm3</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN2</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm0</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm7</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm3</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm4</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm1</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm6</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm2</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm5</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_col_3</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mm0</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>mm3</name></decl>, <decl><type ref="prev"/><name>mm4</name></decl>, <decl><type ref="prev"/><name>mm5</name></decl>, <decl><type ref="prev"/><name>mm6</name></decl>, <decl><type ref="prev"/><name>mm7</name></decl>, <decl><type ref="prev"/><name>spill</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mm7</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm4</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN1</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mm6</name> <operator>=</operator> <name>mm7</name> <operator>+</operator> <name>mm4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <name>mm7</name> <operator>-</operator> <name>mm4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm6</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>mm5</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>SQRT2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>mm0</name> <operator>=</operator> <name>mm1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm3</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm2</name> <operator>=</operator> <call><name>MULT</name><argument_list>(<argument><expr><name>TAN2</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>spill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm0</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm7</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm3</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm4</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm1</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm6</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY</name><argument_list>(<argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm2</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>mm5</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_xvid_idct</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rows</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB04</name></expr></argument>, <argument><expr><name>RND0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB17</name></expr></argument>, <argument><expr><name>RND1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB26</name></expr></argument>, <argument><expr><name>RND2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB35</name></expr></argument>, <argument><expr><name>RND3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rows</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB04</name></expr></argument>, <argument><expr><name>RND4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rows</name> <operator>|=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB35</name></expr></argument>, <argument><expr><name>RND5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rows</name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB26</name></expr></argument>, <argument><expr><name>RND6</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rows</name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>idct_row</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>TAB17</name></expr></argument>, <argument><expr><name>RND7</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rows</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_col_8</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rows</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_col_4</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_col_3</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xvid_idct_put</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_xvid_idct</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels_clamped_c</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xvid_idct_add</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_xvid_idct</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_c</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_xvid_idct_init</name><parameter_list>(<parameter><decl><type><name>IDCTDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>high_bit_depth</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>high_bit_depth</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_XVID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_XVID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>xvid_idct_put</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>xvid_idct_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_xvid_idct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_xvid_idct_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>high_bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_xvid_idct_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>high_bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_scantable_permutation</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
