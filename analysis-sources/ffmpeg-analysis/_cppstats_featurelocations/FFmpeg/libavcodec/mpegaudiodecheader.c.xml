<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegaudiodecheader.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodecheader.h"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>avpriv_mpegaudio_decode_header</name><parameter_list>(<parameter><decl><type><name>MPADecodeHeader</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>, <decl><type ref="prev"/><name>mpeg25</name></decl>, <decl><type ref="prev"/><name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate_index</name></decl>, <decl><type ref="prev"/><name>bitrate_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mpa_check_header</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mpeg25</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mpeg25</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_rate_index</name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate_index</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>avpriv_mpa_freq_tab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample_rate_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>sample_rate_index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>+</operator> <name>mpeg25</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_rate_index</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>+</operator> <name>mpeg25</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>=</operator> <name>sample_rate_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_protection</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitrate_index</name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MPA_MONO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitrate_index</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>bitrate_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>frame_size</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">12000</literal><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>+</operator> <name>padding</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">144000</literal><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">144000</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>sample_rate</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"layer%d, %d Hz, %d kbits/s, "</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_MS_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ms-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_I_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"i-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"stereo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"mono"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpa_decode_header</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>frame_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bit_rate</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPADecodeHeader</name></type> <name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frame_size</name> <operator>=</operator> <literal type="number">384</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frame_size</name> <operator>=</operator> <literal type="number">1152</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_MP3ADU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>frame_size</name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>frame_size</name> <operator>=</operator> <literal type="number">1152</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>sample_rate</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bit_rate</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
