<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mqcdec.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mqc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bytein</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x8f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0xfe00</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">0xff00</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exchange</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cxstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;</operator> <name><name>ff_mqc_qe</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>!</operator><name>lps</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>ff_mqc_qe</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>cxstate</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cxstate</name> <operator>=</operator> <name><name>ff_mqc_nmps</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>ff_mqc_qe</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>cxstate</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cxstate</name> <operator>=</operator> <name><name>ff_mqc_nlps</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytein</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition>;</do>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mqc_initdec</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <name>raw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mqc_init_contexts</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>^</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytein</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mqc_decode_bypass</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0x40000000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytein</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mqc_decode</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cxstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>raw</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>mqc_decode_bypass</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>-=</operator> <name><name>ff_mqc_qe</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;</operator> <name><name>mqc</name><operator>-&gt;</operator><name>a</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>cxstate</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>exchange</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>, <argument><expr><name>cxstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><call><name>exchange</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>, <argument><expr><name>cxstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
