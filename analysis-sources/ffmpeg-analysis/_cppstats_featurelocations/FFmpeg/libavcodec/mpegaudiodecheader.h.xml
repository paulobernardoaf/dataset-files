<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegaudiodecheader.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MPEGAUDIODECHEADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MPEGAUDIODECHEADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP3_MASK</name></cpp:macro> <cpp:value>0xFFFE0CCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPA_DECODE_HEADER</name></cpp:macro> <cpp:value>int frame_size; int error_protection; int layer; int sample_rate; int sample_rate_index; int bit_rate; int nb_channels; int mode; int mode_ext; int lsf;</cpp:value></cpp:define>











<typedef>typedef <type><struct>struct <name>MPADecodeHeader</name> <block>{
<expr_stmt><expr><name>MPA_DECODE_HEADER</name></expr></expr_stmt>
}</block></struct></type> <name>MPADecodeHeader</name>;</typedef>




<function_decl><type><name>int</name></type> <name>avpriv_mpegaudio_decode_header</name><parameter_list>(<parameter><decl><type><name>MPADecodeHeader</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>header</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>ff_mpa_decode_header</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>frame_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitrate</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_mpa_check_header</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>header</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xffe00000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xf</literal><operator>&lt;&lt;</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0xf</literal><operator>&lt;&lt;</operator><literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
