<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cbs_vp9_syntax_template.c">

















<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_sync_code</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_sync_byte_0</name> <init>= <expr><name>VP9_FRAME_SYNC_0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_sync_byte_1</name> <init>= <expr><name>VP9_FRAME_SYNC_1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_sync_byte_2</name> <init>= <expr><name>VP9_FRAME_SYNC_2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>frame_sync_byte_0</name></expr></argument>, <argument><expr><name>frame_sync_byte_0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>frame_sync_byte_1</name></expr></argument>, <argument><expr><name>frame_sync_byte_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>frame_sync_byte_2</name></expr></argument>, <argument><expr><name>frame_sync_byte_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_sync_byte_0</name> <operator>!=</operator> <name>VP9_FRAME_SYNC_0</name> <operator>||</operator>
<name>frame_sync_byte_1</name> <operator>!=</operator> <name>VP9_FRAME_SYNC_1</name> <operator>||</operator>
<name>frame_sync_byte_2</name> <operator>!=</operator> <name>VP9_FRAME_SYNC_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame sync code: "</literal>
<literal type="string">"%02x %02x %02x.\n"</literal></expr></argument>, <argument><expr><name>frame_sync_byte_0</name></expr></argument>,
<argument><expr><name>frame_sync_byte_1</name></expr></argument>, <argument><expr><name>frame_sync_byte_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>color_config</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamVP9Context</name> <modifier>*</modifier></type><name>vp9</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ten_or_twelve_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>ten_or_twelve_bit</name></name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>color_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>color_space</name></name> <operator>!=</operator> <name>VP9_CS_RGB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>profile</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>subsampling_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>subsampling_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reserved_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>profile</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reserved_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_y</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_size</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamVP9Context</name> <modifier>*</modifier></type><name>vp9</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>frame_width_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>frame_height_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>frame_width_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>frame_height_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>mi_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>mi_rows</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>sb64_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>mi_cols</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>sb64_rows</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>mi_rows</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>render_size</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>render_and_frame_size_different</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>render_and_frame_size_different</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>render_width_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>render_height_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_size_with_refs</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamVP9Context</name> <modifier>*</modifier></type><name>vp9</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP9_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>found_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>found_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VP9ReferenceFrameState</name> <modifier>*</modifier></type><name>ref</name> <init>=
<expr><operator>&amp;</operator><name><name>vp9</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_y</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>VP9_REFS_PER_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>mi_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>mi_rows</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>sb64_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>mi_cols</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>sb64_rows</name></name> <operator>=</operator> <operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>mi_rows</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>interpolation_filter</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_filter_switchable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>is_filter_switchable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>raw_interpolation_filter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>loop_filter_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>loop_filter_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>loop_filter_sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>loop_filter_delta_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>loop_filter_delta_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>loop_filter_delta_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>loop_filter_delta_update</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP9_MAX_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>update_ref_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>update_ref_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ss</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>update_mode_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>update_mode_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ss</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_mode_deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>quantization_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>base_q_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_y_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_uv_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_uv_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>segmentation_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>segmentation_feature_bits</name><index>[<expr><name>VP9_SEG_LVL_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>segmentation_feature_signed</name><index>[<expr><name>VP9_SEG_LVL_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segmentation_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segmentation_update_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_update_map</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prob</name><argument_list>(<argument><expr><name><name>segmentation_tree_probs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segmentation_temporal_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_temporal_update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prob</name><argument_list>(<argument><expr><name><name>segmentation_pred_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>segmentation_pred_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segmentation_update_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_update_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segmentation_abs_or_delta_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP9_MAX_SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>VP9_SEG_LVL_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>segmentation_feature_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><name><name>segmentation_feature_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>segmentation_feature_signed</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>feature_sign</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_sign</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_sign</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>tile_info</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamVP9Context</name> <modifier>*</modifier></type><name>vp9</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_log2_tile_cols</name></decl>, <decl><type ref="prev"/><name>max_log2_tile_cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>min_log2_tile_cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>VP9_MAX_TILE_WIDTH_B64</name> <operator>&lt;&lt;</operator> <name>min_log2_tile_cols</name><operator>)</operator> <operator>&lt;</operator> <name><name>vp9</name><operator>-&gt;</operator><name>sb64_cols</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>min_log2_tile_cols</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>max_log2_tile_cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>vp9</name><operator>-&gt;</operator><name>sb64_cols</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>max_log2_tile_cols</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>VP9_MIN_TILE_WIDTH_B64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>max_log2_tile_cols</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>tile_cols_log2</name></expr></argument>, <argument><expr><name>min_log2_tile_cols</name></expr></argument>, <argument><expr><name>max_log2_tile_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>tile_rows_log2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>uncompressed_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamVP9Context</name> <modifier>*</modifier></type><name>vp9</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>profile_low_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>profile_high_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>profile_high_bit</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_low_bit</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vp9</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reserved_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>show_existing_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_existing_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>frame_to_show_map_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>header_size_in_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_flags</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>loop_filter_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>show_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error_resilient_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>VP9_KEY_FRAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_sync_code</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>color_config</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_flags</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>intra_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>intra_only</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>reset_frame_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>reset_frame_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>intra_only</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_sync_code</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp9</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>color_config</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>color_space</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_y</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>refresh_frame_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>refresh_frame_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP9_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ref_frame_sign_bias</name><index>[<expr><name>VP9_LAST_FRAME</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VP9_LAST_FRAME</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size_with_refs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>allow_high_precision_mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>interpolation_filter</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>refresh_frame_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>frame_parallel_decoding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_parallel_decoding_mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_context_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>loop_filter_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>quantization_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>segmentation_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>tile_info</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>header_size_in_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP9_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>refresh_frame_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vp9</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VP9ReferenceFrameState</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>frame_width</name> <operator>=</operator> <name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name></expr>,
<expr><operator>.</operator><name>frame_height</name> <operator>=</operator> <name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name></expr>,
<expr><operator>.</operator><name>subsampling_x</name> <operator>=</operator> <name><name>vp9</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>,
<expr><operator>.</operator><name>subsampling_y</name> <operator>=</operator> <name><name>vp9</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>,
<expr><operator>.</operator><name>bit_depth</name> <operator>=</operator> <name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Frame: size %dx%d "</literal>
<literal type="string">"subsample %dx%d bit_depth %d tiles %dx%d.\n"</literal></expr></argument>,
<argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_width</name></name></expr></argument>, <argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>frame_height</name></name></expr></argument>,
<argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr></argument>, <argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr></argument>,
<argument><expr><name><name>vp9</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>trailing_bits</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zero_bit</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawFrame</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>uncompressed_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>superframe_index</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>VP9RawSuperframeIndex</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Superframe Index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>superframe_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bytes_per_framesize_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>frames_in_superframe_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>frames_in_superframe_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fle</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>bytes_per_framesize_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>frame_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>superframe_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bytes_per_framesize_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>frames_in_superframe_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
