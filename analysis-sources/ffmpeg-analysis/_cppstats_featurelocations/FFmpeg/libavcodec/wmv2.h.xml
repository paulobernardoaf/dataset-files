<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\wmv2.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_WMV2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_WMV2_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_TYPE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_TYPE_MPEG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_TYPE_ROW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_TYPE_COL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>Wmv2Context</name> <block>{
<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IntraX8Context</name></type> <name>x8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WMV2DSPContext</name></type> <name>wdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j_type_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abt_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>abt_type_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>per_mb_abt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>per_block_abt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mspel_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbp_table_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_left_mv_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>per_mb_rl_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScanTable</name></type> <name><name>abt_scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>abt_block2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>Wmv2Context</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_wmv2_common_init</name><parameter_list>(<parameter><decl><type><name>Wmv2Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_wmv2_decode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_wmv2_encode_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_wmv2_encode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_wmv2_decode_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_wmv2_decode_secondary_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_wmv2_add_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ff_mspel_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>, <argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>, <argument><expr><name>int</name> <name>motion_y</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>wmv2_get_cbp_table_index</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbp_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>map</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>map</name><index>[<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>]</index><index>[<expr><name>cbp_index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
