<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_encode.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VAAPI_ENCODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VAAPI_ENCODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_str.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_vaapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<struct_decl>struct <name>VAAPIEncodeType</name>;</struct_decl>
<struct_decl>struct <name>VAAPIEncodePicture</name>;</struct_decl>

<enum>enum <block>{
<decl><name>MAX_CONFIG_ATTRIBUTES</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MAX_GLOBAL_PARAMS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MAX_DPB_SIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>MAX_PICTURE_REFERENCES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MAX_REORDER_DELAY</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>MAX_PARAM_BUFFER_SIZE</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>PICTURE_TYPE_IDR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PICTURE_TYPE_I</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PICTURE_TYPE_P</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>PICTURE_TYPE_B</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeSlice</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>codec_slice_params</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeSlice</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIEncodePicture</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>VAAPIEncodePicture</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>display_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>encode_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_idr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>VAEncROI</name> <modifier>*</modifier></type><name>roi</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>roi</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encode_issued</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encode_complete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>input_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>recon_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>recon_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_param_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferID</name> <modifier>*</modifier></type><name>param_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>output_buffer_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferID</name></type> <name>output_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>codec_picture_params</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_reference</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>nb_dpb_pics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>VAAPIEncodePicture</name></name> <modifier>*</modifier></type><name><name>dpb</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nb_refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>VAAPIEncodePicture</name></name> <modifier>*</modifier></type><name><name>refs</name><index>[<expr><name>MAX_PICTURE_REFERENCES</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>VAAPIEncodePicture</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name><name>ref_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ref_removed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_slices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slices</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodePicture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeProfile</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>av_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProfile</name></type> <name>va_profile</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeProfile</name>;</typedef>

<enum>enum <block>{
<decl><name>RC_MODE_AUTO</name></decl>,
<decl><name>RC_MODE_CQP</name></decl>,
<decl><name>RC_MODE_CBR</name></decl>,
<decl><name>RC_MODE_VBR</name></decl>,
<decl><name>RC_MODE_ICQ</name></decl>,
<decl><name>RC_MODE_QVBR</name></decl>,
<decl><name>RC_MODE_AVBR</name></decl>,
<decl><name>RC_MODE_MAX</name> <init>= <expr><name>RC_MODE_AVBR</name></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeRCMode</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>supported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>va_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hrd</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeRCMode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>VAAPIEncodeType</name></name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>low_power</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>idr_interval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>desired_b_depth</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>explicit_rc_mode</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>explicit_qp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>desired_packed_headers</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>surface_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>surface_height</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>slice_block_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_block_height</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeProfile</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeRCMode</name> <modifier>*</modifier></type><name>rc_mode</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>rc_quality</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VAProfile</name></type> <name>va_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEntrypoint</name></type> <name>va_entrypoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>va_rc_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>va_bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>va_packed_headers</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name><name>config_attributes</name><index>[<expr><name>MAX_CONFIG_ATTRIBUTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_config_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigID</name></type> <name>va_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAContextID</name></type> <name>va_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>input_frames_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>recon_frames_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>recon_frames</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>output_buffer_pool</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name><name>global_params_type</name><index>[<expr><name>MAX_GLOBAL_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>global_params</name> <index>[<expr><name>MAX_GLOBAL_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>global_params_size</name><index>[<expr><name>MAX_GLOBAL_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_global_params</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VAEncMiscParameterRateControl</name></type> <name>rc_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncMiscParameterHRD</name></type> <name>hrd_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncMiscParameterFrameRate</name></type> <name>fr_params</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">36</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VAEncMiscParameterBufferQualityLevel</name></type> <name>quality_params</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>codec_sequence_params</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>codec_picture_params</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic_start</name></decl>, <modifier>*</modifier><name>pic_end</name>;</decl_stmt>


<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>next_prev</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>input_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>output_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>encode_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>decode_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>output_order</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>first_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_pts_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>ts_ring</name><index>[<expr><name>MAX_REORDER_DELAY</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>slice_block_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_block_cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_slices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>gop_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>closed_gop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gop_per_idr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_per_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_b_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_per_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_idr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idr_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gop_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_stream</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>roi_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>roi_max_regions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>roi_quant_range</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>crop_warned</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>roi_warned</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeContext</name>;</typedef>

<enum>enum <block>{

<decl><name>FLAG_SLICE_CONTROL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>FLAG_CONSTANT_QUALITY_ONLY</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>FLAG_INTRA_ONLY</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>FLAG_B_PICTURES</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,

<decl><name>FLAG_B_PICTURE_REFERENCES</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,


<decl><name>FLAG_NON_IDR_KEY_PICTURES</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeType</name> <block>{


<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeProfile</name> <modifier>*</modifier></type><name>profiles</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>default_quality</name></decl>;</decl_stmt>




<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>configure</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>size_t</name></type> <name>picture_priv_data_size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>sequence_params_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>picture_params_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slice_params_size</name></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_sequence_params</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_picture_params</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_slice_params</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>int</name></type> <name>sequence_header_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>picture_header_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_header_type</name></decl>;</decl_stmt>




<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_sequence_header</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_picture_header</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_slice_header</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_extra_buffer</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_extra_header</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>VAAPIEncodeType</name>;</typedef>


<function_decl><type><name>int</name></type> <name>ff_vaapi_encode_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vaapi_encode_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vaapi_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vaapi_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAAPI_ENCODE_COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "low_power", "Use low-power encoding mode (only available on some platforms; " "may not support all encoding features)", OFFSET(common.low_power), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, FLAGS }, { "idr_interval", "Distance (in I-frames) between IDR frames", OFFSET(common.idr_interval), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, FLAGS }, { "b_depth", "Maximum B-frame reference depth", OFFSET(common.desired_b_depth), AV_OPT_TYPE_INT, { .i64 = 1 }, 1, INT_MAX, FLAGS }</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAAPI_ENCODE_RC_MODE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, desc, 0, AV_OPT_TYPE_CONST, { .i64 = RC_MODE_ ##name }, 0, 0, FLAGS, "rc_mode" }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAAPI_ENCODE_RC_OPTIONS</name></cpp:macro> <cpp:value>{ "rc_mode","Set rate control mode", OFFSET(common.explicit_rc_mode), AV_OPT_TYPE_INT, { .i64 = RC_MODE_AUTO }, RC_MODE_AUTO, RC_MODE_MAX, FLAGS, "rc_mode" }, { "auto", "Choose mode automatically based on other parameters", 0, AV_OPT_TYPE_CONST, { .i64 = RC_MODE_AUTO }, 0, 0, FLAGS, "rc_mode" }, VAAPI_ENCODE_RC_MODE(CQP, "Constant-quality"), VAAPI_ENCODE_RC_MODE(CBR, "Constant-bitrate"), VAAPI_ENCODE_RC_MODE(VBR, "Variable-bitrate"), VAAPI_ENCODE_RC_MODE(ICQ, "Intelligent constant-quality"), VAAPI_ENCODE_RC_MODE(QVBR, "Quality-defined variable-bitrate"), VAAPI_ENCODE_RC_MODE(AVBR, "Average variable-bitrate")</cpp:value></cpp:define>














<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
