<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpc.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpcdata.h"</cpp:file></cpp:include>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_mpa_synth_init_fixed</name><argument_list>(<argument><expr><name>ff_mpa_synth_window_fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_synth</name><parameter_list>(<parameter><decl><type><name>MPCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dither_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES_PER_BAND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mpa_synth_filter_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mpadsp</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>synth_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>synth_buf_offset</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>ff_mpa_synth_window_fixed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dither_state</name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpc_dequantize_and_synth</name><parameter_list>(<parameter><decl><type><name>MPCContext</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxband</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Band</name> <modifier>*</modifier></type><name>bands</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bands</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mul</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxband</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>off</name> <operator>+=</operator> <name>SAMPLES_PER_BAND</name></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>res</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name>mpc_CC</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>res</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index> <operator>*</operator> <name><name>mpc_SCF</name><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scf_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mul</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>Q</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name>mpc_CC</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>res</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index> <operator>*</operator> <name><name>mpc_SCF</name><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scf_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mul</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>Q</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name>mpc_CC</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>res</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index> <operator>*</operator> <name><name>mpc_SCF</name><index>[<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scf_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mul</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>Q</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msf</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SAMPLES_PER_BAND</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_synth</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
