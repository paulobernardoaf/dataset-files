<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\fft_template.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft_table.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <name>av_cold</name></type> <name>fft_lut_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_fft_lut_init</name><argument_list>(<argument><expr><name>ff_fft_offsets_lut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_HARDCODED_TABLES</name></expr></cpp:if>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">131072</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_ff_cos_tabs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>/</operator><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_tabs</name></expr></argument>)</argument_list></call><index>[<expr><name>index</name></expr>]</index></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FIX15</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>freq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>m</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>CosTabsInitOnce</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AVOnce</name></type> <name>control</name></decl>;</decl_stmt>
}</block></struct></type> <name>CosTabsInitOnce</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_FF_COS_TABS_FUNC</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_cold void init_ff_cos_tabs_ ##size (void){ init_ff_cos_tabs(index); }</cpp:value></cpp:define>





<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">7</literal></argument>, <argument><literal type="number">128</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">256</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">9</literal></argument>, <argument><literal type="number">512</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument><literal type="number">1024</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">11</literal></argument>, <argument><literal type="number">2048</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">4096</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">13</literal></argument>, <argument><literal type="number">8192</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument><literal type="number">16384</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">15</literal></argument>, <argument><literal type="number">32768</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">65536</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">17</literal></argument>, <argument><literal type="number">131072</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>CosTabsInitOnce</name></type> <name><name>cos_tabs_init_once</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_16</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_32</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_64</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_128</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_256</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_512</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_1024</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_2048</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_4096</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_8192</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_16384</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_32768</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_65536</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_ff_cos_tabs_131072</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>COSTABLE_CONST</name> <name>FFTSample</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_tabs</name></expr></argument>)</argument_list>[] <init>= <expr><block>{
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_128</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_256</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_512</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_1024</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_2048</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_4096</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_8192</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_16384</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_32768</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_65536</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_131072</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fft_permute_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fft_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>split_radix_permutation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>i</name><operator>&amp;</operator><name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>inverse</name> <operator>==</operator> <operator>!</operator><operator>(</operator><name>i</name><operator>&amp;</operator><name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_init_ff_cos_tabs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>CONFIG_HARDCODED_TABLES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>FFT_FIXED_32</name><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cos_tabs_init_once</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>control</name></expr></argument>, <argument><expr><name><name>cos_tabs_init_once</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avx_tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_second_half_of_fft32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>is_second_half_of_fft32</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>*</operator><name>n</name><operator>/</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>is_second_half_of_fft32</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>is_second_half_of_fft32</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>n</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>fft_perm_avx</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_second_half_of_fft32</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><operator>-</operator><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<name>i</name> <operator>+</operator> <name><name>avx_tab</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><operator>-</operator><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_fft_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nbits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>nbits</name></expr></argument> &gt;</argument_list></name> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name> <operator>=</operator> <name>inverse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_permutation</name></name> <operator>=</operator> <name>FF_FFT_PERM_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_permute</name></name> <operator>=</operator> <name>fft_permute_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name> <operator>=</operator> <name>fft_calc_c</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_calc</name></name> <operator>=</operator> <name>ff_imdct_calc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_half</name></name> <operator>=</operator> <name>ff_imdct_half_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_calc</name></name> <operator>=</operator> <name>ff_mdct_calc_c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>control</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>control</name></expr></argument>, <argument><expr><name>fft_lut_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_init_aarch64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_init_ppc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_MDCT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_calcw</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_calc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HAVE_MIPSFPU</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_init_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>CONFIG_MDCT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_calcw</name></name> <operator>=</operator> <name>ff_mdct_calcw_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_fft_fixed_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>nbits</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_init_ff_cos_tabs</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_permutation</name></name> <operator>==</operator> <name>FF_FFT_PERM_AVX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fft_perm_avx</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_FFT_PERM_SWAP_LSBS</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {for(i = 0; i &lt; n; i++) {int k;j = i;j = (j &amp; ~3) | ((j &gt;&gt; 1) &amp; 1) | ((j &lt;&lt; 1) &amp; 2);k = -split_radix_permutation(i, n, s-&gt;inverse) &amp; (n - 1);s-&gt;revtab##num[k] = j;} } while(0);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_FFT_PERM_DEFAULT</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {for(i = 0; i &lt; n; i++) {int k;j = i;k = -split_radix_permutation(i, n, s-&gt;inverse) &amp; (n - 1);s-&gt;revtab##num[k] = j;} } while(0);</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_RADIX_PERMUTATION</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (s-&gt;fft_permutation == FF_FFT_PERM_SWAP_LSBS) {PROCESS_FFT_PERM_SWAP_LSBS(num) } else {PROCESS_FFT_PERM_DEFAULT(num) }} while(0);</cpp:value></cpp:define>







<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>SPLIT_RADIX_PERMUTATION</name><argument_list>()</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>SPLIT_RADIX_PERMUTATION</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROCESS_FFT_PERM_DEFAULT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROCESS_FFT_PERM_SWAP_LSBS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPLIT_RADIX_PERMUTATION</name></cpp:undef>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_permute_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>revtab32</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>revtab</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>np</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name><index>[<expr><name><name>revtab</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>np</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name><index>[<expr><name><name>revtab32</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>, <argument><expr><name>np</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fft_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>revtab32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>num_transforms</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n34</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tmpz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fft_size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><literal type="number">0x2aab</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp3</name> <operator>+</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp3</name> <operator>-</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp4</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fft_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><name>num_transforms</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <name>tmp4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <name>tmp4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>Q31</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp1</name> <operator>+</operator> <name>tmp2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>Q31</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp3</name> <operator>-</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>Q31</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp2</name> <operator>-</operator> <name>tmp1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>Q31</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp3</name> <operator>+</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>tmp5</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>tmp6</name> <operator>-</operator> <name>tmp8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>MAX_LOG2_NFFT</name><operator>-</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nbits</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>nbits</name><operator>&lt;=</operator><name><name>s</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n34</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><name>num_transforms</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>w_re_ptr</name> <init>= <expr><name>ff_w_tab_sr</name> <operator>+</operator> <name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>w_im_ptr</name> <init>= <expr><name>ff_w_tab_sr</name> <operator>+</operator> <name>MAX_FFT_SIZE</name><operator>/</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>step</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n2</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n4</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><name>n34</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n4</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>w_re</name> <init>= <expr><name><name>w_re_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>w_im</name> <init>= <expr><name><name>w_im_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_re</name><operator>*</operator><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_im</name><operator>*</operator><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_re</name><operator>*</operator><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>-=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_im</name><operator>*</operator><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_re</name><operator>*</operator><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>-=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_im</name><operator>*</operator><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_re</name><operator>*</operator><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>w_im</name><operator>*</operator><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <name>tmp4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <name>tmp4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n2</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><name>n34</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[ <expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><name>n4</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w_re_ptr</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_im_ptr</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{BF(t3, t5, t5, t1);BF(a2.re, a0.re, a0.re, t5);BF(a3.im, a1.im, a1.im, t3);BF(t4, t6, t2, t6);BF(a3.re, a1.re, a1.re, t4);BF(a2.im, a0.im, a0.im, t6);}</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES_BIG</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{FFTSample r0=a0.re, i0=a0.im, r1=a1.re, i1=a1.im;BF(t3, t5, t5, t1);BF(a2.re, a0.re, r0, t5);BF(a3.im, a1.im, i1, t3);BF(t4, t6, t2, t6);BF(a3.re, a1.re, r1, t4);BF(a2.im, a0.im, i0, t6);}</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>,<parameter><type><name>wre</name></type></parameter>,<parameter><type><name>wim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{CMUL(t1, t2, a2.re, a2.im, wre, -wim);CMUL(t5, t6, a3.re, a3.im, wre, wim);BUTTERFLIES(a0,a1,a2,a3)}</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM_ZERO</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{t1 = a2.re;t2 = a2.im;t5 = a3.re;t6 = a3.im;BUTTERFLIES(a0,a1,a2,a3)}</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void name(FFTComplex *z, const FFTSample *wre, unsigned int n){FFTDouble t1, t2, t3, t4, t5, t6;int o1 = 2*n;int o2 = 4*n;int o3 = 6*n;const FFTSample *wim = wre+o1;n--;TRANSFORM_ZERO(z[0],z[o1],z[o2],z[o3]);TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);do {z += 2;wre += 2;wim -= 2;TRANSFORM(z[0],z[o1],z[o2],z[o3],wre[0],wim[0]);TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);} while(--n);}</cpp:value></cpp:define>




















<macro><name>PASS</name><argument_list>(<argument>pass</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUTTERFLIES</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES</name></cpp:macro> <cpp:value>BUTTERFLIES_BIG</cpp:value></cpp:define>
<macro><name>PASS</name><argument_list>(<argument>pass_big</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_FFT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>n2</name></type></parameter>,<parameter><type><name>n4</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void fft##n(FFTComplex *z){fft##n2(z);fft##n4(z+n4*2);fft##n4(z+n4*3);pass(z,FFT_NAME(ff_cos_##n),n4/2);}</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>void</name></type> <name>fft4</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTDouble</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t8</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft8</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTDouble</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLIES</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name>sqrthalf</name></expr></argument>,<argument><expr><name>sqrthalf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fft16</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTDouble</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>cos_16_1</name> <init>= <expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>cos_16_3</name> <init>= <expr><call><name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fft8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSFORM_ZERO</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>,<argument><expr><name>sqrthalf</name></expr></argument>,<argument><expr><name>sqrthalf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,<argument><expr><name>cos_16_1</name></expr></argument>,<argument><expr><name>cos_16_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>,<argument><expr><name>cos_16_3</name></expr></argument>,<argument><expr><name>cos_16_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">16</literal></argument>,<argument><literal type="number">8</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">32</literal></argument>,<argument><literal type="number">16</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">64</literal></argument>,<argument><literal type="number">32</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">128</literal></argument>,<argument><literal type="number">64</literal></argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">256</literal></argument>,<argument><literal type="number">128</literal></argument>,<argument><literal type="number">64</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">512</literal></argument>,<argument><literal type="number">256</literal></argument>,<argument><literal type="number">128</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pass</name></cpp:macro> <cpp:value>pass_big</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">1024</literal></argument>,<argument><literal type="number">512</literal></argument>,<argument><literal type="number">256</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">2048</literal></argument>,<argument><literal type="number">1024</literal></argument>,<argument><literal type="number">512</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">4096</literal></argument>,<argument><literal type="number">2048</literal></argument>,<argument><literal type="number">1024</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">8192</literal></argument>,<argument><literal type="number">4096</literal></argument>,<argument><literal type="number">2048</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">16384</literal></argument>,<argument><literal type="number">8192</literal></argument>,<argument><literal type="number">4096</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">32768</literal></argument>,<argument><literal type="number">16384</literal></argument>,<argument><literal type="number">8192</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">65536</literal></argument>,<argument><literal type="number">32768</literal></argument>,<argument><literal type="number">16384</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">131072</literal></argument>,<argument><literal type="number">65536</literal></argument>,<argument><literal type="number">32768</literal></argument>)</argument_list></macro>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>fft_dispatch</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>FFTComplex</name><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>fft4</name></expr>, <expr><name>fft8</name></expr>, <expr><name>fft16</name></expr>, <expr><name>fft32</name></expr>, <expr><name>fft64</name></expr>, <expr><name>fft128</name></expr>, <expr><name>fft256</name></expr>, <expr><name>fft512</name></expr>, <expr><name>fft1024</name></expr>,
<expr><name>fft2048</name></expr>, <expr><name>fft4096</name></expr>, <expr><name>fft8192</name></expr>, <expr><name>fft16384</name></expr>, <expr><name>fft32768</name></expr>, <expr><name>fft65536</name></expr>, <expr><name>fft131072</name></expr>
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fft_dispatch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nbits</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>(</operator><name>z</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
