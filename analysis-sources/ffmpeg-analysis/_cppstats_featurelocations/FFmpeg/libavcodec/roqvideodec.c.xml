<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\roqvideodec.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"roqvideo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>roqvideo_decode_frame</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chunk_arg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>chunk_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>nv1</name></decl>, <decl><type ref="prev"/><name>nv2</name></decl>, <decl><type ref="prev"/><name>vqflg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vqflg_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vqid</name></decl>, <decl><type ref="prev"/><name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>, <decl><type ref="prev"/><name>xp</name></decl>, <decl><type ref="prev"/><name>yp</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>frame_stats</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>roq_qcell</name> <modifier>*</modifier></type><name>qcell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>chunk_start</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_arg</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chunk_id</name> <operator>==</operator> <name>RoQ_QUAD_VQ</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>chunk_id</name> <operator>==</operator> <name>RoQ_QUAD_CODEBOOK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nv1</name> <operator>=</operator> <name>chunk_arg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nv1</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nv2</name> <operator>=</operator> <name>chunk_arg</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nv1</name> <operator>*</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name>chunk_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nv2</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nv1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nv2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>cb4x4</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>chunk_start</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>ypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chunk does not fit in input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>chunk_start</name> <operator>+</operator> <name>chunk_size</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>yp</name> <operator>=</operator> <name>ypos</name></expr>;</init> <condition><expr><name>yp</name> <operator>&lt;</operator> <name>ypos</name> <operator>+</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>yp</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>xp</name> <operator>=</operator> <name>xpos</name></expr>;</init> <condition><expr><name>xp</name> <operator>&lt;</operator> <name>xpos</name> <operator>+</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>xp</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>chunk_start</name> <operator>+</operator> <name>chunk_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Chunk is too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vqflg_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vqflg</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vqflg_pos</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vqid</name> <operator>=</operator> <operator>(</operator><name>vqflg</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>vqflg_pos</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame_stats</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>vqid</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vqflg_pos</name><operator>--</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>vqid</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RoQ_ID_MOT</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>RoQ_ID_FCC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <operator>(</operator><name>chunk_arg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <name>chunk_arg</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_motion_8x8</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RoQ_ID_SLD</name></expr>:</case>
<expr_stmt><expr><name>qcell</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>cb4x4</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>xp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>yp</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>xp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>yp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RoQ_ID_CCC</name></expr>:</case>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xp</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>chunk_start</name> <operator>+</operator> <name>chunk_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Chunk is too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vqflg_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vqflg</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vqflg_pos</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vqid</name> <operator>=</operator> <operator>(</operator><name>vqflg</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>vqflg_pos</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame_stats</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>vqid</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vqflg_pos</name><operator>--</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>vqid</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RoQ_ID_MOT</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>RoQ_ID_FCC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <operator>(</operator><name>chunk_arg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <name>chunk_arg</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_motion_4x4</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RoQ_ID_SLD</name></expr>:</case>
<expr_stmt><expr><name>qcell</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>cb4x4</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RoQ_ID_CCC</name></expr>:</case>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ri</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xpos</name> <operator>&gt;=</operator> <name><name>ri</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xpos</name> <operator>-=</operator> <name><name>ri</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypos</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ypos</name> <operator>&gt;=</operator> <name><name>ri</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>roq_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Dimensions not being a multiple of 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVJ444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>roq_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>roqvideo_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>roq_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_roq_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"roqvideo"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"id RoQ video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ROQ</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RoqContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>roq_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>roq_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>roq_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
