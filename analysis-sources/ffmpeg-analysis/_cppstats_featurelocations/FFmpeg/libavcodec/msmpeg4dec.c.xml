<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\msmpeg4dec.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V2_INTRA_CBPC_VLC_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V2_MB_TYPE_VLC_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V2_MV_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEX_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_INTER_INDEX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>msmpeg4v1_pred_dc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dc_val_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>=</operator> <name>n</name><operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dc_val_ptr</name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><name>VLC</name></type> <name><name>ff_mb_non_intra_vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>v2_dc_lum_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>v2_dc_chroma_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>v2_intra_cbpc_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>v2_mb_type_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>v2_mv_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>ff_inter_intra_vlc</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>msmpeg4v2_decode_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>v2_mv_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>V2_MV_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"MV code %d at %d %d pred: %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0xffff</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pred</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>f_code</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>pred</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msmpeg4v12_decode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mb_type_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_SKIP</name> <operator>|</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>v2_mb_type_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>V2_MB_TYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_h263_inter_MCBPC_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>INTER_MCBPC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>code</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>code</name></expr></argument>&gt;</argument_list></name><literal type="number">7</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbpc %d invalid at %d %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbp</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>v2_intra_cbpc_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>V2_INTRA_CBPC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbp</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_h263_intra_MCBPC_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>INTRA_MCBPC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cbp</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>cbp</name></expr></argument>&gt;</argument_list></name><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbpc %d invalid at %d %d\n"</literal></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>cbpy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbpy</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_h263_cbpy_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>CBPY_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cbpy</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbpy %d invalid at %d %d\n"</literal></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cbp</name><operator>|=</operator> <name>cbpy</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>cbp</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cbp</name><operator>^=</operator> <literal type="number">0x3C</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h263_pred_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name><operator>=</operator> <call><name>msmpeg4v2_decode_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name><operator>=</operator> <call><name>msmpeg4v2_decode_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_h263_cbpy_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>CBPY_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbpy vlc invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cbp</name><operator>|=</operator> <name>v</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_h263_cbpy_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>CBPY_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbpy vlc invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cbp</name><operator>|=</operator> <name>v</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cbp</name><operator>^=</operator><literal type="number">0x3C</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_INTRA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_blocks</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_msmpeg4_decode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>cbp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\nerror while decoding block: %d x %d (%d)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msmpeg4v34_decode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>coded_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mb_type_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_SKIP</name> <operator>|</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_mb_non_intra_vlc</name><index>[<expr><name>DEFAULT_INTER_INDEX</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>MB_NON_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <operator>(</operator><operator>~</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_msmp4_mb_i_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>MB_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><call><name>ff_msmpeg4_coded_block_pred</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coded_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>^</operator> <name>pred</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name>val</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name> <operator>&amp;&amp;</operator> <name>cbp</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_h263_pred_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_msmpeg4_decode_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"I at %d %d %d %06X\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">0x3C</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type_ptr</name> <operator>=</operator> <name>MB_TYPE_INTRA</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_inter_intra_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>INTER_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d%d %d %d/"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name> <operator>&amp;&amp;</operator> <name>cbp</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_blocks</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_msmpeg4_decode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>cbp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\nerror while decoding block: %d x %d (%d)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>av_cold</name> <name>int</name></type> <name>ff_msmpeg4_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MVTable</name> <modifier>*</modifier></type><name>mv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_h263_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_msmpeg4_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>NB_RL_TABLES</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_rl_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_static_rl_table_store</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">642</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1104</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">554</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">940</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">962</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_RL</name><argument_list>(<argument><expr><name><name>ff_rl_table</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">554</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_mv_tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><name>MV_VLC_BITS</name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>table_mv_bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>table_mv_code</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3714</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_mv_tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><name>MV_VLC_BITS</name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>table_mv_bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>table_mv_code</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2694</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_dc_luma_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table0_dc_lum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table0_dc_lum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1158</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_dc_chroma_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table0_dc_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table0_dc_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1118</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_dc_luma_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table1_dc_lum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table1_dc_lum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1476</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_dc_chroma_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table1_dc_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table1_dc_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1216</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2_dc_lum_vlc</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_dc_lum_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_dc_lum_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1472</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2_dc_chroma_vlc</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_dc_chroma_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_dc_chroma_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1506</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2_intra_cbpc_vlc</name></expr></argument>, <argument><expr><name>V2_INTRA_CBPC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_intra_cbpc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_intra_cbpc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2_mb_type_vlc</name></expr></argument>, <argument><expr><name>V2_MB_TYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_v2_mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2_mv_vlc</name></expr></argument>, <argument><expr><name>V2_MV_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mvtab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mvtab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">538</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_mb_non_intra_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MB_NON_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1636</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_mb_non_intra_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MB_NON_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2648</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_mb_non_intra_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MB_NON_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1532</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_mb_non_intra_vlc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MB_NON_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_wmv2_inter_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2488</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_msmp4_mb_i_vlc</name></expr></argument>, <argument><expr><name>MB_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_mb_i_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_msmp4_mb_i_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_inter_intra_vlc</name></expr></argument>, <argument><expr><name>INTER_INTRA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table_inter_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_table_inter_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><operator>=</operator> <name>msmpeg4v12_decode_mb</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><operator>=</operator> <name>msmpeg4v34_decode_mb</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>CONFIG_WMV2_DECODER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><operator>=</operator> <name>ff_wmv2_decode_mb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_height</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_msmpeg4_decode_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8LL</literal> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_code</name> <init>= <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>start_code</name><operator>!=</operator><literal type="number">0x00000100</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid startcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid picture type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid qscale\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>code</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>code</name><operator>&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid slice height %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0x17</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error, slice code was %X\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>/</operator> <operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>ff_msmpeg4_decode_ext_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><literal type="number">17</literal><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <name>MBAC_BITRATE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"qscale:%d rlc:%d rl:%d dc:%d mbrl:%d slice:%d \n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>slice_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <name>MBAC_BITRATE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">320</literal><operator>*</operator><literal type="number">240</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>&lt;=</operator><name>II_BITRATE</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"skip:%d rl:%d rlc:%d dc:%d mv:%d mbrl:%d qp:%d \n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_skip_mb_code</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>per_mb_rl_table</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d %"</literal><name>PRId64</name><literal type="string">" %d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_run_length</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_msmpeg4_decode_ext_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name><init>= <expr><name>buf_size</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name><init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;=</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">17</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>left</name><operator>&gt;=</operator><name>length</name> <operator>&amp;&amp;</operator> <name>left</name><operator>&lt;</operator><name>length</name><operator>+</operator><literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>left</name><operator>&lt;</operator><name>length</name><operator>+</operator><literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ext header missing, %d left\n"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"I-frame too long, ignoring ext header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msmpeg4_decode_dc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dir_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&lt;=</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>v2_dc_lum_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>v2_dc_chroma_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal dc vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>level</name><operator>-=</operator><literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_msmp4_dc_luma_vlc</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_msmp4_dc_chroma_vlc</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>dc_table_index</name></name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal dc vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>DC_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dc_val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>msmpeg4v1_pred_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <name>pred</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>dc_val</name><operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>ff_msmpeg4_pred_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc_val</name></expr></argument>, <argument><expr><name>dir_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <name>pred</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dc_val</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dc_val</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>level</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_msmpeg4_decode_block</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>run_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>dc_pred_dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RL_VLC_ELEM</name> <modifier>*</modifier></type><name>rl_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qmul</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qadd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>msmpeg4_decode_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dc overflow- block: %d qscale: %d//\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rl</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_rl_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">256</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dc overflow+ L qscale: %d//\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rl</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_rl_table</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_chroma_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">256</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dc overflow+ C qscale: %d//\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inter_intra_pred</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run_diff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>coded</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>not_coded</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dc_pred_dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scan_table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_v_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scan_table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_h_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scan_table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rl_vlc</name><operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rl</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_rl_table</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>run_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>run_diff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>coded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>scan_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scan_table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rl_vlc</name><operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>rl_vlc</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cache</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cache</name><operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>cache</name><operator>&amp;</operator><literal type="number">0x80000000</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>cache</name><operator>&amp;</operator><literal type="number">0x40000000</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&lt;=</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>last</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name><operator>=</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_COUNTER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><literal type="number">6</literal><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<expr_stmt><expr><name>last</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"ESC-3 %X at %d %d\n"</literal></expr></argument>,
<argument><expr><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>ll</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ll</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>ll</name><operator>=</operator> <literal type="number">8</literal><operator>+</operator><call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>ll</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>ll</name><operator>&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>ll</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>ll</name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name><operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_run_length</name></name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>run</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name><operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>level</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>+=</operator> <name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>+=</operator><literal type="number">192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>rl_vlc</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>+=</operator> <name>run</name> <operator>+</operator> <name><name>rl</name><operator>-&gt;</operator><name>max_run</name><index>[<expr><name>run</name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index><index>[<expr><name>level</name><operator>/</operator><name>qmul</name></expr>]</index></name> <operator>+</operator> <name>run_diff</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>rl_vlc</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>+=</operator> <name>run</name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>+</operator> <name><name>rl</name><operator>-&gt;</operator><name>max_level</name><index>[<expr><name>run</name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index><index>[<expr><operator>(</operator><name>run</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">63</literal></expr>]</index></name> <operator>*</operator> <name>qmul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>+=</operator> <name>run</name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">62</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>i</name><operator>-=</operator> <literal type="number">192</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">63</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name><init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">192</literal> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>/</operator> <name>qmul</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_BITSTREAM</name><operator>|</operator><name>AV_EF_COMPLIANT</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ignoring overflow at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<label><name>not_coded</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mpeg4_pred_ac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_msmpeg4_decode_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MVTable</name> <modifier>*</modifier></type><name>mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_mv_tables</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>MV_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal MV code at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>mv</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>table_mvx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>table_mvy</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <operator>*</operator><name>mx_ptr</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>+=</operator> <operator>*</operator><name>my_ptr</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mx</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mx</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mx</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>my</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>my</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>my</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mx_ptr</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>my_ptr</name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msmpeg4v1_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msmpeg4v1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 part 2 Microsoft variant version 1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_msmpeg4_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_h263_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_h263_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msmpeg4v2_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msmpeg4v2"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 part 2 Microsoft variant version 2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V2</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_msmpeg4_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_h263_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_h263_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msmpeg4v3_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msmpeg4"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 part 2 Microsoft variant version 3"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V3</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_msmpeg4_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_h263_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_h263_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmv1_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Video 7"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_msmpeg4_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_h263_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_h263_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
