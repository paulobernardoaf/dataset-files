<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\atrac.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>float</name></type> <name><name>ff_atrac_sf_table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>qmf_window</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>qmf_48tap_half</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.00001461907</literal></expr>, <expr><operator>-</operator><literal type="number">0.00009205479</literal></expr>,<expr><operator>-</operator><literal type="number">0.000056157569</literal></expr>,<expr><literal type="number">0.00030117269</literal></expr>,
<expr><literal type="number">0.0002422519</literal></expr>, <expr><operator>-</operator><literal type="number">0.00085293897</literal></expr>,<expr><operator>-</operator><literal type="number">0.0005205574</literal></expr>, <expr><literal type="number">0.0020340169</literal></expr>,
<expr><literal type="number">0.00078333891</literal></expr>, <expr><operator>-</operator><literal type="number">0.0042153862</literal></expr>, <expr><operator>-</operator><literal type="number">0.00075614988</literal></expr>, <expr><literal type="number">0.0078402944</literal></expr>,
<expr><operator>-</operator><literal type="number">0.000061169922</literal></expr>,<expr><operator>-</operator><literal type="number">0.01344162</literal></expr>, <expr><literal type="number">0.0024626821</literal></expr>, <expr><literal type="number">0.021736089</literal></expr>,
<expr><operator>-</operator><literal type="number">0.007801671</literal></expr>, <expr><operator>-</operator><literal type="number">0.034090221</literal></expr>, <expr><literal type="number">0.01880949</literal></expr>, <expr><literal type="number">0.054326009</literal></expr>,
<expr><operator>-</operator><literal type="number">0.043596379</literal></expr>, <expr><operator>-</operator><literal type="number">0.099384367</literal></expr>, <expr><literal type="number">0.13207909</literal></expr>, <expr><literal type="number">0.46424159</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_atrac_generate_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ff_atrac_sf_table</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ff_atrac_sf_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qmf_window</name><index>[<expr><literal type="number">47</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>qmf_48tap_half</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qmf_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>qmf_window</name><index>[<expr><literal type="number">47</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_atrac_init_gain_compensation</name><parameter_list>(<parameter><decl><type><name>AtracGCContext</name> <modifier>*</modifier></type><name>gctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id2exp_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>loc_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gctx</name><operator>-&gt;</operator><name>loc_scale</name></name> <operator>=</operator> <name>loc_scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gctx</name><operator>-&gt;</operator><name>loc_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>loc_scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gctx</name><operator>-&gt;</operator><name>id2exp_offset</name></name> <operator>=</operator> <name>id2exp_offset</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gctx</name><operator>-&gt;</operator><name>gain_tab1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>id2exp_offset</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gctx</name><operator>-&gt;</operator><name>gain_tab2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <name><name>gctx</name><operator>-&gt;</operator><name>loc_size</name></name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_atrac_gain_compensation</name><parameter_list>(<parameter><decl><type><name>AtracGCContext</name> <modifier>*</modifier></type><name>gctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,
<parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>gc_now</name></decl></parameter>, <parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>gc_next</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>lev</name></decl>, <decl><type ref="prev"/><name>gc_scale</name></decl>, <decl><type ref="prev"/><name>gain_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>lastpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gc_scale</name> <operator>=</operator> <ternary><condition><expr><name><name>gc_next</name><operator>-&gt;</operator><name>num_points</name></name></expr> ?</condition><then> <expr><name><name>gctx</name><operator>-&gt;</operator><name>gain_tab1</name><index>[<expr><name><name>gc_next</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>
</then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc_now</name><operator>-&gt;</operator><name>num_points</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name>gc_scale</name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gc_now</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lastpos</name> <operator>=</operator> <name><name>gc_now</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>gctx</name><operator>-&gt;</operator><name>loc_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <name><name>gctx</name><operator>-&gt;</operator><name>gain_tab1</name><index>[<expr><name><name>gc_now</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain_inc</name> <operator>=</operator> <name><name>gctx</name><operator>-&gt;</operator><name>gain_tab2</name><index>[<expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>gc_now</name><operator>-&gt;</operator><name>num_points</name></name></expr> ?</condition><then> <expr><name><name>gc_now</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>
</then><else>: <expr><name><name>gctx</name><operator>-&gt;</operator><name>id2exp_offset</name></name></expr></else></ternary><operator>)</operator> <operator>-</operator>
<name><name>gc_now</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>lastpos</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name>gc_scale</name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>pos</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>lev</name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>lastpos</name> <operator>+</operator> <name><name>gctx</name><operator>-&gt;</operator><name>loc_size</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name>gc_scale</name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>pos</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>lev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev</name> <operator>*=</operator> <name>gain_inc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name>gc_scale</name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>num_samples</name></expr>]</index></name></expr></argument>, <argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_atrac_iqmf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>inlo</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>inhi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>delayBuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>delayBuf</name></expr></argument>, <argument><expr><literal type="number">46</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <name>temp</name> <operator>+</operator> <literal type="number">46</literal></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIn</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inlo</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>+</operator> <name><name>inhi</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>inlo</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>inhi</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>inlo</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>inhi</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlo</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>inhi</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>nIn</name></expr>;</init> <condition><expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s1</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s2</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>qmf_window</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name><name>p1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>qmf_window</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pOut</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>delayBuf</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <name>nIn</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">46</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
