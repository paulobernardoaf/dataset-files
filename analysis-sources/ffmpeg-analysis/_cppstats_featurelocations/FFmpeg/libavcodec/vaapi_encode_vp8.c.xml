<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_encode_vp8.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_enc_vp8.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>VAAPIEncodeVP8Context</name> <block>{
<decl_stmt><decl><type><name>VAAPIEncodeContext</name></type> <name>common</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>loop_filter_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loop_filter_sharpness</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>q_index_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q_index_p</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeVP8Context</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vseq_var</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vseq-&gt;name, name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vseq_field</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vseq-&gt;seq_fields.bits.name, name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpic_var</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vpic-&gt;name, name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpic_field</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vpic-&gt;pic_fields.bits.name, name</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_vp8_init_sequence_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncSequenceParameterBufferVP8</name> <modifier>*</modifier></type><name>vseq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>frame_width_scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>frame_height_scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>error_resilient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>kf_auto</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>&amp;</operator> <name>VA_RC_CQP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>bits_per_second</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vseq</name><operator>-&gt;</operator><name>intra_period</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_vp8_init_picture_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeVP8Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferVP8</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>reconstructed_frame</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>coded_buf</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PICTURE_TYPE_IDR</name></expr>:</case>
<case>case <expr><name>PICTURE_TYPE_I</name></expr>:</case>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>force_kf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_last_frame</name></name> <operator>=</operator>
<name><name>vpic</name><operator>-&gt;</operator><name>ref_gf_frame</name></name> <operator>=</operator>
<name><name>vpic</name><operator>-&gt;</operator><name>ref_arf_frame</name></name> <operator>=</operator>
<name>VA_INVALID_SURFACE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PICTURE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>no_ref_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>no_ref_gf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>no_ref_arf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ref_last_frame</name></name> <operator>=</operator>
<name><name>vpic</name><operator>-&gt;</operator><name>ref_gf_frame</name></name> <operator>=</operator>
<name><name>vpic</name><operator>-&gt;</operator><name>ref_arf_frame</name></name> <operator>=</operator>
<name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>recon_surface</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid picture type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>frame_type</name></name> <operator>=</operator> <operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_IDR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>show_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>refresh_last</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>refresh_golden_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>refresh_alternate_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>loop_filter_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>loop_filter_level</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>sharpness_level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>loop_filter_sharpness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>clamp_qindex_low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>clamp_qindex_high</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_vp8_write_quant_table</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeVP8Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAQMatrixBufferVP8</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>quant</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAQMatrixBufferType</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>quant</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quant</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>q_index_p</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>q_index_i</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index_delta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quant</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_vp8_configure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeVP8Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>q_index_p</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VP8_MAX_QUANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>q_index_i</name></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>q_index_p</name></name> <operator>+</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VP8_MAX_QUANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>q_index_i</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>q_index_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_quant_range</name></name> <operator>=</operator> <name>VP8_MAX_QUANT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeProfile</name></type> <name><name>vaapi_encode_vp8_profiles</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr> , <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileVP8Version0_3</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeType</name></type> <name>vaapi_encode_type_vp8</name> <init>= <expr><block>{
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>vaapi_encode_vp8_profiles</name></expr>,

<expr><operator>.</operator><name>configure</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_configure</name></expr>,

<expr><operator>.</operator><name>default_quality</name> <operator>=</operator> <literal type="number">40</literal></expr>,

<expr><operator>.</operator><name>sequence_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSequenceParameterBufferVP8</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_sequence_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_init_sequence_params</name></expr>,

<expr><operator>.</operator><name>picture_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncPictureParameterBufferVP8</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_picture_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_init_picture_params</name></expr>,

<expr><operator>.</operator><name>write_extra_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_write_quant_table</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_vp8_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_type_vp8</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VAAPIEncodeVP8Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaapi_encode_vp8_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VAAPI_ENCODE_COMMON_OPTIONS</name></expr>,
<expr><name>VAAPI_ENCODE_RC_OPTIONS</name></expr>,

<expr><block>{ <expr><literal type="string">"loop_filter_level"</literal></expr>, <expr><literal type="string">"Loop filter level"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>loop_filter_level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"loop_filter_sharpness"</literal></expr>, <expr><literal type="string">"Loop filter sharpness"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>loop_filter_sharpness</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>vaapi_encode_vp8_defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"120"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vaapi_encode_vp8_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"vp8_vaapi"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vaapi_encode_vp8_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp8_vaapi_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp8_vaapi"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VP8 (VAAPI)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP8</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeVP8Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_init</name></expr>,
<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_send_frame</name></expr>,
<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_receive_packet</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_close</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_vp8_class</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>vaapi_encode_vp8_defaults</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_VAAPI</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"vaapi"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
