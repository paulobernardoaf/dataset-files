<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\sbcenc.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbcdsp.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SBCEncContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msbc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr>struct <name>sbc_frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>SBCDSPContext</name></expr></argument>, <argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></struct></type> <name>SBCEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_analyze_audio</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>X</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>increment</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition>
<incr><expr><name>blk</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>increment</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4s</name></name><argument_list>(
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator>
<name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>increment</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>X</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>increment</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition>
<incr><expr><name>blk</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>increment</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8s</name></name><argument_list>(
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator>
<name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>increment</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</return>

<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>size_t</name></type> <name>sbc_pack_frame</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>joint</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>msbc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>crc_header</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crc_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>levels</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sb_sample_delta</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msbc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MSBC_SYNCWORD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SBC_SYNCWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>frequency</name></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>allocation</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>STEREO</name>
<operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>crc_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc_pos</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr></argument>, <argument><expr><name>joint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>joint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc_pos</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>crc_pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>crc_pos</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>crc_pos</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_sbc_crc8</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crc_ctx</name></name></expr></argument>, <argument><expr><name>crc_header</name></expr></argument>, <argument><expr><name>crc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_sbc_calculate_bits</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>levels</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<operator>(</operator><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator>
<name>SCALE_OUT_BITS</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb_sample_delta</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator>
<operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator>
<name>SCALE_OUT_BITS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>audio_sample</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>levels</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name><name>sb_sample_delta</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator>
<name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name>audio_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SBCEncContext</name> <modifier>*</modifier></type><name>sbc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_SBC_MSBC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>msbc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbc</name><operator>-&gt;</operator><name>msbc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mSBC require mono channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">16000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mSBC require 16 kHz samplerate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SBC_MODE_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>MSBC_BLOCKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>allocation</name></name> <operator>=</operator> <name>SBC_AM_LOUDNESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>MSBC_BLOCKS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">255</literal><operator>*</operator><name>FF_QP2LAMBDA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitpool &gt; 255 is not allowed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SBC_MODE_MONO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sbc</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>&lt;=</operator> <literal type="number">3000</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">270000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;</operator> <literal type="number">180000</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">420000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SBC_MODE_JOINT_STEREO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SBC_MODE_STEREO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sbc</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>&lt;=</operator> <literal type="number">4000</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">420000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>sbc</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator>
<operator>/</operator> <operator>(</operator><literal type="number">1000000</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>allocation</name></name> <operator>=</operator> <name>SBC_AM_LOUDNESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SBC_MODE_DUAL_CHANNEL</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator>
<operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name>
<operator>-</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SBC_MODE_JOINT_STEREO</name><operator>)</operator><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>-</operator> <literal type="number">32</literal> <operator>+</operator> <name>d</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>codesize</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crc_ctx</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_8_EBU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>SBC_X_BUFFER_SIZE</name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>increment</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sbc</name><operator>-&gt;</operator><name>msbc</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_sbcdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>av_frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SBCEncContext</name> <modifier>*</modifier></type><name>sbc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>joint</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SBC_MODE_JOINT_STEREO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dual</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SBC_MODE_DUAL_CHANNEL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>dual</name><operator>)</operator>
<operator>+</operator> <name>joint</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>av_frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>codesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>frame_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>position</name></name> <operator>=</operator> <call><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sbc_enc_process_input_8s</name></name><argument_list>(
<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>av_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>X</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>position</name></name> <operator>=</operator> <call><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sbc_enc_process_input_4s</name></name><argument_list>(
<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>av_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>X</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>sbc_analyze_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sbc_calc_scalefactors_j</name></name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sbc_calc_scalefactors</name></name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample_f</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbc_pack_frame</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>msbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SBCEncContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"sbc_delay"</literal></expr>, <expr><literal type="string">"set maximum algorithmic latency"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_delay</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">13000</literal></expr>}</block></expr>, <expr><literal type="number">1000</literal></expr>,<expr><literal type="number">13000</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"msbc"</literal></expr>, <expr><literal type="string">"use mSBC mode (wideband speech mono SBC)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>msbc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>sbc_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"sbc encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_sbc_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sbc"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SBC (low-complexity subband codec)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SBC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBCEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>sbc_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>sbc_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sbc_class</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_sbc_profiles</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
