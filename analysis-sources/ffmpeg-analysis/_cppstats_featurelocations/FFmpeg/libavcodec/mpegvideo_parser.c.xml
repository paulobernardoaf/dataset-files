<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegvideo_parser.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<struct>struct <name>MpvParseContext</name> <block>{
<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>progressive_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mpegvideo_extract_headers</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MpvParseContext</name></name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_rate_index</name></decl>, <decl><type ref="prev"/><name>ext_type</name></decl>, <decl><type ref="prev"/><name>bytes_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_rate_ext_n</name></decl>, <decl><type ref="prev"/><name>frame_rate_ext_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_field_first</name></decl>, <decl><type ref="prev"/><name>repeat_first_field</name></decl>, <decl><type ref="prev"/><name>progressive_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>horiz_size_ext</name></decl>, <decl><type ref="prev"/><name>vert_size_ext</name></decl>, <decl><type ref="prev"/><name>bit_rate_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_set_size</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_dim_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vbv_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><name>AV_PIX_FMT_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_code</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_left</name> <operator>=</operator> <name>buf_end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>start_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PICTURE_START_CODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vbv_delay</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SEQ_START_CODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>set_dim_ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_set_size</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_index</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>ff_mpeg12_frame_rate_tab</name><index>[<expr><name>frame_rate_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EXT_START_CODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext_type</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>ext_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>horiz_size_ext</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vert_size_ext</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_rate_ext</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_ext_n</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_ext_d</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name><operator>=</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_format</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>chroma_format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>horiz_size_ext</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>height</name></name><operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <name>vert_size_ext</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name>bit_rate</name><operator>&amp;</operator><literal type="number">0x3FFFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bit_rate_ext</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>did_set_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>set_dim_ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>frame_rate_ext_n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name> <operator>*</operator> <operator>(</operator><name>frame_rate_ext_d</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>bytes_left</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_field_first</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_first_field</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>progressive_frame</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>repeat_first_field</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top_field_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>progressive_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>progressive_frame</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top_field_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_TT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_BB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<goto>goto <name>the_end</name>;</goto>
<default>default:</default>


<if_stmt><if>if <condition>(<expr><name>start_code</name> <operator>&gt;=</operator> <name>SLICE_MIN_START_CODE</name> <operator>&amp;&amp;</operator>
<name>start_code</name> <operator>&lt;=</operator> <name>SLICE_MAX_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<label><name>the_end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>set_dim_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <name>bit_rate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>=</operator> <literal type="number">400LL</literal><operator>*</operator><name>bit_rate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bit_rate</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>&amp;&amp;</operator> <name>bit_rate</name> <operator>!=</operator> <literal type="number">0x3FFFF</literal><operator>)</operator> <operator>||</operator> <name>vbv_delay</name> <operator>!=</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">400LL</literal><operator>*</operator><name>bit_rate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVCTX_TIMEBASE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_inv_q</name><argument_list>(<argument>av_mul_q(avctx-&gt;framerate, (AVRational){avctx-&gt;ticks_per_frame, <literal type="number">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegvideo_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MpvParseContext</name></name> <modifier>*</modifier></type><name>pc1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name><init>= <expr><operator>&amp;</operator><name><name>pc1</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>next</name><operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>next</name><operator>=</operator> <call><name>ff_mpeg1_find_frame_end</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>mpegvideo_extract_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pict_type=%d frame_rate=%0.3f repeat_pict=%d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegvideo_split</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>state</name><operator>=</operator> <operator>(</operator><name>state</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0x1B3</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>found</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <literal type="number">0x1B5</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>&lt;</operator> <literal type="number">0x200</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegvideo_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_mpegvideo_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>, <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>MpvParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>mpegvideo_parse_init</name></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>mpegvideo_parse</name></expr>,
<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,
<expr><operator>.</operator><name>split</name> <operator>=</operator> <name>mpegvideo_split</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
