<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\huffman.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HNODE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>HeapElem</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>HeapElem</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>heap_sift</name><parameter_list>(<parameter><decl><type><name>HeapElem</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>root</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><name>root</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>h</name><index>[<expr><name>child</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&gt;</operator> <name><name>h</name><index>[<expr><name>child</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>child</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&gt;</operator> <name><name>h</name><index>[<expr><name>child</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>HeapElem</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>child</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_huff_gen_len_table</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stats_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HeapElem</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>up</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>up</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>len</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>map</name><init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name> <operator>||</operator> <operator>!</operator><name>up</name> <operator>||</operator> <operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>stats_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name>skip0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <operator>(</operator><name><name>stats</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>heap_sift</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>size</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>size</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>min1v</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>up</name><index>[<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>heap_sift</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><index>[<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>+=</operator> <name>min1v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>heap_sift</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>len</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>len</name><index>[<expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>len</name><index>[<expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_tree_codes</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lens</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>xlat</name></decl></parameter>,
<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>pfx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_zero_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>HNODE</name> <operator>||</operator> <operator>(</operator><name>no_zero_count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>count</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <name>pfx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lens</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <name>pl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xlat</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pfx</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tree_codes</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>lens</name></expr></argument>, <argument><expr><name>xlat</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>,
<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>no_zero_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pfx</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tree_codes</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>lens</name></expr></argument>, <argument><expr><name>xlat</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>,
<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>no_zero_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_huff_tree</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>no_zero_count</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FF_HUFFMAN_FLAG_ZERO_COUNT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lens</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>xlat</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_tree_codes</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>lens</name></expr></argument>, <argument><expr><name>xlat</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>no_zero_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>lens</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>xlat</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>ff_huff_build_tree</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_codes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bits</name></decl></parameter>,
<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>HuffCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Too high symbol frequencies. "</literal>
<literal type="string">"Tree construction is not possible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>nb_codes</name></expr></argument>, <argument><expr><name>Node</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>nb_codes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>nb_codes</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_codes</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_count</name> <init>= <expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>+</operator> <name><name>nodes</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name></expr></init></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>cur_node</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>cur_count</name> <operator>&gt;</operator> <name><name>nodes</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>||</operator>
<operator>(</operator><name>cur_count</name> <operator>==</operator> <name><name>nodes</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FF_HUFFMAN_FLAG_HNODE_FIRST</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name>HNODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>cur_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_node</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>build_huff_tree</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>nb_codes</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error building tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
