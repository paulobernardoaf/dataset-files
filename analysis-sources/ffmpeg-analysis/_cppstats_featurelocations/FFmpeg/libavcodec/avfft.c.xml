<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\avfft.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>



<function><type><name>FFTContext</name> <modifier>*</modifier></type><name>av_fft_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>ff_fft_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fft_permute</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_permute</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fft_calc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_fft_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>

<function><type><name>FFTContext</name> <modifier>*</modifier></type><name>av_mdct_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_imdct_calc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_imdct_half</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_mdct_calc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_mdct_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RDFT</name></expr></cpp:if>

<function><type><name>RDFTContext</name> <modifier>*</modifier></type><name>av_rdft_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RDFTransformType</name></name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>ff_rdft_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_rdft_calc</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_rdft_end</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rdft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCT</name></expr></cpp:if>

<function><type><name>DCTContext</name> <modifier>*</modifier></type><name>av_dct_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>DCTTransformType</name></name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>ff_dct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_dct_calc</name><parameter_list>(<parameter><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_dct_end</name><parameter_list>(<parameter><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dct_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
