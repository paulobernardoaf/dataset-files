<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cavs.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_CAVS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_CAVS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cavsdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_START_CODE</name></cpp:macro> <cpp:value>0x000001af</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_START_CODE</name></cpp:macro> <cpp:value>0x000001b5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_START_CODE</name></cpp:macro> <cpp:value>0x000001b2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAVS_START_CODE</name></cpp:macro> <cpp:value>0x000001b0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_I_START_CODE</name></cpp:macro> <cpp:value>0x000001b3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_PB_START_CODE</name></cpp:macro> <cpp:value>0x000001b6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_AVAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_AVAIL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_AVAIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_AVAIL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_AVAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_INTRA</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_DIR</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESCAPE_CODE</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FWD0</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FWD1</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BWD0</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BWD1</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM0</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM1</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLITH</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLITV</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_BWD_OFFS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_STRIDE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <name>cavs_mb</name> <block>{
<decl><name>I_8X8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>P_SKIP</name></decl>,
<decl><name>P_16X16</name></decl>,
<decl><name>P_16X8</name></decl>,
<decl><name>P_8X16</name></decl>,
<decl><name>P_8X8</name></decl>,
<decl><name>B_SKIP</name></decl>,
<decl><name>B_DIRECT</name></decl>,
<decl><name>B_FWD_16X16</name></decl>,
<decl><name>B_BWD_16X16</name></decl>,
<decl><name>B_SYM_16X16</name></decl>,
<decl><name>B_8X8</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>cavs_sub_mb</name> <block>{
<decl><name>B_SUB_DIRECT</name></decl>,
<decl><name>B_SUB_FWD</name></decl>,
<decl><name>B_SUB_BWD</name></decl>,
<decl><name>B_SUB_SYM</name></decl>
}</block>;</enum>

<enum>enum <name>cavs_intra_luma</name> <block>{
<decl><name>INTRA_L_VERT</name></decl>,
<decl><name>INTRA_L_HORIZ</name></decl>,
<decl><name>INTRA_L_LP</name></decl>,
<decl><name>INTRA_L_DOWN_LEFT</name></decl>,
<decl><name>INTRA_L_DOWN_RIGHT</name></decl>,
<decl><name>INTRA_L_LP_LEFT</name></decl>,
<decl><name>INTRA_L_LP_TOP</name></decl>,
<decl><name>INTRA_L_DC_128</name></decl>
}</block>;</enum>

<enum>enum <name>cavs_intra_chroma</name> <block>{
<decl><name>INTRA_C_LP</name></decl>,
<decl><name>INTRA_C_HORIZ</name></decl>,
<decl><name>INTRA_C_VERT</name></decl>,
<decl><name>INTRA_C_PLANE</name></decl>,
<decl><name>INTRA_C_LP_LEFT</name></decl>,
<decl><name>INTRA_C_LP_TOP</name></decl>,
<decl><name>INTRA_C_DC_128</name></decl>,
}</block>;</enum>

<enum>enum <name>cavs_mv_pred</name> <block>{
<decl><name>MV_PRED_MEDIAN</name></decl>,
<decl><name>MV_PRED_LEFT</name></decl>,
<decl><name>MV_PRED_TOP</name></decl>,
<decl><name>MV_PRED_TOPRIGHT</name></decl>,
<decl><name>MV_PRED_PSKIP</name></decl>,
<decl><name>MV_PRED_BSKIP</name></decl>
}</block>;</enum>

<enum>enum <name>cavs_block</name> <block>{
<decl><name>BLK_16X16</name></decl>,
<decl><name>BLK_16X8</name></decl>,
<decl><name>BLK_8X16</name></decl>,
<decl><name>BLK_8X8</name></decl>
}</block>;</enum>

<enum>enum <name>cavs_mv_loc</name> <block>{
<decl><name>MV_FWD_D3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MV_FWD_B2</name></decl>,
<decl><name>MV_FWD_B3</name></decl>,
<decl><name>MV_FWD_C2</name></decl>,
<decl><name>MV_FWD_A1</name></decl>,
<decl><name>MV_FWD_X0</name></decl>,
<decl><name>MV_FWD_X1</name></decl>,
<decl><name>MV_FWD_A3</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>MV_FWD_X2</name></decl>,
<decl><name>MV_FWD_X3</name></decl>,
<decl><name>MV_BWD_D3</name> <init>= <expr><name>MV_BWD_OFFS</name></expr></init></decl>,
<decl><name>MV_BWD_B2</name></decl>,
<decl><name>MV_BWD_B3</name></decl>,
<decl><name>MV_BWD_C2</name></decl>,
<decl><name>MV_BWD_A1</name></decl>,
<decl><name>MV_BWD_X0</name></decl>,
<decl><name>MV_BWD_X1</name></decl>,
<decl><name>MV_BWD_A3</name> <init>= <expr><name>MV_BWD_OFFS</name><operator>+</operator><literal type="number">8</literal></expr></init></decl>,
<decl><name>MV_BWD_X2</name></decl>,
<decl><name>MV_BWD_X3</name></decl>
}</block>;</enum>

<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>typedef</argument>, <argument>struct</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>ref</name></decl>;</decl_stmt>
</block_content>}</block> <expr_stmt><expr><name>cavs_vector</name></expr>;</expr_stmt>

<struct>struct <name>dec_2dvlc</name> <block>{
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>rltab</name><index>[<expr><literal type="number">59</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>level_add</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>golomb_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>max_run</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>AVSFrame</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>poc</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVSFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVSContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264ChromaContext</name></type> <name>h264chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CAVSDSPContext</name></type> <name>cdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSFrame</name></type> <name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVSFrame</name></type> <name><name>DPB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>low_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>, <name>level</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_revision</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>progressive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_structure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_mode_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>loop_filter_disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_offset</name></decl>, <name>beta_offset</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbx</name></decl>, <name>mby</name>, <name>mbidx</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cy</name></decl>, <modifier>*</modifier><name>cu</name>, <modifier>*</modifier><name>cv</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>left_qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_qp</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>cavs_vector</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name><name>top_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>col_mv</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name><name>pred_mode_Y</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>top_pred_Y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>l_stride</name></decl>, <name>c_stride</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>luma_scan</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp_fixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_qp_fixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanTable</name></type> <name>scantable</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border_y</name></decl>, <modifier>*</modifier><name>top_border_u</name>, <modifier>*</modifier><name>top_border_v</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>left_border_y</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <name><name>left_border_u</name><index>[<expr><literal type="number">10</literal></expr>]</index></name>, <name><name>left_border_v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intern_border_y</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>topleft_border_y</name></decl>, <name>topleft_border_u</name>, <name>topleft_border_v</name>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>intra_pred_l</name><index>[<expr><literal type="number">8</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>intra_pred_c</name><index>[<expr><literal type="number">7</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>col_type_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>sym_factor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>direct_den</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>scale_den</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>edge_emu_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_keyframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVSContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_cavs_chroma_qp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_cavs_partition_flags</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>cavs_vector</name></type> <name>ff_cavs_intra_mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>cavs_vector</name></type> <name>ff_cavs_dir_mv</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_mvs</name><parameter_list>(<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_block</name></name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BLK_16X16</name></expr>:</case>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>MV_STRIDE</name></expr> ]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>MV_STRIDE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<case>case <expr><name>BLK_16X8</name></expr>:</case>
<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BLK_8X16</name></expr>:</case>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>MV_STRIDE</name></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ff_cavs_filter</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mb</name></name></type> <name>mb_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_load_intra_pred_luma</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_load_intra_pred_chroma</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_modify_mb_i</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred_mode_uv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_inter</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mb</name></name></type> <name>mb_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_mv</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mv_loc</name></name></type> <name>nP</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mv_loc</name></name></type> <name>nC</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>cavs_mv_pred</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_block</name></name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_cavs_init_mb</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_cavs_next_mb</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_cavs_init_pic</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_cavs_init_top_lines</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_cavs_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_cavs_end</name> <parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
