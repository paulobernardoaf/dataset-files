<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp56.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VP56_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VP56_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp3dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56dsp.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>vp56_context</name></name></type> <name>VP56Context</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>VP56_FRAME_NONE</name> <init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>VP56_FRAME_CURRENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VP56_FRAME_PREVIOUS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VP56_FRAME_GOLDEN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VP56_FRAME_GOLDEN2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block></enum></type> <name>VP56Frame</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>VP56_MB_INTER_NOVEC_PF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTRA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_DELTA_PF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_V1_PF</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_V2_PF</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_NOVEC_GF</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_DELTA_GF</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_4V</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_V1_GF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>VP56_MB_INTER_V2_GF</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
}</block></enum></type> <name>VP56mb</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP56Tree</name> <block>{
<decl_stmt><decl><type><name>int8_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>prob_idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56Tree</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP56mv</name> <block>{
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56mv</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP56_SIZE_CHANGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>VP56ParseVectorAdjustment</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>VP56Filter</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>VP56mv</name></type> <name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>VP56ParseCoeff</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>VP56DefaultModelsInit</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>VP56ParseVectorModels</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>VP56ParseCoeffModels</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>VP56ParseHeader</name>)<parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>VP56RangeCoder</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_reached</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56RangeCoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP56RefDc</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>not_null_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Frame</name></type> <name>ref_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc_coeff</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56RefDc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP56Macroblock</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name></type> <name>mv</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56Macroblock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP56Model</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_reorder</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_index_to_pos</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_index_to_idct_selector</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vector_sig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vector_dct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vector_pdi</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vector_pdv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vector_fdv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_dccv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_ract</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_acct</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_dcct</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">36</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_runv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb_type</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb_types_stats</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VP56Model</name>;</typedef>

<struct>struct <name>vp56_context</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264ChromaContext</name></type> <name>h264chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP3DSPContext</name></type> <name>vp3dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56DSPContext</name></type> <name>vp56dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idct_scantable</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name><name>frames</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>edge_emu_buffer_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>edge_emu_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>ccp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub_version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>golden_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>plane_width</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>plane_height</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>block_offset</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quantizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dequant_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dequant_ac</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VP56RefDc</name> <modifier>*</modifier></type><name>above_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RefDc</name></type> <name><name>left_block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>above_block_idx</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>prev_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>VP56mb</name></type> <name>mb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Macroblock</name> <modifier>*</modifier></type><name>macroblocks</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block_coeff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>idct_selector</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>mv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>vector_candidate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vector_candidate_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>filter_header</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>deblock_filtering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_selection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_vector_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_variance_threshold</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>bounding_values_array</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_ctx</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_ctx_last</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>flip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frbi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>srbi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>stride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vp56_coord_div</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56ParseVectorAdjustment</name></type> <name>parse_vector_adjustment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Filter</name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56ParseCoeff</name></type> <name>parse_coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56DefaultModelsInit</name></type> <name>default_models_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56ParseVectorModels</name></type> <name>parse_vector_models</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56ParseCoeffModels</name></type> <name>parse_coeff_models</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56ParseHeader</name></type> <name>parse_header</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>alpha_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>modelp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Model</name></type> <name>model</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>use_huffman</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name><name>dccv_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name><name>runv_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name><name>ract_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>nb_null</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>have_undamaged_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard_frame</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>int</name></type> <name>ff_vp56_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vp56_init_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vp56_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vp56_free_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp56_init_dequant</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantizer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vp56_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_vp56_norm_shift</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>ff_vp56_init_range_decoder</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vpX_rac_is_end</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>vp56_rac_renorm</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name><name>ff_vp56_norm_shift</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_word</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code_word</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code_word</name> <operator>|=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<return>return <expr><name>code_word</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/vp56_arith.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/vp56_arith.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>vp56_rac_get_prob</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp56_rac_get_prob</name></cpp:macro> <cpp:value>vp56_rac_get_prob</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp56_rac_get_prob</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_word</name> <init>= <expr><call><name>vp56_rac_renorm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>prob</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low_shift</name> <init>= <expr><name>low</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>code_word</name> <operator>&gt;=</operator> <name>low_shift</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <name>low</name></expr> </then><else>: <expr><name>low</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><name>code_word</name> <operator>-</operator> <name>low_shift</name></expr> </then><else>: <expr><name>code_word</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>vp56_rac_get_prob_branchy</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp56_rac_get_prob_branchy</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>code_word</name> <init>= <expr><call><name>vp56_rac_renorm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>prob</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>low_shift</name> <init>= <expr><name>low</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code_word</name> <operator>&gt;=</operator> <name>low_shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name> <operator>-</operator> <name>low_shift</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp56_rac_get</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_word</name> <init>= <expr><call><name>vp56_rac_renorm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low_shift</name> <init>= <expr><name>low</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>code_word</name> <operator>&gt;=</operator> <name>low_shift</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code_word</name> <operator>-=</operator> <name>low_shift</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_rac_get</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp56_rac_gets</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bits</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_rac_get_uint</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bits</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_unused</name> <name>int</name></type> <name>vp8_rac_get_sint</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_unused</name> <name>int</name></type> <name>vp56_rac_gets_nn</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>v</name> <operator>+</operator> <operator>!</operator><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_unused</name> <name>int</name></type> <name>vp8_rac_get_nn</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>v</name> <operator>+</operator> <operator>!</operator><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>vp56_rac_get_tree</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VP56Tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>probs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>probs</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>prob_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>+=</operator> <name><name>tree</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><name><name>tree</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>VP56RangeCoder</name> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>tree</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>probs</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>probs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><operator>-</operator><name>i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_rac_get_coeff</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>prob</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>prob</name></expr>)</condition>;</do>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
