<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mjpegbdec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>read_offs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offs</name><init>= <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>offs</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>offs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mjpegb_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>hgb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dqt_offs</name></decl>, <decl><type ref="prev"/><name>dht_offs</name></decl>, <decl><type ref="prev"/><name>sof_offs</name></decl>, <decl><type ref="prev"/><name>sos_offs</name></decl>, <decl><type ref="prev"/><name>second_field_offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>field_size</name></decl>, <decl><type ref="prev"/><name>sod_offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_picture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adobe_transform</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<label><name>read_header</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>restart_interval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>restart_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mjpb_skiptosod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'j'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>field_size</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"field size: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>second_field_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"second_field_offs is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"second field offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dqt_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"dqt is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"dqt offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dqt_offs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf_ptr</name><operator>+</operator><name>dqt_offs</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_end</name> <operator>-</operator> <operator>(</operator><name>buf_ptr</name><operator>+</operator><name>dqt_offs</name><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_code</name></name> <operator>=</operator> <name>DQT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mjpeg_decode_dqt</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dht_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"dht is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"dht offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dht_offs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf_ptr</name><operator>+</operator><name>dht_offs</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_end</name> <operator>-</operator> <operator>(</operator><name>buf_ptr</name><operator>+</operator><name>dht_offs</name><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_code</name></name> <operator>=</operator> <name>DHT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mjpeg_decode_dht</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sof_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sof offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sof_offs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf_ptr</name><operator>+</operator><name>sof_offs</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_end</name> <operator>-</operator> <operator>(</operator><name>buf_ptr</name><operator>+</operator><name>sof_offs</name><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_code</name></name> <operator>=</operator> <name>SOF0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mjpeg_decode_sof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sos_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"sos is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sos offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sod_offs</name> <operator>=</operator> <call><name>read_offs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hgb</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name></expr></argument>, <argument><expr><literal type="string">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sod offs: 0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sos_offs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf_ptr</name> <operator>+</operator> <name>sos_offs</name></expr></argument>,
<argument><expr><literal type="number">8</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>field_size</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf_ptr</name> <operator>-</operator> <name>sos_offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mjpb_skiptosod</name></name> <operator>=</operator> <operator>(</operator><name>sod_offs</name> <operator>-</operator> <name>sos_offs</name> <operator>-</operator> <call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_code</name></name> <operator>=</operator> <name>SOS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mjpeg_decode_sos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bottom_field</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bottom_field</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>interlace_polarity</name></name> <operator>&amp;&amp;</operator> <name>second_field_offs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>second_field_offs</name></expr>;</expr_stmt>
<goto>goto <name>read_header</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>got_picture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lossless</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_QP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"QP: %d\n"</literal></expr></argument>,
<argument><expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mjpegb_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mjpegb"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple MJPEG-B"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MJPEGB</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MJpegDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mjpeg_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mjpeg_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>mjpegb_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
