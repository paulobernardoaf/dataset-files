<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aura.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aura_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aura_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>delta_table</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">48</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"got a buffer with %d bytes when %d were expected\n"</literal></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">48</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>delta_table</name><index>[<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>U</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>V</name><operator>++</operator></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>delta_table</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>delta_table</name><index>[<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>delta_table</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>delta_table</name><index>[<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>U</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>V</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aura2_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aura2"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Auravision Aura 2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AURA2</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aura_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aura_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
