<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\motion_est.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MOTION_EST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MOTION_EST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<struct_decl>struct <name>MpegEncContext</name>;</struct_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_IA64</name></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MV</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MV</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DMV</name></cpp:macro> <cpp:value>(2*MAX_MV)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_MAP_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ME_ZERO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ME_EPZS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ME_XONE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>MotionEstContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>co_located_mv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>direct_basis_mv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>scratchpad</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>best_mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>temp_mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>score_map</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>map_generation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre_penalty_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>penalty_factor</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>sub_penalty_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_penalty_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre_pass</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dia_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ymin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ymax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ref</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uvstride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>mc_mb_var_sum_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mb_var_sum_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scene_change_score</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>op_pixels_func</name><argument_list>(<argument><expr><operator>*</operator><name>hpel_put</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op_pixels_func</name><argument_list>(<argument><expr><operator>*</operator><name>hpel_avg</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qpel_mc_func</name><argument_list>(<argument><expr><operator>*</operator><name>qpel_put</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qpel_mc_func</name><argument_list>(<argument><expr><operator>*</operator><name>qpel_avg</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_penalty</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_DMV</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current_mv_penalty</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sub_motion_search</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmin</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>MotionEstContext</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_h263_round_chroma</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>h263_chroma_roundtab</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>h263_chroma_roundtab</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_init_me</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_estimate_p_frame_motion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_estimate_b_frame_motion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_pre_estimate_p_frame_motion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>ff_epzs_motion_search</name><argument_list>(<argument><expr>struct <name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>mx_ptr</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>my_ptr</name></expr></argument>,
<argument><expr><name>int</name> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>int</name> <name>src_index</name></expr></argument>, <argument><expr><name>int</name> <name>ref_index</name></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>last_mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>ref_mv_scale</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>,
<argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_get_mb_score</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_rate</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>ff_get_best_fcode</name><argument_list>(<argument><expr>struct <name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ff_fix_long_p_mvs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>ff_fix_long_mvs</name><argument_list>(<argument><expr>struct <name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>field_select_table</name></expr></argument>,
<argument><expr><name>int</name> <name>field_select</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>f_code</name></expr></argument>,
<argument><expr><name>int</name> <name>type</name></expr></argument>, <argument><expr><name>int</name> <name>truncate</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
