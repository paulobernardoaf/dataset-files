<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\g729dec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g729.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g729data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g729postfilter.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSFQ_MIN</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSFQ_MAX</name></cpp:macro> <cpp:value>25681</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSFQ_DIFF_MIN</name></cpp:macro> <cpp:value>321</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOL_LEN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARP_MIN</name></cpp:macro> <cpp:value>3277</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARP_MAX</name></cpp:macro> <cpp:value>13017</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MR_ENERGY</name></cpp:macro> <cpp:value>1018156</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECISION_NOISE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECISION_INTERMEDIATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECISION_VOICE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>FORMAT_G729_8K</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FORMAT_G729D_6K4</name></decl>,
<decl><name>FORMAT_COUNT</name></decl>,
}</block></enum></type> <name>G729Formats</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ac_index_bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parity_bit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gc_1st_index_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gc_2nd_index_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fc_signs_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fc_indexes_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>block_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>G729FormatDescription</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>exc_base</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>SUBFRAME_SIZE</name><operator>+</operator><name>PITCH_DELAY_MAX</name><operator>+</operator><name>INTERPOL_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>exc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_int_prev</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>past_quantizer_output_buf</name><index>[<expr><name>MA_NP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsfq</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsp_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>lsp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quant_energy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>syn_filter_data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int16_t</name></type> <name><name>residual</name><index>[<expr><name>SUBFRAME_SIZE</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>res_filter_data</name><index>[<expr><name>SUBFRAME_SIZE</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>pos_filter_data</name><index>[<expr><name>SUBFRAME_SIZE</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>past_gain_pitch</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>past_gain_code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name>voice_decision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>onset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>was_periodic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>ht_prev_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>gain_coeff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rand_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ma_predictor_prev</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name><name>hpf_f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>hpf_z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>G729ChannelContext</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>AudioDSPContext</name></type> <name>adsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>G729ChannelContext</name> <modifier>*</modifier></type><name>channel_context</name></decl>;</decl_stmt>
}</block></struct></type> <name>G729Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>G729FormatDescription</name></type> <name>format_g729_8k</name> <init>= <expr><block>{
<expr><operator>.</operator><name>ac_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>parity_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>gc_1st_index_bits</name> <operator>=</operator> <name>GC_1ST_IDX_BITS_8K</name></expr>,
<expr><operator>.</operator><name>gc_2nd_index_bits</name> <operator>=</operator> <name>GC_2ND_IDX_BITS_8K</name></expr>,
<expr><operator>.</operator><name>fc_signs_bits</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>fc_indexes_bits</name> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><operator>.</operator><name>block_size</name> <operator>=</operator> <name>G729_8K_BLOCK_SIZE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>G729FormatDescription</name></type> <name>format_g729d_6k4</name> <init>= <expr><block>{
<expr><operator>.</operator><name>ac_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>parity_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>gc_1st_index_bits</name> <operator>=</operator> <name>GC_1ST_IDX_BITS_6K4</name></expr>,
<expr><operator>.</operator><name>gc_2nd_index_bits</name> <operator>=</operator> <name>GC_2ND_IDX_BITS_6K4</name></expr>,
<expr><operator>.</operator><name>fc_signs_bits</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>fc_indexes_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>,
<expr><operator>.</operator><name>block_size</name> <operator>=</operator> <name>G729D_6K4_BLOCK_SIZE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>g729_prng</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">31821</literal> <operator>*</operator> <name>value</name> <operator>+</operator> <literal type="number">13849</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_decode</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lsfq</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>ma_predictor</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>vq_1st</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>vq_2nd_low</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>vq_2nd_high</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>min_distance</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>quantizer_output</name> <init>= <expr><name><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>quantizer_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cb_lsp_1st</name><index>[<expr><name>vq_1st</name></expr>]</index><index>[<expr><name>i</name></expr> ]</index></name> <operator>+</operator> <name><name>cb_lsp_2nd</name><index>[<expr><name>vq_2nd_low</name></expr> ]</index><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quantizer_output</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>cb_lsp_1st</name><index>[<expr><name>vq_1st</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>cb_lsp_2nd</name><index>[<expr><name>vq_2nd_high</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>quantizer_output</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>quantizer_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>min_distance</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>quantizer_output</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quantizer_output</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>quantizer_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>cb_ma_predictor_sum</name><index>[<expr><name>ma_predictor</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MA_NP</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>past_quantizer_outputs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>cb_ma_predictor</name><index>[<expr><name>ma_predictor</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>lsfq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_acelp_reorder_lsf</name><argument_list>(<argument><expr><name>lsfq</name></expr></argument>, <argument><expr><name>LSFQ_DIFF_MIN</name></expr></argument>, <argument><expr><name>LSFQ_MIN</name></expr></argument>, <argument><expr><name>LSFQ_MAX</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_restore_from_previous</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lsfq</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ma_predictor_prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>quantizer_output</name> <init>= <expr><name><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>lsfq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MA_NP</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <name><name>past_quantizer_outputs</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>cb_ma_predictor</name><index>[<expr><name>ma_predictor_prev</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>quantizer_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <name><name>cb_ma_predictor_sum_inv</name><index>[<expr><name>ma_predictor_prev</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>g729d_get_new_exc</name><parameter_list>(
<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>fc_cur</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstate</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>gain_code</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>fc_new</name><index>[<expr><name>SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_celp_convolve_circ</name><argument_list>(<argument><expr><name>fc_new</name></expr></argument>, <argument><expr><name>fc_cur</name></expr></argument>, <argument><expr><name><name>phase_filter</name><index>[<expr><name>dstate</name></expr>]</index></name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>gain_code</name> <operator>*</operator> <name><name>fc_cur</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>gain_code</name> <operator>*</operator> <name><name>fc_new</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>g729d_onset_decision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>past_onset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>past_gain_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name><name>past_gain_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>past_onset</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>g729d_voice_decision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_voice_decision</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>past_gain_pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>low_gain_pitch_cnt</name></decl>, <decl><type ref="prev"/><name>voice_decision</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">14745</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>voice_decision</name> <operator>=</operator> <name>DECISION_VOICE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">9830</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>voice_decision</name> <operator>=</operator> <name>DECISION_NOISE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>voice_decision</name> <operator>=</operator> <name>DECISION_INTERMEDIATE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>low_gain_pitch_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>past_gain_pitch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">9830</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>low_gain_pitch_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>low_gain_pitch_cnt</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>onset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>voice_decision</name> <operator>=</operator> <name>DECISION_NOISE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onset</name> <operator>&amp;&amp;</operator> <name>voice_decision</name> <operator>&gt;</operator> <name>prev_voice_decision</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>voice_decision</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onset</name> <operator>&amp;&amp;</operator> <name>voice_decision</name> <operator>&lt;</operator> <name>DECISION_VOICE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>voice_decision</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>voice_decision</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scalarproduct_int16_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>order</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>*</operator><name>v1</name><operator>++</operator> <operator>*</operator> <operator>*</operator><name>v2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT32_MAX</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>INT32_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT32_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decoder_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G729Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G729ChannelContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only mono and stereo are supported (requested channels: %d).\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>SUBFRAME_SIZE</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>channel_context</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>G729ChannelContext</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_coeff</name></name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MA_NP</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_output_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">18717</literal> <operator>*</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lsp_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lsp_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsp_init</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>exc_base</name><index>[<expr><name>PITCH_DELAY_MAX</name><operator>+</operator><name>INTERPOL_LEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name> <operator>=</operator> <name>PITCH_DELAY_MIN</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name> <operator>=</operator> <literal type="number">21845</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">14336</literal></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><name>ctx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_audiodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adsp</name><operator>.</operator><name>scalarproduct_int16</name></name> <operator>=</operator> <name>scalarproduct_int16_c</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>G729FormatDescription</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G729Formats</name></type> <name>packet_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G729Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G729ChannelContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ma_predictor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>quantizer_1st</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>quantizer_2nd_lo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>quantizer_2nd_hi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>pitch_delay_int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_3x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>fc</name><index>[<expr><name>SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>synth</name><index>[<expr><name>SUBFRAME_SIZE</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gain_before</name></decl>, <decl><type ref="prev"/><name>gain_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>SUBFRAME_SIZE</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>%</operator> <operator>(</operator><operator>(</operator><name>G729_8K_BLOCK_SIZE</name> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ACELP_KELVIN</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>FORMAT_G729_8K</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <operator>&amp;</operator><name>format_g729_8k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>onset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>voice_decision</name></name> <operator>=</operator> <name>DECISION_VOICE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Packet type: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"G.729 @ 8kbit/s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>buf_size</name> <operator>==</operator> <name>G729D_6K4_BLOCK_SIZE</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_ACELP_KELVIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>FORMAT_G729D_6K4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <operator>&amp;</operator><name>format_g729d_6k4</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Packet type: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"G.729D @ 6.4kbit/s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet size %d is unknown.\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_erasure</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bad_pitch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_periodic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ACELP_KELVIN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>c</name><operator>)</operator> <operator>*</operator> <literal type="number">0x80</literal> <operator>|</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"First byte value %x for channel %d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>format</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_erasure</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>frame_erasure</name> <operator>=</operator> <operator>!</operator><name>frame_erasure</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ma_predictor</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>quantizer_1st</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>VQ_1ST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>quantizer_2nd_lo</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>VQ_2ND_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>quantizer_2nd_hi</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>VQ_2ND_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_erasure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf_restore_from_previous</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsfq</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ma_predictor_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lsf_decode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsfq</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name></name></expr></argument>,
<argument><expr><name>ma_predictor</name></expr></argument>,
<argument><expr><name>quantizer_1st</name></expr></argument>, <argument><expr><name>quantizer_2nd_lo</name></expr></argument>, <argument><expr><name>quantizer_2nd_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ma_predictor_prev</name></name> <operator>=</operator> <name>ma_predictor</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name><index>[<expr><name>MA_NP</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name></name></expr></argument>,
<argument><expr><name>MA_NP</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_quantizer_outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lsf2lsp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsfq</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lp_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int16_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gain_corr_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ac_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pulses_signs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fc_indexes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gc_1st_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gc_2nd_index</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>ac_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>ac_index_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>format</name><operator>-&gt;</operator><name>parity_bit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bad_pitch</name> <operator>=</operator> <call><name>av_parity</name><argument_list>(<argument><expr><name>ac_index</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fc_indexes</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>fc_indexes_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pulses_signs</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>fc_signs_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gc_1st_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>gc_1st_index_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gc_2nd_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>gc_2nd_index_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_erasure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bad_pitch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <call><name>ff_acelp_decode_8bit_to_1st_delay3</name><argument_list>(<argument><expr><name>ac_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_min</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name>PITCH_DELAY_MIN</name></expr></argument>, <argument><expr><name>PITCH_DELAY_MAX</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>packet_type</name> <operator>==</operator> <name>FORMAT_G729D_6K4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <call><name>ff_acelp_decode_4bit_to_2nd_delay3</name><argument_list>(<argument><expr><name>ac_index</name></expr></argument>, <argument><expr><name>pitch_delay_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <call><name>ff_acelp_decode_5_6_bit_to_2nd_delay3</name><argument_list>(<argument><expr><name>ac_index</name></expr></argument>, <argument><expr><name>pitch_delay_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pitch_delay_3x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>PITCH_DELAY_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"pitch_delay_int %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>PITCH_DELAY_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_erasure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name> <operator>=</operator> <call><name>g729_prng</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fc_indexes</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>fc_indexes_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name> <operator>=</operator> <call><name>g729_prng</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pulses_signs</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rand_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>packet_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FORMAT_G729_8K</name></expr>:</case>
<expr_stmt><expr><call><name>ff_acelp_fc_pulse_per_track</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>ff_fc_4pulses_8bits_tracks_13</name></expr></argument>,
<argument><expr><name>ff_fc_4pulses_8bits_track_4</name></expr></argument>,
<argument><expr><name>fc_indexes</name></expr></argument>, <argument><expr><name>pulses_signs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FORMAT_G729D_6K4</name></expr>:</case>
<expr_stmt><expr><call><name>ff_acelp_fc_pulse_per_track</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>ff_fc_2pulses_9bits_track1_gray</name></expr></argument>,
<argument><expr><name>ff_fc_2pulses_9bits_track2_gray</name></expr></argument>,
<argument><expr><name>fc_indexes</name></expr></argument>, <argument><expr><name>pulses_signs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>









<if_stmt><if>if <condition>(<expr><name>SUBFRAME_SIZE</name> <operator>&gt;</operator> <name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name>fc</name> <operator>+</operator> <name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>fc</name> <operator>+</operator> <name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>,
<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SHARP_MIN</name></expr></argument>, <argument><expr><name>SHARP_MAX</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name> <operator>-</operator> <name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_erasure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">29491</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2007</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>gain_corr_factor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>packet_type</name> <operator>==</operator> <name>FORMAT_G729D_6K4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cb_gain_1st_6k4</name><index>[<expr><name>gc_1st_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name><name>cb_gain_2nd_6k4</name><index>[<expr><name>gc_2nd_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain_corr_factor</name> <operator>=</operator> <name><name>cb_gain_1st_6k4</name><index>[<expr><name>gc_1st_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>cb_gain_2nd_6k4</name><index>[<expr><name>gc_2nd_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>gain_corr_factor</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>gain_corr_factor</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gain_corr_factor</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cb_gain_1st_8k</name><index>[<expr><name>gc_1st_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name><name>cb_gain_2nd_8k</name><index>[<expr><name>gc_2nd_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain_corr_factor</name> <operator>=</operator> <name><name>cb_gain_1st_8k</name><index>[<expr><name>gc_1st_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>cb_gain_2nd_8k</name><index>[<expr><name>gc_2nd_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_acelp_decode_gain_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>, <argument><expr><name>gain_corr_factor</name></expr></argument>,
<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>MR_ENERGY</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_energy</name></name></expr></argument>,
<argument><expr><name>ma_prediction_coeff</name></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>









<if_stmt><if>if <condition>(<expr><name>packet_type</name> <operator>==</operator> <name>FORMAT_G729D_6K4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gain_corr_factor</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_acelp_update_past_gain</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_energy</name></name></expr></argument>, <argument><expr><name>gain_corr_factor</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_erasure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_acelp_interpolate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name> <operator>-</operator> <name>pitch_delay_3x</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><name>ff_acelp_interp_filter</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><operator>(</operator><name>pitch_delay_3x</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>was_periodic</name></name> <operator>&amp;&amp;</operator> <name>frame_erasure</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>was_periodic</name></name> <operator>&amp;&amp;</operator> <name>frame_erasure</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>syn_filter_data</name></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>SUBFRAME_SIZE</name> <operator>+</operator> <name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>INTERPOL_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc_base</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>packet_type</name> <operator>==</operator> <name>FORMAT_G729D_6K4</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>exc_new</name><index>[<expr><name>SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>onset</name></name> <operator>=</operator> <call><name>g729d_onset_decision</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>onset</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>voice_decision</name></name> <operator>=</operator> <call><name>g729d_voice_decision</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>onset</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>voice_decision</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g729d_get_new_exc</name><argument_list>(<argument><expr><name>exc_new</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>voice_decision</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_gain_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>exc_new</name></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>syn_filter_data</name></name></expr></argument>, <argument><expr><name>synth</name><operator>+</operator><name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>gain_before</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain_before</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>synth</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>ff_g729_postfilter</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ht_prev_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>is_periodic</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pitch_delay_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>residual</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>res_filter_data</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos_filter_data</name></name></expr></argument>,
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>gain_after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain_after</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>synth</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_coeff</name></name> <operator>=</operator> <call><name>ff_g729_adaptive_gain_control</name><argument_list>(
<argument><expr><name>gain_before</name></expr></argument>,
<argument><expr><name>gain_after</name></expr></argument>,
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_erasure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PITCH_DELAY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_delay_int_prev</name></name> <operator>=</operator> <name><name>pitch_delay_int</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hpf_z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_acelp_high_pass_filter</name><argument_list>(
<argument><expr><name>out_frame</name> <operator>+</operator> <name>i</name><operator>*</operator><name>SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hpf_f</name></name></expr></argument>,
<argument><expr><name>synth</name><operator>+</operator><literal type="number">10</literal></expr></argument>,
<argument><expr><name>SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hpf_z</name></name></expr></argument>, <argument><expr><name>synth</name><operator>+</operator><literal type="number">8</literal><operator>+</operator><name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>was_periodic</name></name> <operator>=</operator> <name>is_periodic</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc_base</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>exc_base</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>SUBFRAME_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>PITCH_DELAY_MAX</name><operator>+</operator><name>INTERPOL_LEN</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>format</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>format</name><operator>-&gt;</operator><name>block_size</name></name> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ACELP_KELVIN</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G729Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_g729_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g729"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.729"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_G729</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G729Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decoder_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_acelp_kelvin_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"acelp.kelvin"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Sipro ACELP.KELVIN"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ACELP_KELVIN</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G729Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decoder_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
