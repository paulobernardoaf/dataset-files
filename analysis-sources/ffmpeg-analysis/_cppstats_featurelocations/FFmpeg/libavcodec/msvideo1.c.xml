<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\msvideo1.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALETTE_COUNT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STREAM_PTR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((stream_ptr + n) &gt; s-&gt;size ) { av_log(s-&gt;avctx, AV_LOG_ERROR, " MS Video-1 warning: stream_ptr out of bounds (%d &gt;= %d)\n", stream_ptr + n, s-&gt;size); return; }</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>Msvideo1Context</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode_8bit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Msvideo1Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>msvideo1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Msvideo1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode_8bit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <name>AVPALETTE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode_8bit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msvideo1_decode_8bit</name><parameter_list>(<parameter><decl><type><name>Msvideo1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_ptr</name></decl>, <decl><type ref="prev"/><name>pixel_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_x</name></decl>, <decl><type ref="prev"/><name>pixel_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_x</name></decl>, <decl><type ref="prev"/><name>block_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>blocks_wide</name></decl>, <decl><type ref="prev"/><name>blocks_high</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_dec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte_a</name></decl>, <decl><type ref="prev"/><name>byte_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>colors</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stream_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_wide</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name> <operator>=</operator> <name>blocks_wide</name> <operator>*</operator> <name>blocks_high</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_inc</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row_dec</name> <operator>=</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>block_y</name> <operator>=</operator> <name>blocks_high</name></expr>;</init> <condition><expr><name>block_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>block_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>block_y</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>block_x</name> <operator>=</operator> <name>blocks_wide</name></expr>;</init> <condition><expr><name>block_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>block_x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>skip_blocks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>block_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_blocks</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>block_ptr</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte_a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>byte_b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>total_blocks</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte_b</name> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x84</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_blocks</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte_b</name> <operator>-</operator> <literal type="number">0x84</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>byte_a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte_b</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>byte_b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte_a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>flags</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>colors</name><index>[<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte_b</name> <operator>&gt;=</operator> <literal type="number">0x90</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>byte_b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte_a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>flags</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>colors</name><index>[<expr><operator>(</operator><operator>(</operator><name>pixel_y</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>pixel_x</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>byte_a</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>block_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msvideo1_decode_16bit</name><parameter_list>(<parameter><decl><type><name>Msvideo1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_ptr</name></decl>, <decl><type ref="prev"/><name>pixel_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_x</name></decl>, <decl><type ref="prev"/><name>pixel_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_x</name></decl>, <decl><type ref="prev"/><name>block_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>blocks_wide</name></decl>, <decl><type ref="prev"/><name>blocks_high</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_dec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte_a</name></decl>, <decl><type ref="prev"/><name>byte_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>colors</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stream_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_wide</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name> <operator>=</operator> <name>blocks_wide</name> <operator>*</operator> <name>blocks_high</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_inc</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row_dec</name> <operator>=</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>block_y</name> <operator>=</operator> <name>blocks_high</name></expr>;</init> <condition><expr><name>block_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>block_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>block_y</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>block_x</name> <operator>=</operator> <name>blocks_wide</name></expr>;</init> <condition><expr><name>block_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>block_x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>skip_blocks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>block_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_blocks</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>block_ptr</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte_a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>byte_b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>total_blocks</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte_b</name> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x84</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_blocks</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte_b</name> <operator>-</operator> <literal type="number">0x84</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>byte_a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte_b</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>byte_b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte_a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_STREAM_PTR</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>flags</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>colors</name><index>[<expr><operator>(</operator><operator>(</operator><name>pixel_y</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>pixel_x</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>flags</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>colors</name><index>[<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte_b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte_a</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pixel_ptr</name> <operator>-=</operator> <name>row_dec</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>block_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blocks</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msvideo1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Msvideo1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_8bit</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Palette size %d is wrong\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_8bit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msvideo1_decode_8bit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msvideo1_decode_16bit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>msvideo1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Msvideo1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msvideo1_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msvideo1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Microsoft Video 1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSVIDEO1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Msvideo1Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>msvideo1_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>msvideo1_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>msvideo1_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
