<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vc1.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>














<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_rowskip</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>plane</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
<expr_stmt><expr><name>plane</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_colskip</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>y</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>y</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
<expr_stmt><expr><name>plane</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>bitplane_decoding</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>raw_flag</name></decl></parameter>, <parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imode</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>invert</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>planep</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>stride</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>invert</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imode</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_vc1_imode_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VC1_IMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>raw_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>imode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IMODE_RAW</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>raw_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<return>return <expr><name>invert</name></expr>;</return>
<case>case <expr><name>IMODE_DIFF2</name></expr>:</case>
<case>case <expr><name>IMODE_NORM2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>height</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>planep</name><operator>++</operator> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>*</operator> <name>width</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_vc1_norm2_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VC1_NORM2_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>planep</name><operator>++</operator> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>planep</name><operator>++</operator> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>IMODE_DIFF6</name></expr>:</case>
<case>case <expr><name>IMODE_NORM6</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>height</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_vc1_norm6_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VC1_NORM6_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"invalid NORM-6 VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_colskip</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <operator>(</operator><name>height</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>%</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_vc1_norm6_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VC1_NORM6_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"invalid NORM-6 VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_colskip</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_rowskip</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>IMODE_ROWSKIP</name></expr>:</case>
<expr_stmt><expr><call><name>decode_rowskip</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IMODE_COLSKIP</name></expr>:</case>
<expr_stmt><expr><call><name>decode_colskip</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>imode</name> <operator>==</operator> <name>IMODE_DIFF2</name> <operator>||</operator> <name>imode</name> <operator>==</operator> <name>IMODE_DIFF6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>planep</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>invert</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>planep</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>planep</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>planep</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>planep</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>planep</name><index>[<expr><name>x</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name>invert</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>planep</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>invert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>planep</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>stride</name> <operator>*</operator> <name>height</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>planep</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name><name>planep</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>imode</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>invert</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>vop_dquant_decoding</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pqdiff</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dquantfrm</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dquantfrm</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dqprofile</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dqprofile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DQPROFILE_SINGLE_EDGE</name></expr>:</case>
<case>case <expr><name>DQPROFILE_DOUBLE_EDGES</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dqsbedge</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DQPROFILE_ALL_MBS</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dqbilevel</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dqbilevel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pqdiff</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pqdiff</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>altpq</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>altpq</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>+</operator> <name>pqdiff</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_sequence_header_adv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><name>int</name></type> <name>ff_vc1_decode_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Header: %0X\n"</literal></expr></argument>, <argument><expr><call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_COMPLEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WMV3 Complex Profile is not fully supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x4</name></name> <operator>=</operator> <name>ff_vc1_adv_progressive_8x4_zz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_4x8</name></name> <operator>=</operator> <name>ff_vc1_adv_progressive_4x8_zz</name></expr>;</expr_stmt>
<return>return <expr><call><name>decode_sequence_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>chromaformat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x4</name></name> <operator>=</operator> <name>ff_wmv2_scantableA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_4x8</name></name> <operator>=</operator> <name>ff_wmv2_scantableB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_y411</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>res_y411</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Old interlaced mode is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>frmrtq_postproc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bitrtq_postproc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_SIMPLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"LOOPFILTER shall not be enabled in Simple Profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_x8</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>multires</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_fasttx</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>res_fasttx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_8x8</name></name> <operator>=</operator> <name>ff_simple_idct_int16_8bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_8x4</name></name> <operator>=</operator> <name>ff_simple_idct84_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_4x8</name></name> <operator>=</operator> <name>ff_simple_idct48_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_4x4</name></name> <operator>=</operator> <name>ff_simple_idct44_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_8x8_dc</name></name> <operator>=</operator> <name>ff_simple_idct_add_int16_8bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_8x4_dc</name></name> <operator>=</operator> <name>ff_simple_idct84_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_4x8_dc</name></name> <operator>=</operator> <name>ff_simple_idct48_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_inv_trans_4x4_dc</name></name> <operator>=</operator> <name>ff_simple_idct44_add</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"FASTUVMC unavailable in Simple Profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Extended MVs unavailable in Simple Profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_transtab</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>res_transtab</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"1 for reserved RES_TRANSTAB is forbidden\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>resync_marker</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rangered</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>rangered</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_SIMPLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"RANGERED should be set to 0 in Simple Profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>max_b_frames</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set dimensions %d %d\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_x8</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sprite feature\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_rtm_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_rtm_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>res_fasttx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Profile %i:\nfrmrtq_postproc=%i, bitrtq_postproc=%i\n"</literal>
<literal type="string">"LoopFilter=%i, MultiRes=%i, FastUVMC=%i, Extended MV=%i\n"</literal>
<literal type="string">"Rangered=%i, VSTransform=%i, Overlap=%i, SyncMarker=%i\n"</literal>
<literal type="string">"DQuant=%i, Quantizer mode=%i, Max B-frames=%i\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>frmrtq_postproc</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>bitrtq_postproc</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>multires</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>rangered</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>resync_marker</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_sequence_header_adv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_rtm_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reserved LEVEL %i\n"</literal></expr></argument>,<argument><expr><name><name>v</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>chromaformat</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>chromaformat</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Only 4:2:0 chroma format supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>frmrtq_postproc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bitrtq_postproc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>postprocflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>max_coded_width</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>max_coded_height</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tfcntrflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Advanced Profile level %i:\nfrmrtq_postproc=%i, bitrtq_postproc=%i\n"</literal>
<literal type="string">"LoopFilter=%i, ChromaFormat=%i, Pulldown=%i, Interlace: %i\n"</literal>
<literal type="string">"TFCTRflag=%i, FINTERPflag=%i\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>frmrtq_postproc</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>bitrtq_postproc</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>chromaformat</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tfcntrflag</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>psf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>psf</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Progressive Segmented Frame mode: not supported (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>max_b_frames</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>ar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Display extended info:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Display dimensions: %ix%i\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>&amp;&amp;</operator> <name>ar</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>ff_vc1_pixel_aspect</name><index>[<expr><name>ar</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ar</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name>w</name></expr>, <expr><name>h</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>max_coded_width</name></name> <operator>||</operator>
<name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>max_coded_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Huge resolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>w</name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>h</name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_set_sar</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Aspect: %i:%i\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>dr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dr</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>dr</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dr</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>ff_vc1_fps_dr</name><index>[<expr><name>dr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>ff_vc1_fps_nr</name><index>[<expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>color_prim</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>transfer_char</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>matrix_coef</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hrd_param_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>hrd_param_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hrd_num_leaky_buckets</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>hrd_num_leaky_buckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vc1_decode_entry_point</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Entry point: %08X\n"</literal></expr></argument>, <argument><expr><call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>broken_link</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>closed_entry</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>panscanflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>refdist_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>hrd_param_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>hrd_num_leaky_buckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>max_coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>max_coded_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set dimensions %d %d\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapy_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Luma scaling is not supported, expect wrong picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_mapy</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapuv_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chroma scaling is not supported, expect wrong picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_mapuv</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Entry point info:\n"</literal>
<literal type="string">"BrokenLink=%i, ClosedEntry=%i, PanscanFlag=%i\n"</literal>
<literal type="string">"RefDist=%i, Postproc=%i, FastUVMC=%i, ExtMV=%i\n"</literal>
<literal type="string">"DQuant=%i, VSTransform=%i, Overlap=%i, Qmode=%i\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>broken_link</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>closed_entry</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>panscanflag</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>refdist_flag</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>loop_filter</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_LUT</name><parameter_list>(<parameter><type><name>lumscale</name></type></parameter>, <parameter><type><name>lumshift</name></type></parameter>, <parameter><type><name>luty</name></type></parameter>, <parameter><type><name>lutuv</name></type></parameter>, <parameter><type><name>chain</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int scale, shift, i; if (!lumscale) { scale = -64; shift = (255 - lumshift * 2) * 64; if (lumshift &gt; 31) shift += 128 &lt;&lt; 6; } else { scale = lumscale + 32; if (lumshift &gt; 31) shift = (lumshift - 64) * 64; else shift = lumshift &lt;&lt; 6; } for (i = 0; i &lt; 256; i++) { int iy = chain ? luty[i] : i; int iu = chain ? lutuv[i] : i; luty[i] = av_clip_uint8((scale * iy + shift + 32) &gt;&gt; 6); lutuv[i] = av_clip_uint8((scale * (iu - 128) + 128*64 + 32) &gt;&gt; 6);} } while(0)</cpp:value></cpp:define>





















<function><type><specifier>static</specifier> <name>void</name></type> <name>rotate_luts</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE</name><parameter_list>(<parameter><type><name>DEF</name></type></parameter>, <parameter><type><name>L</name></type></parameter>, <parameter><type><name>N</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (v-&gt;s.pict_type == AV_PICTURE_TYPE_BI || v-&gt;s.pict_type == AV_PICTURE_TYPE_B) { C = A; } else { DEF; memcpy(&amp;tmp, L , sizeof(tmp)); memcpy(L , N , sizeof(tmp)); memcpy(N , &amp;tmp, sizeof(tmp)); C = N; } } while(0)</cpp:value></cpp:define>











<macro><name>ROTATE</name><argument_list>(<argument>int tmp</argument>, <argument>&amp;v-&gt;last_use_ic</argument>, <argument>&amp;v-&gt;next_use_ic</argument>, <argument>v-&gt;curr_use_ic</argument>, <argument>&amp;v-&gt;aux_use_ic</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ROTATE</name><argument_list>(<argument>uint8_t tmp[<literal type="number">2</literal>][<literal type="number">256</literal>]</argument>, <argument>v-&gt;last_luty</argument>, <argument>v-&gt;next_luty</argument>, <argument>v-&gt;curr_luty</argument>, <argument>v-&gt;aux_luty</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ROTATE</name><argument_list>(<argument>uint8_t tmp[<literal type="number">2</literal>][<literal type="number">256</literal>]</argument>, <argument>v-&gt;last_lutuv</argument>, <argument>v-&gt;next_lutuv</argument>, <argument>v-&gt;curr_lutuv</argument>, <argument>v-&gt;aux_lutuv</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_luty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_lutuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_luty</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_lutuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>curr_use_ic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bfraction</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bfraction_lut_index</name> <init>= <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_vc1_bfraction_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VC1_BFRACTION_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bfraction_lut_index</name> <operator>==</operator> <literal type="number">21</literal> <operator>||</operator> <name>bfraction_lut_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bfraction invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bfraction_lut_index</name></name> <operator>=</operator> <name>bfraction_lut_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bfraction</name></name> <operator>=</operator> <name><name>ff_vc1_bfraction_lut</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>bfraction_lut_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vc1_parse_frame_header</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pqindex</name></decl>, <decl><type ref="prev"/><name>lowquant</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>=</operator> <name>PROGRESSIVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>interpfrm</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MSS2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>respic</name></name> <operator>=</operator>
<name><name>v</name><operator>-&gt;</operator><name>rangered</name></name> <operator>=</operator>
<name><name>v</name><operator>-&gt;</operator><name>multires</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rangeredfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>rangered</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rangeredfrm</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_bfraction</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>bfraction</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>parse_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rnd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rnd</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pqindex</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pqindex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name> <operator>==</operator> <name>QUANT_FRAME_IMPLICIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>=</operator> <name><name>ff_vc1_pquant_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>=</operator> <name><name>ff_vc1_pquant_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pqindex</name></name> <operator>=</operator> <name>pqindex</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pqindex</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QUANT_FRAME_IMPLICIT</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <name>pqindex</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUANT_NON_UNIFORM</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUANT_FRAME_EXPLICIT</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dquantfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_x</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_y</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>multires</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>respic</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>res_x8</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x8_type</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x8_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%c Frame: QP=[%i]%i (+%i/2) %i\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'P'</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>: <expr><literal type="char">'B'</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><name>pqindex</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rangeredfrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>first_pic_header_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rotate_luts</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tt_index</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lowquant</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <name><name>ff_vc1_mv_pmode_table</name><index>[<expr><name>lowquant</name></expr>]</index><index>[<expr><call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>=</operator> <name><name>ff_vc1_mv_pmode_table2</name><index>[<expr><name>lowquant</name></expr>]</index><index>[<expr><call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>last_use_ic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator> <operator>||</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB MV Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Skip plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vop_dquant_decoding</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name><name>ff_vc1_ttfrm_to_tt</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name>TT_8X8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tt_index</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MV_PMODE_1MV</name></expr> </then><else>: <expr><name>MV_PMODE_1MV_HPEL_BILIN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_1MV</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dmb_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Direct Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Skip plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vop_dquant_decoding</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name><name>ff_vc1_ttfrm_to_tt</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name>TT_8X8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>x8_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>c_ac_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y_ac_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vc1_parse_frame_header_adv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pqindex</name></decl>, <decl><type ref="prev"/><name>lowquant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_mode</name></decl>, <decl><type ref="prev"/><name>fcm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>numref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>ILACE_FIELD</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_BI</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_B</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_P</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>parse_common_info</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>field_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcm</name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fcm</name> <operator>==</operator> <name>ILACE_FIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>field_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fcm</name> <operator>=</operator> <name>PROGRESSIVE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>first_pic_header_flag</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>!=</operator> <name>field_mode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>=</operator> <name>field_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>=</operator> <name>fcm</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>( <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal>
<operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>==</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_BI</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_B</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fptype</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_P</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>tfcntrflag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>psf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rptfrm</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tff</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rff</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>panscanflag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Pan-scan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rnd</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>uvsamp</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ff_vc1_bfraction_vlc</name><operator>.</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>refdist_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_BI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>+=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_bfraction</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>frfd</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>bfraction</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>refdist</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>brfd</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>frfd</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>brfd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>brfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>parse_common_info</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>interpfrm</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_bfraction</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>bfraction</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>parse_common_info</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>tff</name></name> <operator>^</operator> <name><name>v</name><operator>-&gt;</operator><name>second_field</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pqindex</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pqindex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name> <operator>==</operator> <name>QUANT_FRAME_IMPLICIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>=</operator> <name><name>ff_vc1_pquant_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>=</operator> <name><name>ff_vc1_pquant_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pqindex</name></name> <operator>=</operator> <name>pqindex</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pqindex</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QUANT_FRAME_IMPLICIT</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <name>pqindex</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUANT_NON_UNIFORM</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUANT_FRAME_EXPLICIT</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dquantfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>postprocflag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>postproc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>parse_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>first_pic_header_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rotate_luts</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>
<case>case <expr><name>AV_PICTURE_TYPE_BI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>fieldtx_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"FIELDTX plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fieldtx_is_raw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>acpred_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>acpred_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ACPRED plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>=</operator> <name>CONDOVER_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>==</operator> <name>CONDOVER_SELECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>overflg_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"CONDOVER plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>numref</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>numref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>reffield</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ref_field_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>reffield</name></name> <operator>^</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dmvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dmvrange</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvswitch</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>last_use_ic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"SKIPMB plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvswitch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_intfr_4mv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_intfr_non4mv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imv_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>twomvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>twomvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_2mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>twomvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvswitch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_x</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_y</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tt_index</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mvmode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mvmode</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lowquant</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <name><name>ff_vc1_mv_pmode_table</name><index>[<expr><name>lowquant</name></expr>]</index><index>[<expr><name>mvmode</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mvmode2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mvmode2</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>=</operator> <name><name>ff_vc1_mv_pmode_table2</name><index>[<expr><name>lowquant</name></expr>]</index><index>[<expr><name>mvmode2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>=</operator> <call><name>decode210</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_luty</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_lutuv</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_luty</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>curr_lutuv</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_field_type</name></name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next_use_ic</name></name> <operator>=</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>curr_use_ic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr></argument> , <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_LUT</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_luty</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>last_lutuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>last_use_ic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator>
<operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB MV Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Skip plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>numref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>numref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imv_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imv_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_2ref_mvdata_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_if_mmv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_if_1mv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vop_dquant_decoding</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name><name>ff_vc1_ttfrm_to_tt</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name>TT_8X8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_bfraction</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>bfraction</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_x</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_x</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_y</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>k_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>tt_index</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mvmode</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"B Fields\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dmvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mvmode</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lowquant</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <name><name>ff_vc1_mv_pmode_table2</name><index>[<expr><name>lowquant</name></expr>]</index><index>[<expr><name>mvmode</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_1MV</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>!=</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>forward_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>fmb_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Forward Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_if_mmv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_if_1mv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imv_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_2ref_mvdata_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>numref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dmvrange</name></name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Intensity compensation set for B picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <name>MV_PMODE_1MV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvswitch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dmb_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Direct Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Skip plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mbmode_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_intfr_non4mv_mbmode_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>imv_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>twomvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>twomvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_2mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>twomvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbp_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MV_PMODE_1MV</name></expr> </then><else>: <expr><name>MV_PMODE_1MV_HPEL_BILIN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>qs_last</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_1MV</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mspel</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dmb_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Direct Type plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>bitplane_decoding</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MB Skip plane encoding: "</literal>
<literal type="string">"Imode: %i, Invert: %i\n"</literal></expr></argument>, <argument><expr><name>status</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mv_table_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vop_dquant_decoding</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name><name>ff_vc1_ttfrm_to_tt</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name> <operator>=</operator> <name>TT_8X8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>c_ac_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y_ac_table_index</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>PROGRESSIVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_x</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>range_y</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dc_table_index</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vop_dquant_decoding</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>vc1_ac_tables</name><index>[<expr><name>AC_MODES</name></expr>]</index><index>[<expr><literal type="number">186</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x011F</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B8</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0172</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x024D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DA</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02DD</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F55</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05B9</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x3EAE</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0029</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01F4</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0233</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01E0</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x012A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DD</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x050A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F29</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0A42</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1272</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1737</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00C4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B4</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07D4</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0345</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02D7</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x07BF</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0938</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0BBB</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x095E</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0069</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0232</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0461</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03EC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0520</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F2A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x3E50</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3E51</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1486</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0094</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x08C0</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F09</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1EF0</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003D</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0053</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01A0</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02D6</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F08</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C1</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04AC</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0344</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F79</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0079</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02D4</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2306</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x023C</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0FAE</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x23DE</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0035</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0175</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07B3</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C5</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0174</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0785</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0048</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01A3</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x049E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00FA</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07D6</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0092</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05CC</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1EF1</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03ED</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x093E</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01E2</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1273</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C4</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1487</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0291</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0293</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0F8A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0509</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0508</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x078D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07BE</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x078C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x04AE</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0BBA</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2307</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B9A</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1736</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0045</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F3</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x047A</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05DC</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x23DF</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0176</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x049D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x23DD</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02EF</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05B8</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DB</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x093F</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07CB</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x095F</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0063</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03C3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x08F6</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0498</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002C</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07B2</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F54</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x008D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07BD</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x008E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1182</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00FB</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x050B</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C0</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0079</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F5F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F56</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0231</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E4</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01A1</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0143</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F7</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x016F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0292</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02E7</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0F8B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0499</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03D8</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x078E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02D5</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F5E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F2B</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x078F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04AD</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3EAF</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x23DC</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005D</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00A2</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AC</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x020A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02E2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0432</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x05C9</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0827</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B54</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04E6</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x105F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x172A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x20B2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2D4E</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39F0</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x4175</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x5A9E</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0042</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B6</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0173</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0395</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x072E</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0B94</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16A4</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x20B3</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2E45</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0049</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x028F</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05CB</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x048A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09DD</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x73E2</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x008A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x051B</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E5F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09C9</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x139C</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0029</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004F</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0412</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x048D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2E41</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0038</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x010E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05A8</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x105C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39F2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x021F</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E7E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39FF</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02E3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04E5</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x2E40</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A1</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05BE</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09C8</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0083</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x013A</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1721</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0276</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39F6</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x008B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04EF</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x5A9B</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0208</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1CFE</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0399</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1CB4</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x039E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x39F3</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05AB</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x73E3</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0737</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x5A9F</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x082D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0E69</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E68</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0433</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B7B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2DF8</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2E56</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x2E57</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39F7</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x51A5</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002A</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00E4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x028E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0735</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1058</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1CFA</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2DF9</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x4174</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0398</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x048B</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x139D</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00AD</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0826</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2D4C</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B7F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x51A4</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x021B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16FD</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001D</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0394</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x28D3</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002B</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05BC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x5A9A</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0247</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0A35</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B7A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0059</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x105E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0026</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09CF</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1CB5</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E5B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00A0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1468</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0170</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0090</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01CE</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x021A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0218</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0168</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x021E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0244</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0736</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0138</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0519</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E5E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x072C</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B55</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09DC</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x20BB</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x048C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1723</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2E44</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16A5</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0518</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x39FE</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0169</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x009A</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0056</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x013E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03A5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0077</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01EF</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x009A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01D6</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x027E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0191</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00EA</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x013B</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x009E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01AC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01E2</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03CA</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x004E</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00F3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01AD</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05F0</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00E1</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03A4</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x009C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x013D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003B</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09BE</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0190</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0137</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x075C</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0071</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00D7</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x09BF</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AF</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04CC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0034</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0265</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x009F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00E0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0327</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x017D</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0EBB</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00F6</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01E4</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00CB</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x099D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00CA</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02FC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x017F</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04CD</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02FD</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04FE</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x013A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0042</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01D3</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04DD</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00E8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004C</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0136</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0039</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0264</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0EBA</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AE</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x099C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04DE</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0043</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x04DC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03CB</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x099E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002A</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x05F1</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09FE</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0033</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09FF</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0098</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x099F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EA</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x013C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0192</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0136</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x006A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03AF</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01E3</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0074</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EB</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02F9</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00ED</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03DD</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0326</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0154</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00BF</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0065</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AAA</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0630</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1597</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03B7</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x2B22</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0BE6</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0037</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0062</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0166</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00CE</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1590</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05F6</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0BE7</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x006D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x031F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05F2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01DF</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AC9</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2B23</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AC3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2B2B</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02F8</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x063D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0182</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x2AA2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0180</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x059C</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0164</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x076D</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x018D</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1581</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AD</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0060</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0C67</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EE</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02CF</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00D9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1580</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0183</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0031</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0066</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0631</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0632</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AC</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x031D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0076</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x003A</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0165</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0C66</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02AB</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05F7</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00F8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AA9</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1550</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0077</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x076C</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0562</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x031C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C8</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01DA</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C9</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002E</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1596</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AC2</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x015B</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x015A</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x007E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AB</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00D8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02B3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0563</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EC</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AC1</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1556</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02FA</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0181</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1557</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x059D</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2AA3</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2B2A</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01DE</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x063C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00CF</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1594</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0051</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0052</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0053</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0056</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0059</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0026</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0027</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001D</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0051</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0052</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0053</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0056</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0019</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0015</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0011</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0026</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0027</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0059</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x005A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0016</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003A</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002E</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007B</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0067</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0047</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0026</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00EF</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00CD</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C1</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00A9</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x004F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F2</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01DD</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0199</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0185</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x015D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x011B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03EF</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03C8</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0331</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0303</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02F1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02A0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0233</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0126</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C0</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x076F</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x076C</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0661</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0604</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0572</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0551</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x046A</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0274</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F27</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F24</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0EDB</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0C8E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0C0B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0C0A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AE3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x08D6</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0490</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0495</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F19</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1DB5</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0029</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0062</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00F3</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AD</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01E5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0179</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x009C</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03B1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02AE</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0127</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x076E</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0570</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0275</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F25</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0EC0</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AA0</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x08D7</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1E4C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0063</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00AF</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x017B</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03B3</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07DD</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0640</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F8D</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0BC1</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0491</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C3</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0151</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02A1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0573</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0EC3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F35</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0065</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01DA</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02AF</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0277</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x08C9</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1781</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0118</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0646</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0AA6</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1780</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00C9</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0321</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F9B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x191E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0048</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07CC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AA1</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0180</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0465</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1905</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x03E2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0EC1</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3C9B</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02F4</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x08C8</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C1</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0928</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x05E1</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x320D</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0EC2</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x6418</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F34</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0155</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0552</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x191F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00FA</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07DC</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1907</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AC</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0249</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x13B1</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F6</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AE2</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01DC</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x04ED</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0184</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1904</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0156</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x09D9</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x03E7</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0929</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03B2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3B68</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02F5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x13B0</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0322</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3B69</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0234</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7935</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07C7</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xC833</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0660</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7934</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x024B</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xC832</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0AA7</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F18</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x007A</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0012</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0070</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x001A</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0047</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01D3</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x03B5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016D</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0162</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x07CE</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0719</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0691</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x02C6</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0156</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F92</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0D2E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0D20</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x059E</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0468</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02A6</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1DA2</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1C60</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1A43</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B1D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x08C0</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x055D</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0077</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00E5</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01D9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0166</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0694</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0152</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x059F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x1F3C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1A4B</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x055E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x007D</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x03E0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0769</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E31</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F26</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x055C</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x001B</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00E2</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03A5</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02C9</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F23</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3B47</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01D8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02D8</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F27</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3494</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0035</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x03E1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x059C</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x38C3</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0165</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1D23</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1638</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0068</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0693</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3A45</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F90</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7CF6</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00E8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x058F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2CEF</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0045</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B3A</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01F1</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x3B46</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01A7</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1676</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0056</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x692A</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x038D</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0xE309</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00AA</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1C611</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02DF</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xB3B9</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02C8</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x38C20</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01B0</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16390</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0F9F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16771</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0ED0</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x71843</literal></expr>, <expr><literal type="number">19</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0D2A</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xF9E8C</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0461</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xF9E8E</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B67</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x055F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x006D</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0E90</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x054E</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0013</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0119</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0B66</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x000B</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0235</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7CF5</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0075</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0D24</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xF9E9</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x002E</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F22</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x054F</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3A44</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00E4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7CF7</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x005E</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x7185</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0037</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2C73</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01DB</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x59DD</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x01C7</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x692B</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01A6</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x58E5</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B4</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1F3D0</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00B0</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xB1C9</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x03E6</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x16770</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x016E</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x3E7A2</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x011B</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xF9E8D</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x00D9</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xF9E8F</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x00A8</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x2C723</literal></expr>, <expr><literal type="number">19</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0749</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xE3084</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0696</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x58E45</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x02DE</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0xB1C88</literal></expr>, <expr><literal type="number">21</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0231</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1C610A</literal></expr>, <expr><literal type="number">21</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x01B1</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x71842D</literal></expr>, <expr><literal type="number">23</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0D2B</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x38C217</literal></expr>, <expr><literal type="number">22</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0D2F</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x163913</literal></expr>, <expr><literal type="number">22</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x05B2</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x163912</literal></expr>, <expr><literal type="number">22</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x0469</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x71842C</literal></expr>, <expr><literal type="number">23</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x1A42</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0x08C1</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">0x0073</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vlc_offs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">520</literal></expr>, <expr><literal type="number">552</literal></expr>, <expr><literal type="number">616</literal></expr>, <expr><literal type="number">1128</literal></expr>, <expr><literal type="number">1160</literal></expr>, <expr><literal type="number">1224</literal></expr>, <expr><literal type="number">1740</literal></expr>, <expr><literal type="number">1772</literal></expr>, <expr><literal type="number">1836</literal></expr>, <expr><literal type="number">1900</literal></expr>, <expr><literal type="number">2436</literal></expr>,
<expr><literal type="number">2986</literal></expr>, <expr><literal type="number">3050</literal></expr>, <expr><literal type="number">3610</literal></expr>, <expr><literal type="number">4154</literal></expr>, <expr><literal type="number">4218</literal></expr>, <expr><literal type="number">4746</literal></expr>, <expr><literal type="number">5326</literal></expr>, <expr><literal type="number">5390</literal></expr>, <expr><literal type="number">5902</literal></expr>, <expr><literal type="number">6554</literal></expr>, <expr><literal type="number">7658</literal></expr>, <expr><literal type="number">8342</literal></expr>,
<expr><literal type="number">9304</literal></expr>, <expr><literal type="number">9988</literal></expr>, <expr><literal type="number">10630</literal></expr>, <expr><literal type="number">11234</literal></expr>, <expr><literal type="number">12174</literal></expr>, <expr><literal type="number">13006</literal></expr>, <expr><literal type="number">13560</literal></expr>, <expr><literal type="number">14232</literal></expr>, <expr><literal type="number">14786</literal></expr>, <expr><literal type="number">15432</literal></expr>, <expr><literal type="number">16350</literal></expr>, <expr><literal type="number">17522</literal></expr>,
<expr><literal type="number">20372</literal></expr>, <expr><literal type="number">21818</literal></expr>, <expr><literal type="number">22330</literal></expr>, <expr><literal type="number">22394</literal></expr>, <expr><literal type="number">23166</literal></expr>, <expr><literal type="number">23678</literal></expr>, <expr><literal type="number">23742</literal></expr>, <expr><literal type="number">24820</literal></expr>, <expr><literal type="number">25332</literal></expr>, <expr><literal type="number">25396</literal></expr>, <expr><literal type="number">26460</literal></expr>, <expr><literal type="number">26980</literal></expr>,
<expr><literal type="number">27048</literal></expr>, <expr><literal type="number">27592</literal></expr>, <expr><literal type="number">27600</literal></expr>, <expr><literal type="number">27608</literal></expr>, <expr><literal type="number">27616</literal></expr>, <expr><literal type="number">27624</literal></expr>, <expr><literal type="number">28224</literal></expr>, <expr><literal type="number">28258</literal></expr>, <expr><literal type="number">28290</literal></expr>, <expr><literal type="number">28802</literal></expr>, <expr><literal type="number">28834</literal></expr>, <expr><literal type="number">28866</literal></expr>,
<expr><literal type="number">29378</literal></expr>, <expr><literal type="number">29412</literal></expr>, <expr><literal type="number">29444</literal></expr>, <expr><literal type="number">29960</literal></expr>, <expr><literal type="number">29994</literal></expr>, <expr><literal type="number">30026</literal></expr>, <expr><literal type="number">30538</literal></expr>, <expr><literal type="number">30572</literal></expr>, <expr><literal type="number">30604</literal></expr>, <expr><literal type="number">31120</literal></expr>, <expr><literal type="number">31154</literal></expr>, <expr><literal type="number">31186</literal></expr>,
<expr><literal type="number">31714</literal></expr>, <expr><literal type="number">31746</literal></expr>, <expr><literal type="number">31778</literal></expr>, <expr><literal type="number">32306</literal></expr>, <expr><literal type="number">32340</literal></expr>, <expr><literal type="number">32372</literal></expr>
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vc1_init_common</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>vlc_table</name><index>[<expr><literal type="number">32372</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>hrd_rate</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>hrd_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_vc1_bfraction_vlc</name></expr></argument>, <argument><expr><name>VC1_BFRACTION_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>,
<argument><expr><name>ff_vc1_bfraction_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ff_vc1_bfraction_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VC1_BFRACTION_VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_vc1_norm2_vlc</name></expr></argument>, <argument><expr><name>VC1_NORM2_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>ff_vc1_norm2_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ff_vc1_norm2_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VC1_NORM2_VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_vc1_norm6_vlc</name></expr></argument>, <argument><expr><name>VC1_NORM6_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><name>ff_vc1_norm6_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ff_vc1_norm6_codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">556</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_vc1_imode_vlc</name></expr></argument>, <argument><expr><name>VC1_IMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,
<argument><expr><name>ff_vc1_imode_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ff_vc1_imode_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VC1_IMODE_VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ff_vc1_ttmb_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_ttmb_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_ttmb_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_TTMB_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_ttmb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_ttmb_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_ttblk_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_ttblk_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_ttblk_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_TTBLK_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_ttblk_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_ttblk_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_subblkpat_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_subblkpat_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_subblkpat_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_SUBBLKPAT_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_subblkpat_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_subblkpat_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_4mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_4MV_BLOCK_PATTERN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_4mv_block_pattern_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_4mv_block_pattern_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_cbpcy_p_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_CBPCY_P_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_cbpcy_p_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_cbpcy_p_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_mv_diff_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_mv_diff_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_mv_diff_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_MV_DIFF_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">73</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_mv_diff_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_mv_diff_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ff_vc1_ac_coeff_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">21</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_ac_coeff_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">22</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_ac_coeff_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AC_VLC_BITS</name></expr></argument>, <argument><expr><name><name>ff_vc1_ac_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>vc1_ac_tables</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>vc1_ac_tables</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_vc1_2ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">22</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_2ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">23</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_2ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_2REF_MVDATA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">126</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_2ref_mvdata_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_2ref_mvdata_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ff_vc1_intfr_4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">37</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_intfr_4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">38</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_intfr_4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_INTFR_4MV_MBMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_intfr_4mv_mbmode_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_intfr_4mv_mbmode_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_vc1_intfr_non4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">38</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_intfr_non4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">39</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">38</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_intfr_non4mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_INTFR_NON4MV_MBMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_intfr_non4mv_mbmode_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_intfr_non4mv_mbmode_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">39</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">39</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_1ref_mvdata_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_1REF_MVDATA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_1ref_mvdata_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_1ref_mvdata_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ff_vc1_2mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_2mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_2mv_block_pattern_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_2MV_BLOCK_PATTERN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_2mv_block_pattern_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_2mv_block_pattern_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">53</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">54</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">53</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_icbpcy_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_ICBPCY_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_icbpcy_p_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_icbpcy_p_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_vc1_if_mmv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">54</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_if_mmv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">55</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">54</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_if_mmv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_IF_MMV_MBMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_if_mmv_mbmode_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_if_mmv_mbmode_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_if_1mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_table</name><index>[<expr><name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">55</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff_vc1_if_1mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">56</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">55</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ff_vc1_if_1mv_mbmode_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VC1_IF_1MV_MBMODE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_if_1mv_mbmode_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ff_vc1_if_1mv_mbmode_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_vc1dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
