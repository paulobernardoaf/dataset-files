<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\qpeldsp.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diracdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpel_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pel_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpel_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_MC</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>RND</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##mpeg4_qpel8_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, int h) { const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; int i; for (i = 0; i &lt; h; i++) { OP(dst[0], (src[0] + src[1]) * 20 - (src[0] + src[2]) * 6 + (src[1] + src[3]) * 3 - (src[2] + src[4])); OP(dst[1], (src[1] + src[2]) * 20 - (src[0] + src[3]) * 6 + (src[0] + src[4]) * 3 - (src[1] + src[5])); OP(dst[2], (src[2] + src[3]) * 20 - (src[1] + src[4]) * 6 + (src[0] + src[5]) * 3 - (src[0] + src[6])); OP(dst[3], (src[3] + src[4]) * 20 - (src[2] + src[5]) * 6 + (src[1] + src[6]) * 3 - (src[0] + src[7])); OP(dst[4], (src[4] + src[5]) * 20 - (src[3] + src[6]) * 6 + (src[2] + src[7]) * 3 - (src[1] + src[8])); OP(dst[5], (src[5] + src[6]) * 20 - (src[4] + src[7]) * 6 + (src[3] + src[8]) * 3 - (src[2] + src[8])); OP(dst[6], (src[6] + src[7]) * 20 - (src[5] + src[8]) * 6 + (src[4] + src[8]) * 3 - (src[3] + src[7])); OP(dst[7], (src[7] + src[8]) * 20 - (src[6] + src[8]) * 6 + (src[5] + src[7]) * 3 - (src[4] + src[6])); dst += dstStride; src += srcStride; } } static void OPNAME ##mpeg4_qpel8_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride) { const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; const int w = 8; int i; for (i = 0; i &lt; w; i++) { const int src0 = src[0 * srcStride]; const int src1 = src[1 * srcStride]; const int src2 = src[2 * srcStride]; const int src3 = src[3 * srcStride]; const int src4 = src[4 * srcStride]; const int src5 = src[5 * srcStride]; const int src6 = src[6 * srcStride]; const int src7 = src[7 * srcStride]; const int src8 = src[8 * srcStride]; OP(dst[0 * dstStride], (src0 + src1) * 20 - (src0 + src2) * 6 + (src1 + src3) * 3 - (src2 + src4)); OP(dst[1 * dstStride], (src1 + src2) * 20 - (src0 + src3) * 6 + (src0 + src4) * 3 - (src1 + src5)); OP(dst[2 * dstStride], (src2 + src3) * 20 - (src1 + src4) * 6 + (src0 + src5) * 3 - (src0 + src6)); OP(dst[3 * dstStride], (src3 + src4) * 20 - (src2 + src5) * 6 + (src1 + src6) * 3 - (src0 + src7)); OP(dst[4 * dstStride], (src4 + src5) * 20 - (src3 + src6) * 6 + (src2 + src7) * 3 - (src1 + src8)); OP(dst[5 * dstStride], (src5 + src6) * 20 - (src4 + src7) * 6 + (src3 + src8) * 3 - (src2 + src8)); OP(dst[6 * dstStride], (src6 + src7) * 20 - (src5 + src8) * 6 + (src4 + src8) * 3 - (src3 + src7)); OP(dst[7 * dstStride], (src7 + src8) * 20 - (src6 + src8) * 6 + (src5 + src7) * 3 - (src4 + src6)); dst++; src++; } } static void OPNAME ##mpeg4_qpel16_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, int h) { const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; int i; for (i = 0; i &lt; h; i++) { OP(dst[0], (src[0] + src[1]) * 20 - (src[0] + src[2]) * 6 + (src[1] + src[3]) * 3 - (src[2] + src[4])); OP(dst[1], (src[1] + src[2]) * 20 - (src[0] + src[3]) * 6 + (src[0] + src[4]) * 3 - (src[1] + src[5])); OP(dst[2], (src[2] + src[3]) * 20 - (src[1] + src[4]) * 6 + (src[0] + src[5]) * 3 - (src[0] + src[6])); OP(dst[3], (src[3] + src[4]) * 20 - (src[2] + src[5]) * 6 + (src[1] + src[6]) * 3 - (src[0] + src[7])); OP(dst[4], (src[4] + src[5]) * 20 - (src[3] + src[6]) * 6 + (src[2] + src[7]) * 3 - (src[1] + src[8])); OP(dst[5], (src[5] + src[6]) * 20 - (src[4] + src[7]) * 6 + (src[3] + src[8]) * 3 - (src[2] + src[9])); OP(dst[6], (src[6] + src[7]) * 20 - (src[5] + src[8]) * 6 + (src[4] + src[9]) * 3 - (src[3] + src[10])); OP(dst[7], (src[7] + src[8]) * 20 - (src[6] + src[9]) * 6 + (src[5] + src[10]) * 3 - (src[4] + src[11])); OP(dst[8], (src[8] + src[9]) * 20 - (src[7] + src[10]) * 6 + (src[6] + src[11]) * 3 - (src[5] + src[12])); OP(dst[9], (src[9] + src[10]) * 20 - (src[8] + src[11]) * 6 + (src[7] + src[12]) * 3 - (src[6] + src[13])); OP(dst[10], (src[10] + src[11]) * 20 - (src[9] + src[12]) * 6 + (src[8] + src[13]) * 3 - (src[7] + src[14])); OP(dst[11], (src[11] + src[12]) * 20 - (src[10] + src[13]) * 6 + (src[9] + src[14]) * 3 - (src[8] + src[15])); OP(dst[12], (src[12] + src[13]) * 20 - (src[11] + src[14]) * 6 + (src[10] + src[15]) * 3 - (src[9] + src[16])); OP(dst[13], (src[13] + src[14]) * 20 - (src[12] + src[15]) * 6 + (src[11] + src[16]) * 3 - (src[10] + src[16])); OP(dst[14], (src[14] + src[15]) * 20 - (src[13] + src[16]) * 6 + (src[12] + src[16]) * 3 - (src[11] + src[15])); OP(dst[15], (src[15] + src[16]) * 20 - (src[14] + src[16]) * 6 + (src[13] + src[15]) * 3 - (src[12] + src[14])); dst += dstStride; src += srcStride; } } static void OPNAME ##mpeg4_qpel16_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride) { const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; const int w = 16; int i; for (i = 0; i &lt; w; i++) { const int src0 = src[0 * srcStride]; const int src1 = src[1 * srcStride]; const int src2 = src[2 * srcStride]; const int src3 = src[3 * srcStride]; const int src4 = src[4 * srcStride]; const int src5 = src[5 * srcStride]; const int src6 = src[6 * srcStride]; const int src7 = src[7 * srcStride]; const int src8 = src[8 * srcStride]; const int src9 = src[9 * srcStride]; const int src10 = src[10 * srcStride]; const int src11 = src[11 * srcStride]; const int src12 = src[12 * srcStride]; const int src13 = src[13 * srcStride]; const int src14 = src[14 * srcStride]; const int src15 = src[15 * srcStride]; const int src16 = src[16 * srcStride]; OP(dst[0 * dstStride], (src0 + src1) * 20 - (src0 + src2) * 6 + (src1 + src3) * 3 - (src2 + src4)); OP(dst[1 * dstStride], (src1 + src2) * 20 - (src0 + src3) * 6 + (src0 + src4) * 3 - (src1 + src5)); OP(dst[2 * dstStride], (src2 + src3) * 20 - (src1 + src4) * 6 + (src0 + src5) * 3 - (src0 + src6)); OP(dst[3 * dstStride], (src3 + src4) * 20 - (src2 + src5) * 6 + (src1 + src6) * 3 - (src0 + src7)); OP(dst[4 * dstStride], (src4 + src5) * 20 - (src3 + src6) * 6 + (src2 + src7) * 3 - (src1 + src8)); OP(dst[5 * dstStride], (src5 + src6) * 20 - (src4 + src7) * 6 + (src3 + src8) * 3 - (src2 + src9)); OP(dst[6 * dstStride], (src6 + src7) * 20 - (src5 + src8) * 6 + (src4 + src9) * 3 - (src3 + src10)); OP(dst[7 * dstStride], (src7 + src8) * 20 - (src6 + src9) * 6 + (src5 + src10) * 3 - (src4 + src11)); OP(dst[8 * dstStride], (src8 + src9) * 20 - (src7 + src10) * 6 + (src6 + src11) * 3 - (src5 + src12)); OP(dst[9 * dstStride], (src9 + src10) * 20 - (src8 + src11) * 6 + (src7 + src12) * 3 - (src6 + src13)); OP(dst[10 * dstStride], (src10 + src11) * 20 - (src9 + src12) * 6 + (src8 + src13) * 3 - (src7 + src14)); OP(dst[11 * dstStride], (src11 + src12) * 20 - (src10 + src13) * 6 + (src9 + src14) * 3 - (src8 + src15)); OP(dst[12 * dstStride], (src12 + src13) * 20 - (src11 + src14) * 6 + (src10 + src15) * 3 - (src9 + src16)); OP(dst[13 * dstStride], (src13 + src14) * 20 - (src12 + src15) * 6 + (src11 + src16) * 3 - (src10 + src16)); OP(dst[14 * dstStride], (src14 + src15) * 20 - (src13 + src16) * 6 + (src12 + src16) * 3 - (src11 + src15)); OP(dst[15 * dstStride], (src15 + src16) * 20 - (src14 + src16) * 6 + (src13 + src15) * 3 - (src12 + src14)); dst++; src++; } } static void OPNAME ##qpel8_mc10_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t half[64]; put ##RND ##mpeg4_qpel8_h_lowpass(half, src, 8, stride, 8); OPNAME ##pixels8_l2_8(dst, src, half, stride, stride, 8, 8); } static void OPNAME ##qpel8_mc20_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { OPNAME ##mpeg4_qpel8_h_lowpass(dst, src, stride, stride, 8); } static void OPNAME ##qpel8_mc30_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t half[64]; put ##RND ##mpeg4_qpel8_h_lowpass(half, src, 8, stride, 8); OPNAME ##pixels8_l2_8(dst, src + 1, half, stride, stride, 8, 8); } static void OPNAME ##qpel8_mc01_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t half[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_v_lowpass(half, full, 8, 16); OPNAME ##pixels8_l2_8(dst, full, half, stride, 16, 8, 8); } static void OPNAME ##qpel8_mc02_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; copy_block9(full, src, 16, stride, 9); OPNAME ##mpeg4_qpel8_v_lowpass(dst, full, stride, 16); } static void OPNAME ##qpel8_mc03_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t half[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_v_lowpass(half, full, 8, 16); OPNAME ##pixels8_l2_8(dst, full + 16, half, stride, 16, 8, 8); } void ff_ ##OPNAME ##qpel8_mc11_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l4_8(dst, full, halfH, halfV, halfHV, stride, 16, 8, 8, 8, 8); } static void OPNAME ##qpel8_mc11_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full, 8, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH, halfHV, stride, 8, 8, 8); } void ff_ ##OPNAME ##qpel8_mc31_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full + 1, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l4_8(dst, full + 1, halfH, halfV, halfHV, stride, 16, 8, 8, 8, 8); } static void OPNAME ##qpel8_mc31_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full + 1, 8, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH, halfHV, stride, 8, 8, 8); } void ff_ ##OPNAME ##qpel8_mc13_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l4_8(dst, full + 16, halfH + 8, halfV, halfHV, stride, 16, 8, 8, 8, 8); } static void OPNAME ##qpel8_mc13_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full, 8, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH + 8, halfHV, stride, 8, 8, 8); } void ff_ ##OPNAME ##qpel8_mc33_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full + 1, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l4_8(dst, full + 17, halfH + 8, halfV, halfHV, stride, 16, 8, 8, 8, 8); } static void OPNAME ##qpel8_mc33_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full + 1, 8, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH + 8, halfHV, stride, 8, 8, 8); } static void OPNAME ##qpel8_mc21_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[72]; uint8_t halfHV[64]; put ##RND ##mpeg4_qpel8_h_lowpass(halfH, src, 8, stride, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH, halfHV, stride, 8, 8, 8); } static void OPNAME ##qpel8_mc23_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[72]; uint8_t halfHV[64]; put ##RND ##mpeg4_qpel8_h_lowpass(halfH, src, 8, stride, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfH + 8, halfHV, stride, 8, 8, 8); } void ff_ ##OPNAME ##qpel8_mc12_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8); } static void OPNAME ##qpel8_mc12_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full, 8, 8, 16, 9); OPNAME ##mpeg4_qpel8_v_lowpass(dst, halfH, stride, 8); } void ff_ ##OPNAME ##qpel8_mc32_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; uint8_t halfV[64]; uint8_t halfHV[64]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##mpeg4_qpel8_v_lowpass(halfV, full + 1, 8, 16); put ##RND ##mpeg4_qpel8_v_lowpass(halfHV, halfH, 8, 8); OPNAME ##pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8); } static void OPNAME ##qpel8_mc32_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[16 * 9]; uint8_t halfH[72]; copy_block9(full, src, 16, stride, 9); put ##RND ##mpeg4_qpel8_h_lowpass(halfH, full, 8, 16, 9); put ##RND ##pixels8_l2_8(halfH, halfH, full + 1, 8, 8, 16, 9); OPNAME ##mpeg4_qpel8_v_lowpass(dst, halfH, stride, 8); } static void OPNAME ##qpel8_mc22_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[72]; put ##RND ##mpeg4_qpel8_h_lowpass(halfH, src, 8, stride, 9); OPNAME ##mpeg4_qpel8_v_lowpass(dst, halfH, stride, 8); } static void OPNAME ##qpel16_mc10_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t half[256]; put ##RND ##mpeg4_qpel16_h_lowpass(half, src, 16, stride, 16); OPNAME ##pixels16_l2_8(dst, src, half, stride, stride, 16, 16); } static void OPNAME ##qpel16_mc20_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { OPNAME ##mpeg4_qpel16_h_lowpass(dst, src, stride, stride, 16); } static void OPNAME ##qpel16_mc30_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t half[256]; put ##RND ##mpeg4_qpel16_h_lowpass(half, src, 16, stride, 16); OPNAME ##pixels16_l2_8(dst, src + 1, half, stride, stride, 16, 16); } static void OPNAME ##qpel16_mc01_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t half[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_v_lowpass(half, full, 16, 24); OPNAME ##pixels16_l2_8(dst, full, half, stride, 24, 16, 16); } static void OPNAME ##qpel16_mc02_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; copy_block17(full, src, 24, stride, 17); OPNAME ##mpeg4_qpel16_v_lowpass(dst, full, stride, 24); } static void OPNAME ##qpel16_mc03_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t half[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_v_lowpass(half, full, 16, 24); OPNAME ##pixels16_l2_8(dst, full + 24, half, stride, 24, 16, 16); } void ff_ ##OPNAME ##qpel16_mc11_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l4_8(dst, full, halfH, halfV, halfHV, stride, 24, 16, 16, 16, 16); } static void OPNAME ##qpel16_mc11_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full, 16, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH, halfHV, stride, 16, 16, 16); } void ff_ ##OPNAME ##qpel16_mc31_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full + 1, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l4_8(dst, full + 1, halfH, halfV, halfHV, stride, 24, 16, 16, 16, 16); } static void OPNAME ##qpel16_mc31_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full + 1, 16, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH, halfHV, stride, 16, 16, 16); } void ff_ ##OPNAME ##qpel16_mc13_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l4_8(dst, full + 24, halfH + 16, halfV, halfHV, stride, 24, 16, 16, 16, 16); } static void OPNAME ##qpel16_mc13_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full, 16, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH + 16, halfHV, stride, 16, 16, 16); } void ff_ ##OPNAME ##qpel16_mc33_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full + 1, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l4_8(dst, full + 25, halfH + 16, halfV, halfHV, stride, 24, 16, 16, 16, 16); } static void OPNAME ##qpel16_mc33_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full + 1, 16, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH + 16, halfHV, stride, 16, 16, 16); } static void OPNAME ##qpel16_mc21_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[272]; uint8_t halfHV[256]; put ##RND ##mpeg4_qpel16_h_lowpass(halfH, src, 16, stride, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH, halfHV, stride, 16, 16, 16); } static void OPNAME ##qpel16_mc23_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[272]; uint8_t halfHV[256]; put ##RND ##mpeg4_qpel16_h_lowpass(halfH, src, 16, stride, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfH + 16, halfHV, stride, 16, 16, 16); } void ff_ ##OPNAME ##qpel16_mc12_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfV, halfHV, stride, 16, 16, 16); } static void OPNAME ##qpel16_mc12_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full, 16, 16, 24, 17); OPNAME ##mpeg4_qpel16_v_lowpass(dst, halfH, stride, 16); } void ff_ ##OPNAME ##qpel16_mc32_old_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; uint8_t halfV[256]; uint8_t halfHV[256]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##mpeg4_qpel16_v_lowpass(halfV, full + 1, 16, 24); put ##RND ##mpeg4_qpel16_v_lowpass(halfHV, halfH, 16, 16); OPNAME ##pixels16_l2_8(dst, halfV, halfHV, stride, 16, 16, 16); } static void OPNAME ##qpel16_mc32_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t full[24 * 17]; uint8_t halfH[272]; copy_block17(full, src, 24, stride, 17); put ##RND ##mpeg4_qpel16_h_lowpass(halfH, full, 16, 24, 17); put ##RND ##pixels16_l2_8(halfH, halfH, full + 1, 16, 16, 24, 17); OPNAME ##mpeg4_qpel16_v_lowpass(dst, halfH, stride, 16); } static void OPNAME ##qpel16_mc22_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint8_t halfH[272]; put ##RND ##mpeg4_qpel16_h_lowpass(halfH, src, 16, stride, 17); OPNAME ##mpeg4_qpel16_v_lowpass(dst, halfH, stride, 16); }</cpp:value></cpp:define>








































































































































































































































































































































































































































































































































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a) + cm[((b) + 16) &gt;&gt; 5] + 1) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b) + 16) &gt;&gt; 5]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put_no_rnd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b) + 15) &gt;&gt; 5]</cpp:value></cpp:define>

<macro><name>QPEL_MC</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>put_</argument>, <argument>_</argument>, <argument>op_put</argument>)</argument_list></macro>
<macro><name>QPEL_MC</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>put_no_rnd_</argument>, <argument>_no_rnd_</argument>, <argument>op_put_no_rnd</argument>)</argument_list></macro>
<macro><name>QPEL_MC</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>avg_</argument>, <argument>_</argument>, <argument>op_avg</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put_no_rnd</name></cpp:undef>

<function><type><name>void</name></type> <name>ff_put_pixels8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels8_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_pixels8_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels16_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_pixels16_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_qpel8_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels8x8_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_qpel8_mc00_c</name></cpp:macro> <cpp:value>ff_avg_pixels8x8_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_qpel16_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels16x16_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_qpel16_mc00_c</name></cpp:macro> <cpp:value>ff_avg_pixels16x16_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_no_rnd_qpel8_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels8x8_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_no_rnd_qpel16_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels16x16_c</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_put_pixels8_l2_8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels8_l2_8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src_stride1</name></expr></argument>, <argument><expr><name>src_stride2</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DIRAC_DECODER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>void ff_ ##OPNAME ##_dirac_pixels8_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels8_8_c(dst, src[0], stride, h);}void ff_ ##OPNAME ##_dirac_pixels16_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_8_c(dst, src[0], stride, h);}void ff_ ##OPNAME ##_dirac_pixels32_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_8_c(dst , src[0] , stride, h);OPNAME ##_pixels16_8_c(dst+16, src[0]+16, stride, h);}void ff_ ##OPNAME ##_dirac_pixels8_l2_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels8_l2_8(dst, src[0], src[1], stride, stride, stride, h);}void ff_ ##OPNAME ##_dirac_pixels16_l2_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_l2_8(dst, src[0], src[1], stride, stride, stride, h);}void ff_ ##OPNAME ##_dirac_pixels32_l2_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_l2_8(dst , src[0] , src[1] , stride, stride, stride, h);OPNAME ##_pixels16_l2_8(dst+16, src[0]+16, src[1]+16, stride, stride, stride, h);}void ff_ ##OPNAME ##_dirac_pixels8_l4_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels8_l4_8(dst, src[0], src[1], src[2], src[3], stride, stride, stride, stride, stride, h);}void ff_ ##OPNAME ##_dirac_pixels16_l4_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_l4_8(dst, src[0], src[1], src[2], src[3], stride, stride, stride, stride, stride, h);}void ff_ ##OPNAME ##_dirac_pixels32_l4_c(uint8_t *dst, const uint8_t *src[5], int stride, int h){OPNAME ##_pixels16_l4_8(dst , src[0] , src[1] , src[2] , src[3] , stride, stride, stride, stride, stride, h);OPNAME ##_pixels16_l4_8(dst+16, src[0]+16, src[1]+16, src[2]+16, src[3]+16, stride, stride, stride, stride, stride, h);}</cpp:value></cpp:define>







































<macro><name>DIRAC_MC</name><argument_list>(<argument>put</argument>)</argument_list></macro>
<macro><name>DIRAC_MC</name><argument_list>(<argument>avg</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_qpeldsp_init</name><parameter_list>(<parameter><decl><type><name>QpelDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dspfunc</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_pixels_tab[IDX][0] = PFX ##NUM ##_mc00_c; c-&gt;PFX ##_pixels_tab[IDX][1] = PFX ##NUM ##_mc10_c; c-&gt;PFX ##_pixels_tab[IDX][2] = PFX ##NUM ##_mc20_c; c-&gt;PFX ##_pixels_tab[IDX][3] = PFX ##NUM ##_mc30_c; c-&gt;PFX ##_pixels_tab[IDX][4] = PFX ##NUM ##_mc01_c; c-&gt;PFX ##_pixels_tab[IDX][5] = PFX ##NUM ##_mc11_c; c-&gt;PFX ##_pixels_tab[IDX][6] = PFX ##NUM ##_mc21_c; c-&gt;PFX ##_pixels_tab[IDX][7] = PFX ##NUM ##_mc31_c; c-&gt;PFX ##_pixels_tab[IDX][8] = PFX ##NUM ##_mc02_c; c-&gt;PFX ##_pixels_tab[IDX][9] = PFX ##NUM ##_mc12_c; c-&gt;PFX ##_pixels_tab[IDX][10] = PFX ##NUM ##_mc22_c; c-&gt;PFX ##_pixels_tab[IDX][11] = PFX ##NUM ##_mc32_c; c-&gt;PFX ##_pixels_tab[IDX][12] = PFX ##NUM ##_mc03_c; c-&gt;PFX ##_pixels_tab[IDX][13] = PFX ##NUM ##_mc13_c; c-&gt;PFX ##_pixels_tab[IDX][14] = PFX ##NUM ##_mc23_c; c-&gt;PFX ##_pixels_tab[IDX][15] = PFX ##NUM ##_mc33_c</cpp:value></cpp:define>

















<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_no_rnd_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_no_rnd_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>avg_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>avg_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_qpeldsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_qpeldsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
