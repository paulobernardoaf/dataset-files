<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\error_resilience.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mv_strides</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier></type><name>mv_step</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier></type><name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mv_step</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mv_step</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>put_dc</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>, <decl><type ref="prev"/><name>dcu</name></decl>, <decl><type ref="prev"/><name>dcv</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dc</name> <operator>&gt;</operator> <literal type="number">2040</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <literal type="number">2040</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest_y</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>dc</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>dcu</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcv</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dcu</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dcu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dcu</name> <operator>&gt;</operator> <literal type="number">2040</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dcu</name> <operator>=</operator> <literal type="number">2040</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dcv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dcv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dcv</name> <operator>&gt;</operator> <literal type="number">2040</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dcv</name> <operator>=</operator> <literal type="number">2040</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_cr</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest_cb</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>dcu</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest_cr</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>dcv</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter181</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_dc</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>-</operator><name>prev_dc</name> <operator>+</operator>
<name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator>
<name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><call><name>av_clip</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>INT_MIN</name><operator>/</operator><literal type="number">10923</literal></expr></argument>, <argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">10923</literal> <operator>-</operator> <literal type="number">32768</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10923</literal> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_dc</name> <init>= <expr><name><name>data</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>-</operator><name>prev_dc</name> <operator>+</operator>
<name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator>
<name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><call><name>av_clip</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>INT_MIN</name><operator>/</operator><literal type="number">10923</literal></expr></argument>, <argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">10923</literal> <operator>-</operator> <literal type="number">32768</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10923</literal> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>guess_dc</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b_x</name></decl>, <decl><type ref="prev"/><name>b_y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>col</name></expr></argument> )</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name><operator>*</operator><sizeof>sizeof<argument_list>( <argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uint32_t</name> <argument_list>(<argument><expr><operator>*</operator><name>dist</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>col</name> <operator>||</operator> <operator>!</operator><name>dist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"guess_dc() is out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>b_y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b_y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>b_y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>color</name><init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>b_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b_x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>b_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index_j</name><init>= <expr><operator>(</operator><name>b_x</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_j</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>intra_j</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>error_j</name><operator>&amp;</operator><name>ER_DC_ERROR</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>color</name><operator>=</operator> <name><name>dc</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <name>b_x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name> <index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dist</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <ternary><condition><expr><name>distance</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b_x</name><operator>-</operator><name>distance</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>color</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>b_x</name><operator>=</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>b_x</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>b_x</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index_j</name><init>= <expr><operator>(</operator><name>b_x</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_j</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>intra_j</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>error_j</name><operator>&amp;</operator><name>ER_DC_ERROR</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>color</name><operator>=</operator> <name><name>dc</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <name>b_x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name> <index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dist</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <ternary><condition><expr><name>distance</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>distance</name><operator>-</operator><name>b_x</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>b_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b_x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>b_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>color</name><init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>b_y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b_y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>b_y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index_j</name><init>= <expr><operator>(</operator><name>b_x</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_j</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>intra_j</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>error_j</name><operator>&amp;</operator><name>ER_DC_ERROR</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>color</name><operator>=</operator> <name><name>dc</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <name>b_y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name> <index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dist</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <ternary><condition><expr><name>distance</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b_y</name><operator>-</operator><name>distance</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>color</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>b_y</name><operator>=</operator><name>h</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>b_y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>b_y</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index_j</name><init>= <expr><operator>(</operator><name>b_x</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name><operator>&gt;&gt;</operator><name>is_luma</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_j</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_index_j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>intra_j</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>error_j</name><operator>&amp;</operator><name>ER_DC_ERROR</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>color</name><operator>=</operator> <name><name>dc</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name><operator>=</operator> <name>b_y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name> <index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dist</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <ternary><condition><expr><name>distance</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>distance</name><operator>-</operator><name>b_y</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>b_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>b_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>b_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index</name></decl>, <decl><type ref="prev"/><name>error</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>guess</name></decl>, <decl><type ref="prev"/><name>weight_sum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mb_index</name> <operator>=</operator> <operator>(</operator><name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTER</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_DC_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>weight_sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>weight</name> <init>= <expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">16</literal> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>guess</name> <operator>+=</operator> <name>weight</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>col</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name><operator>*</operator><name>stride</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight_sum</name> <operator>+=</operator> <name>weight</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <operator>(</operator><name>guess</name> <operator>+</operator> <name>weight_sum</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>weight_sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><name>b_x</name> <operator>+</operator> <name>b_y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>h_block_filter</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b_x</name></decl>, <decl><type ref="prev"/><name>b_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mvx_stride</name></decl>, <decl><type ref="prev"/><name>mvy_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_mv_strides</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvx_stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvy_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mvx_stride</name> <operator>&gt;&gt;=</operator> <name>is_luma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mvy_stride</name> <operator>*=</operator> <name>mvx_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>b_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><operator>(</operator> <name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>b_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_intra</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><operator>(</operator> <name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_intra</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><operator>(</operator><operator>(</operator><name>b_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_damage</name> <init>= <expr><name>left_status</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_damage</name> <init>= <expr><name>right_status</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>b_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>b_y</name> <operator>*</operator> <name>stride</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>left_mv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mvy_stride</name> <operator>*</operator> <name>b_y</name> <operator>+</operator> <name>mvx_stride</name> <operator>*</operator> <name>b_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>right_mv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mvy_stride</name> <operator>*</operator> <name>b_y</name> <operator>+</operator> <name>mvx_stride</name> <operator>*</operator> <operator>(</operator><name>b_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>left_damage</name> <operator>||</operator> <name>right_damage</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>left_intra</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>right_intra</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>left_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>right_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>left_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>right_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>left_damage</name> <operator>&amp;&amp;</operator> <name>right_damage</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>*</operator> <literal type="number">16</literal> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left_damage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right_damage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal><operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">11</literal><operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>v_block_filter</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b_x</name></decl>, <decl><type ref="prev"/><name>b_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mvx_stride</name></decl>, <decl><type ref="prev"/><name>mvy_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_mv_strides</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvx_stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvy_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mvx_stride</name> <operator>&gt;&gt;=</operator> <name>is_luma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mvy_stride</name> <operator>*=</operator> <name>mvx_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_y</name> <operator>&lt;</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b_x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>b_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><operator>(</operator><name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><operator>(</operator><name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_intra</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><operator>(</operator><name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator> <name>b_y</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_intra</name> <init>= <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><operator>(</operator><name>b_x</name> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>is_luma</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_damage</name> <init>= <expr><name>top_status</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_damage</name> <init>= <expr><name>bottom_status</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>b_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>b_y</name> <operator>*</operator> <name>stride</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>top_mv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mvy_stride</name> <operator>*</operator> <name>b_y</name> <operator>+</operator> <name>mvx_stride</name> <operator>*</operator> <name>b_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bottom_mv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mvy_stride</name> <operator>*</operator> <operator>(</operator><name>b_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>mvx_stride</name> <operator>*</operator> <name>b_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_damage</name> <operator>||</operator> <name>bottom_damage</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>top_intra</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>bottom_intra</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>bottom_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>bottom_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_damage</name> <operator>&amp;&amp;</operator> <name>bottom_damage</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>*</operator> <literal type="number">16</literal> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top_damage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom_damage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>dst</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_FROZEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_CHANGED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_UNCHANGED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_LISTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>add_blocklist</name><argument_list>(<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>blocklist</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>blocklist_length</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>fixed</name></expr></argument>, <argument><expr><name>int</name> <name>mb_x</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>, <argument><expr><name>int</name> <name>mb_xy</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MV_LISTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blocklist</name><index>[ <expr><operator>*</operator><name>blocklist_length</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mb_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blocklist</name><index>[<expr><operator>(</operator><operator>*</operator><name>blocklist_length</name><operator>)</operator><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mb_y</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>guess_mv</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>blocklist</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>next_blocklist</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>mb_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>, <decl><type ref="prev"/><name>num_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mot_step</name></decl>, <decl><type ref="prev"/><name>mot_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocklist_length</name></decl>, <decl><type ref="prev"/><name>next_blocklist_length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_height</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_height</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blocklist</name> <operator>=</operator> <operator>(</operator><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>er_temp_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_blocklist</name> <operator>=</operator> <name>blocklist</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fixed</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>next_blocklist</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_mv_strides</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mot_step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mot_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>tf</name></name></expr></argument>, <argument><expr><name>mb_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_width</name> <operator>*</operator> <name>mb_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>MV_FROZEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>MV_FROZEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>MV_FROZEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_avail</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name><init>= <expr><name>mb_xy</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name><init>= <expr><name>mb_xy</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_index</name><init>= <expr><operator>(</operator><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name>mot_stride</name><operator>)</operator> <operator>*</operator> <name>mot_step</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name><operator>&amp;</operator><name>FF_EC_GUESS_MVS</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<name>num_avail</name> <operator>&lt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_width</name></expr></argument>, <argument><expr><name>mb_height</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name>mb_height</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mv_dir</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>MV_DIR_FORWARD</name></expr> </then><else>: <expr><name>MV_DIR_BACKWARD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mv_dir</name></expr></argument>, <argument><expr><name>MV_TYPE_16X16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>,
<argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blocklist_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name>mb_height</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name>mb_width</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>mb_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>==</operator> <name>MV_FROZEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_xy</name> <operator>-</operator> <name>mb_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>mb_width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>mb_height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_xy</name> <operator>+</operator> <name>mb_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>depth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>, <decl><type ref="prev"/><name>none_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocklist_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>none_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>changed</name> <operator>||</operator> <name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>pass</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>score_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blocklist_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blocklist_index</name> <operator>&lt;</operator> <name>blocklist_length</name></expr>;</condition> <incr><expr><name>blocklist_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>blocklist</name><index>[<expr><name>blocklist_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>blocklist</name><index>[<expr><name>blocklist_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>mb_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mv_predictor</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mot_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_x</name></decl>, <decl><type ref="prev"/><name>prev_y</name></decl>, <decl><type ref="prev"/><name>prev_ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mb_x</name> <operator>^</operator> <name>mb_y</name> <operator>^</operator> <name>pass</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>!=</operator> <name>MV_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <name>mb_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <name>mb_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>j</name> <operator>&amp;</operator> <name>MV_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <name>MV_CHANGED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>pass</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>none_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mot_index</name> <operator>=</operator> <operator>(</operator><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>mot_stride</name><operator>)</operator> <operator>*</operator> <name>mot_step</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>-</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>-</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_width</name> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <name>mb_stride</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>-</operator> <name>mot_stride</name> <operator>*</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>-</operator> <name>mot_stride</name> <operator>*</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>mb_xy</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;</operator><name>mb_height</name> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <name>mb_stride</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>mot_stride</name> <operator>*</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>mot_stride</name> <operator>*</operator> <name>mot_step</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>mb_xy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pred_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pred_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_x</name></decl>, <decl><type ref="prev"/><name>max_y</name></decl>, <decl><type ref="prev"/><name>min_x</name></decl>, <decl><type ref="prev"/><name>min_y</name></decl>, <decl><type ref="prev"/><name>max_r</name></decl>, <decl><type ref="prev"/><name>min_r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum_x</name> <operator>+=</operator> <name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_y</name> <operator>+=</operator> <name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_r</name> <operator>+=</operator> <name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>ref</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_mean_and_median</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum_x</name> <operator>/</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum_y</name> <operator>/</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator> <name>sum_r</name> <operator>/</operator> <name>j</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pred_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_y</name> <operator>=</operator> <name>min_x</name> <operator>=</operator> <name>min_r</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_y</name> <operator>=</operator> <name>max_x</name> <operator>=</operator> <name>max_r</name> <operator>=</operator> <operator>-</operator><literal type="number">99999</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>min_x</name> <operator>=</operator> <name>min_y</name> <operator>=</operator> <name>max_x</name> <operator>=</operator> <name>max_y</name> <operator>=</operator> <name>min_r</name> <operator>=</operator> <name>max_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>max_x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_x</name></expr></argument>, <argument><expr><name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_y</name></expr></argument>, <argument><expr><name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_r</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_r</name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_x</name></expr></argument>, <argument><expr><name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_y</name></expr></argument>, <argument><expr><name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_r</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_r</name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum_x</name> <operator>-</operator> <name>max_x</name> <operator>-</operator> <name>min_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum_y</name> <operator>-</operator> <name>max_y</name> <operator>-</operator> <name>min_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum_r</name> <operator>-</operator> <name>max_r</name> <operator>-</operator> <name>min_r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pred_count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pred_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>skip_mean_and_median</name>:</label>

<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ref</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>prev_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_predictor</name><index>[<expr><name>pred_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>pred_count</name></expr>]</index></name> <operator>=</operator> <name>prev_ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>best_pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_predictor</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>MV_DIR_FORWARD</name></expr></argument>,
<argument><expr><name>MV_TYPE_16X16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>
<name><name>src</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_width</name> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>-</operator>
<name><name>src</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <name>mb_stride</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>k</name> <operator>-</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_height</name> <operator>&amp;&amp;</operator> <name><name>fixed</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <name>mb_stride</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">15</literal></expr>]</index></name> <operator>-</operator>
<name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;=</operator> <name>best_score</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_pred</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>score_sum</name> <operator>+=</operator> <name>best_score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_predictor</name><index>[<expr><name>best_pred</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_predictor</name><index>[<expr><name>best_pred</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mot_step</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mot_step</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>mot_stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_index</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>mot_stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>best_pred</name></expr>]</index></name></expr></argument>, <argument><expr><name>MV_DIR_FORWARD</name></expr></argument>,
<argument><expr><name>MV_TYPE_16X16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>prev_x</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>prev_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MV_CHANGED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MV_UNCHANGED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>none_left</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_blocklist_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blocklist_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blocklist_index</name> <operator>&lt;</operator> <name>blocklist_length</name></expr>;</condition> <incr><expr><name>blocklist_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>blocklist</name><index>[<expr><name>blocklist_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>blocklist</name><index>[<expr><name>blocklist_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>mb_stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MV_CHANGED</name><operator>|</operator><name>MV_UNCHANGED</name><operator>|</operator><name>MV_FROZEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fixed</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MV_FROZEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>next_blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>next_blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_xy</name> <operator>-</operator> <name>mb_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>next_blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>mb_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_blocklist</name><argument_list>(<argument><expr><name>next_blocklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_blocklist_length</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_xy</name> <operator>+</operator> <name>mb_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>next_blocklist_length</name> <operator>&lt;=</operator> <name>mb_height</name> <operator>*</operator> <name>mb_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument> , <argument><expr><name>blocklist_length</name></expr></argument>, <argument><expr><name>next_blocklist_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>blocklist</name></expr></argument>, <argument><expr><name>next_blocklist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_intra_more_likely</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_intra_likely</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>undamaged_count</name></decl>, <decl><type ref="prev"/><name>skip_amount</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name> <operator>&amp;</operator> <name>FF_EC_FAVOR_INTER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>undamaged_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_DC_ERROR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>undamaged_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>undamaged_count</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>CONFIG_XVMC</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_mb</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip_amount</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>undamaged_count</name> <operator>/</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>is_intra_likely</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_DC_ERROR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>%</operator> <name>skip_amount</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mb_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>last_mb_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>tf</name></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>is_intra_likely</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>last_mb_ptr</name><operator>,</operator> <name>mb_ptr</name><operator>,</operator>
<name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_intra_likely</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>last_mb_ptr</name><operator>,</operator>
<name>last_mb_ptr</name> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">16</literal><operator>,</operator>
<name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_intra_likely</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>is_intra_likely</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>is_intra_likely</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_er_frame_start</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mecc_inited</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mecc_inited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name> <operator>|</operator> <name>VP_START</name> <operator>|</operator> <name>ER_MB_END</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_occurred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>er_supported</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name> <operator>||</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>field_picture</name></name></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>ff_er_add_slice</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>endx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_i</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>startx</name> <operator>+</operator> <name>starty</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end_i</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>endx</name> <operator>+</operator> <name>endy</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>start_i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>end_i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_i</name> <operator>&gt;</operator> <name>end_i</name> <operator>||</operator> <name>start_xy</name> <operator>&gt;</operator> <name>end_xy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"internal error, slice end before start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name>VP_START</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <operator>(</operator><name>ER_AC_ERROR</name> <operator>|</operator> <name>ER_AC_END</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ER_AC_ERROR</name> <operator>|</operator> <name>ER_AC_END</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>start_i</name> <operator>-</operator> <name>end_i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <operator>(</operator><name>ER_DC_ERROR</name> <operator>|</operator> <name>ER_DC_END</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ER_DC_ERROR</name> <operator>|</operator> <name>ER_DC_END</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>start_i</name> <operator>-</operator> <name>end_i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <operator>(</operator><name>ER_MV_ERROR</name> <operator>|</operator> <name>ER_MV_END</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ER_MV_ERROR</name> <operator>|</operator> <name>ER_MV_END</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>start_i</name> <operator>-</operator> <name>end_i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_occurred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>start_xy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>end_xy</name> <operator>-</operator> <name>start_xy</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_xy</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_xy</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>end_xy</name></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>end_xy</name></expr>]</index></name> <operator>|=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>start_xy</name></expr>]</index></name> <operator>|=</operator> <name>VP_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_xy</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>er_supported</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_top</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&lt;</operator> <name>start_i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>start_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_status</name> <operator>&amp;=</operator> <operator>~</operator> <name>VP_START</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_status</name> <operator>!=</operator> <operator>(</operator><name>ER_MV_END</name> <operator>|</operator> <name>ER_DC_END</name> <operator>|</operator> <name>ER_AC_END</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_occurred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_er_frame_end</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>error</name></decl>, <decl><type ref="prev"/><name>error_type</name></decl>, <decl><type ref="prev"/><name>dc_error</name></decl>, <decl><type ref="prev"/><name>mv_error</name></decl>, <decl><type ref="prev"/><name>ac_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>threshold_part</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threshold</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_intra_likely</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name> <operator>||</operator> <operator>!</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>||</operator>
<operator>!</operator><call><name>er_supported</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_top</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_bottom</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0x7F</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>mb_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">16</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>error_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_top</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_bottom</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ignoring last missing slice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use previous picture in error concealment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use next picture in error concealment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_pic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Warning MVs not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_ER</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%2X "</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<for>for <control>(<init><expr><name>error_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>error_type</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>error_type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>error_type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>error_type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>error_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>VP_START</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_AC_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_END</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_DC_END</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_AC_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name><operator>|=</operator> <name>ER_AC_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>VP_START</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end_ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error1</name> <operator>&amp;</operator> <name>VP_START</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error2</name> <operator>==</operator> <operator>(</operator><name>VP_START</name> <operator>|</operator> <name>ER_MB_ERROR</name> <operator>|</operator> <name>ER_MB_END</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>error1</name> <operator>!=</operator> <operator>(</operator><name>VP_START</name> <operator>|</operator> <name>ER_MB_ERROR</name> <operator>|</operator> <name>ER_MB_END</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>error1</name> <operator>&amp;</operator> <name>ER_AC_END</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>error1</name> <operator>&amp;</operator> <name>ER_DC_END</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>error1</name> <operator>&amp;</operator> <name>ER_MV_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <name>ER_MB_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">9999999</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>error_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>error_type</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>error_type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>distance</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>error_type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name><name>threshold_part</name><index>[<expr><name>error_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>error_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>error_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>VP_START</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">9999999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_error</name> <operator>&amp;</operator> <name>VP_START</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>old_error</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>|=</operator> <name>old_error</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <name>error</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_MB_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>|=</operator> <name>ER_MB_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dc_error</name> <operator>=</operator> <name>ac_error</name> <operator>=</operator> <name>mv_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_DC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc_error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_AC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mv_error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"concealing %d DC, %d AC, %d MV errors in %c frame\n"</literal></expr></argument>,
<argument><expr><name>dc_error</name></expr></argument>, <argument><expr><name>ac_error</name></expr></argument>, <argument><expr><name>mv_error</name></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>decode_error_flags</name></name> <operator>|=</operator> <name>FF_DECODE_ERROR_CONCEALMENT_ACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_intra_likely</name> <operator>=</operator> <call><name>is_intra_more_likely</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_DC_ERROR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_intra_likely</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_INTRA4x4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_INTRA4x4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dir</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mv_dir</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>MV_DIR_BACKWARD</name></expr> </then><else>: <expr><name>MV_DIR_FORWARD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mv_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_AC_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index</name> <init>= <expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mv_type</name> <operator>=</operator> <name>MV_TYPE_8X8</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mb_index</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mb_index</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mv_type</name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,
<argument><expr><name>mv_dir</name></expr></argument>, <argument><expr><name>mv_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xy</name> <init>= <expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mv_dir</name> <init>= <expr><name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_MV_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_AC_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mv_dir</name> <operator>&amp;=</operator> <operator>~</operator><name>MV_DIR_FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mv_dir</name> <operator>&amp;=</operator> <operator>~</operator><name>MV_DIR_BACKWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>time_pp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time_pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>tf</name></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>time_pb</name> <operator>/</operator> <name>time_pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>time_pb</name> <operator>/</operator> <name>time_pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator> <operator>/</operator> <name>time_pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator> <operator>/</operator> <name>time_pp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mv_dir</name></expr></argument>, <argument><expr><name>MV_TYPE_16X16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>,
<argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>guess_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>CONFIG_XVMC</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_mb</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ec_clean</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>, <decl><type ref="prev"/><name>dcu</name></decl>, <decl><type ref="prev"/><name>dcv</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>dest_y</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator>
<operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dc_ptr</name><index>[<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dc</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dcu</name> <operator>=</operator> <name>dcv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dcu</name> <operator>+=</operator> <name><name>dest_cb</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcv</name> <operator>+=</operator> <name><name>dest_cr</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dcu</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dcv</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>guess_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>guess_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>guess_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>filter181</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTER</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error</name> <operator>&amp;</operator> <name>ER_AC_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name>dest_cr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name> <operator>&amp;</operator> <name>FF_EC_DEBLOCK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>h_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>v_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>h_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v_block_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>ec_clean</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>error_status_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>error</name> <operator>&amp;</operator> <operator>(</operator><name>ER_DC_ERROR</name> <operator>|</operator> <name>ER_MV_ERROR</name> <operator>|</operator> <name>ER_AC_ERROR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ERPicture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ERPicture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_pic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ERPicture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
