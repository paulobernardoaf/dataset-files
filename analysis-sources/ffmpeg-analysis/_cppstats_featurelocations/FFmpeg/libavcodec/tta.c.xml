<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tta.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttadsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_SIMPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_ENCRYPTED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>TTAContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>, <name>channels</name>, <name>bps</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>data_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name></decl>, <name>last_frame_length</name>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decode_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>crc_pass</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TTAChannel</name> <modifier>*</modifier></type><name>ch_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TTADSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
}</block></struct></type> <name>TTAContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>tta_channel_layouts</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,
<expr><name>AV_CH_LAYOUT_QUAD</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name><operator>|</operator><name>AV_CH_BACK_CENTER</name></expr>,
<expr><name>AV_CH_LAYOUT_7POINT1_WIDE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tta_check_crc</name><parameter_list>(<parameter><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>, <decl><type ref="prev"/><name>CRC</name></decl>;</decl_stmt>

<expr_stmt><expr><name>CRC</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>crc_table</name></name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFU</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CRC</name> <operator>!=</operator> <operator>(</operator><name>crc</name> <operator>^</operator> <literal type="number">0xFFFFFFFFU</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>tta_check_crc64</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>poly</name> <init>= <expr><literal type="number">0x42F0E1EBA9EA3693U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>pass</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pass</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>pass</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>poly</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>crc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></while>

<return>return <expr><name>crc</name> <operator>^</operator> <name>UINT64_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allocate_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tta_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_table</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"TTA1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_ENCRYPTED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing password for encrypted stream. Please use the -password option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV_WL64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>crc_pass</name></name></expr></argument>, <argument><expr><call><name>tta_check_crc64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>tta_channel_layouts</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid samplerate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid/unsupported sample format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">0x7FFFFFu</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sample_rate too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">245</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_length</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data_length</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_frames</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data_length</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_length</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"format: %d chans: %d bps: %d rate: %d block: %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"data_length: %d frame_length: %d last: %d total: %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_length</name></name></expr></argument>, <argument><expr><name>total_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>&gt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wrong extradata present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_ttadsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>allocate_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tta_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tframe</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>framelen</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator>
<operator>(</operator><call><name>tta_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>framelen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TTAFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_tta_filter_init</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>ff_tta_filter_configs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_ENCRYPTED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>qm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>crc_pass</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_tta_rice_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rice</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr>;</init> <condition><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>+</operator> <operator>(</operator><name>framelen</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>predictor</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>cur_chan</name></expr>]</index></name><operator>.</operator><name>predictor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TTAFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>cur_chan</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TTARice</name> <modifier>*</modifier></type><name>rice</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>cur_chan</name></expr>]</index></name><operator>.</operator><name>rice</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unary</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>unary</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unary</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rice</name><operator>-&gt;</operator><name>k0</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rice</name><operator>-&gt;</operator><name>k1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>unary</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>MIN_CACHE_BITS</name> <operator>||</operator> <name>unary</name> <operator>&gt;</operator> <name>INT32_MAX</name> <operator>&gt;&gt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>unary</name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>unary</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>+=</operator> <name>value</name> <operator>-</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&lt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&gt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name><name>ff_tta_shift_1</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name></expr>]</index></name></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>+=</operator> <name>value</name> <operator>-</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&lt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&gt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>


<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>filter_process</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int32_t)((((uint64_t)(x) &lt;&lt; (k)) - (x)) &gt;&gt; (k))</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>PRED</name><argument_list>(<argument><expr><operator>*</operator><name>predictor</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>PRED</name><argument_list>(<argument><expr><operator>*</operator><name>predictor</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <operator>*</operator><name>predictor</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>predictor</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cur_chan</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_chan</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><operator>*</operator><name>p</name> <operator>+=</operator> <operator>*</operator><name>r</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>r</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>*</operator><name>r</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_length</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>framelen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_length</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr>;</init> <condition><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>+</operator> <operator>(</operator><name>framelen</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr>;</init> <condition><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>+</operator> <operator>(</operator><name>framelen</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>framelen</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>*=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<return>return <expr><call><name>allocate_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tta_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TTAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TTAContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"password"</literal></expr>, <expr><literal type="string">"Set decoding password"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tta_decoder_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"TTA Decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_tta_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tta"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TTA (True Audio)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TTA</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TTAContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tta_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tta_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>tta_decode_frame</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tta_decoder_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
