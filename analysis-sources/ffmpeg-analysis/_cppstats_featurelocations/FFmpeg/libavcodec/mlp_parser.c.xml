<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mlp_parser.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp_parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MLPParseContext</name>
<block>{
<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_substreams</name></decl>;</decl_stmt>
}</block></struct></type> <name>MLPParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mlp_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_mlp_init_crc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mlp_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MLPParseContext</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sync_present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parity_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>in_sync</name></name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>state</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <literal type="number">0xfffffffe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf8726fba</literal> <operator>&amp;&amp;</operator>

<name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>in_sync</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>in_sync</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>END_NOT_FOUND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ff_combine_frame failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_combine_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ff_combine_frame failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<for>for<control>(<init>;</init> <condition><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>overread</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>overread</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>]</index></name><operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>overread_index</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>buf_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>END_NOT_FOUND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ff_combine_frame failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>=</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<goto>goto <name>lost_sync</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>-=</operator> <name><name>mp</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>&gt;</operator> <name>buf_size</name><operator>)</operator></expr> ?</condition><then> <expr><name>END_NOT_FOUND</name></expr> </then><else>: <expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>-=</operator> <name>buf_size</name></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>bytes_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sync_present</name> <operator>=</operator> <name>buf_size</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfffffffe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf8726fba</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sync_present</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>parity_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mp</name><operator>-&gt;</operator><name>num_substreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>parity_bits</name> <operator>^=</operator> <name><name>buf</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parity_bits</name> <operator>^=</operator> <name><name>buf</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parity_bits</name> <operator>^=</operator> <name><name>buf</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parity_bits</name> <operator>^=</operator> <name><name>buf</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>parity_bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <name>parity_bits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"mlpparse: Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>lost_sync</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MLPHeaderInfo</name></type> <name>mh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_mlp_read_major_sync</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>lost_sync</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>group1_bits</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>access_unit_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0xbb</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channels_mlp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_mlp</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mh</name><operator>.</operator><name>channels_thd_stream2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channels_thd_stream1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream1</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channels_thd_stream2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mh</name><operator>.</operator><name>is_vbr</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>peak_bitrate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>num_substreams</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>num_substreams</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

<label><name>lost_sync</name>:</label>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>in_sync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_mlp_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_MLP</name></expr>, <expr><name>AV_CODEC_ID_TRUEHD</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MLPParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>mlp_init</name></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>mlp_parse</name></expr>,
<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
