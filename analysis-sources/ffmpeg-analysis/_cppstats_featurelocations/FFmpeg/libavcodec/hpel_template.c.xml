<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hpel_template.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_HPEL</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void FUNC(OPNAME ##_pixels8_l2)(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { int i; for (i = 0; i &lt; h; i++) { pixel4 a, b; a = AV_RN4P(&amp;src1[i * src_stride1]); b = AV_RN4P(&amp;src2[i * src_stride2]); OP(*((pixel4 *) &amp;dst[i * dst_stride]), rnd_avg_pixel4(a, b)); a = AV_RN4P(&amp;src1[i * src_stride1 + 4 * sizeof(pixel)]); b = AV_RN4P(&amp;src2[i * src_stride2 + 4 * sizeof(pixel)]); OP(*((pixel4 *) &amp;dst[i * dst_stride + 4 * sizeof(pixel)]), rnd_avg_pixel4(a, b)); } } static inline void FUNC(OPNAME ##_pixels4_l2)(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { int i; for (i = 0; i &lt; h; i++) { pixel4 a, b; a = AV_RN4P(&amp;src1[i * src_stride1]); b = AV_RN4P(&amp;src2[i * src_stride2]); OP(*((pixel4 *) &amp;dst[i * dst_stride]), rnd_avg_pixel4(a, b)); } } static inline void FUNC(OPNAME ##_pixels2_l2)(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { int i; for (i = 0; i &lt; h; i++) { pixel4 a, b; a = AV_RN2P(&amp;src1[i * src_stride1]); b = AV_RN2P(&amp;src2[i * src_stride2]); OP(*((pixel2 *) &amp;dst[i * dst_stride]), rnd_avg_pixel4(a, b)); } } static inline void FUNC(OPNAME ##_pixels16_l2)(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { FUNC(OPNAME ##_pixels8_l2)(dst, src1, src2, dst_stride, src_stride1, src_stride2, h); FUNC(OPNAME ##_pixels8_l2)(dst + 8 * sizeof(pixel), src1 + 8 * sizeof(pixel), src2 + 8 * sizeof(pixel), dst_stride, src_stride1, src_stride2, h); }</cpp:value></cpp:define> 








































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_avg_pixel4(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>
<macro><name>DEF_HPEL</name><argument_list>(<argument>avg</argument>, <argument>op_avg</argument>)</argument_list></macro>
<macro><name>DEF_HPEL</name><argument_list>(<argument>put</argument>, <argument>op_put</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>
</unit>
