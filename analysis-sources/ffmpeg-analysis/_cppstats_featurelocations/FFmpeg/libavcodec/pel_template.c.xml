<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pel_template.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnd_avg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_PEL</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void FUNCC(OPNAME ##_pixels2)(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int i; for (i = 0; i &lt; h; i++) { OP(*((pixel2 *) block), AV_RN2P(pixels)); pixels += line_size; block += line_size; } } static inline void FUNCC(OPNAME ##_pixels4)(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int i; for (i = 0; i &lt; h; i++) { OP(*((pixel4 *) block), AV_RN4P(pixels)); pixels += line_size; block += line_size; } } static inline void FUNCC(OPNAME ##_pixels8)(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int i; for (i = 0; i &lt; h; i++) { OP(*((pixel4 *) block), AV_RN4P(pixels)); OP(*((pixel4 *) (block + 4 * sizeof(pixel))), AV_RN4P(pixels + 4 * sizeof(pixel))); pixels += line_size; block += line_size; } } CALL_2X_PIXELS(FUNCC(OPNAME ##_pixels16), FUNCC(OPNAME ##_pixels8), 8 * sizeof(pixel))</cpp:value></cpp:define>













































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_avg_pixel4(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>

<macro><name>DEF_PEL</name><argument_list>(<argument>avg</argument>, <argument>op_avg</argument>)</argument_list></macro>
<macro><name>DEF_PEL</name><argument_list>(<argument>put</argument>, <argument>op_put</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>
</unit>
