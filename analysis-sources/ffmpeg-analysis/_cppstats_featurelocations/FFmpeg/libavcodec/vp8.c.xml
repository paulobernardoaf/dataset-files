<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp8.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8data.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/vp8.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name> <operator>&amp;&amp;</operator> <name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX</name><parameter_list>(<parameter><type><name>vp7</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vp7 ? vp7_ ##f : vp8_ ##f)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX</name><parameter_list>(<parameter><type><name>vp7</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vp7_ ##f</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX</name><parameter_list>(<parameter><type><name>vp7</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vp8_ ##f</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buffers</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_strength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>top_border</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_alloc_frame</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>ref</name></expr> ?</condition><then> <expr><name>AV_GET_BUFFER_FLAG_REF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>seg_map</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>seg_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_release_frame</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>seg_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_ref_frame</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vp8_release_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>seg_map</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>seg_map</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>seg_map</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_release_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_decode_flush_impl</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_mem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_release_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_mem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp8_decode_flush_impl</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VP8Frame</name> <modifier>*</modifier></type><name>vp8_find_free_buffer</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Ran out of free frames!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_release_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>get_pixel_format</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_VAAPI_HWACCEL</name></expr></cpp:if>
<expr><name>AV_PIX_FMT_VAAPI</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_NVDEC_HWACCEL</name></expr></cpp:if>
<expr><name>AV_PIX_FMT_CUDA</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_get_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>update_dimensions</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator> <operator>(</operator><name>height</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>||</operator>
<name>height</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_decode_flush_impl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>actually_webp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_vp7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>get_pixel_format</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>=</operator> <name>is_vp7</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>top_border</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>MAX_THREADS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP8ThreadData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>top_border</name></name> <operator>||</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_strength</name> <operator>=</operator>
<call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>filter_strength</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_strength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_update_dimensions</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>update_dimensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_update_dimensions</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>update_dimensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_segment_info</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_feature_data</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_feature_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>base_quant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>segmentid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_lf_deltas</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>MODE_I4x4</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>VP8_MVMODE_SPLIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_partitions</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sizes</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>sizes</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>-</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_partition_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeff_partition</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_partition_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeff_partition</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_get_quants</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yac_qi</name> <init>= <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ydc_qi</name> <init>= <expr><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>yac_qi</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2dc_qi</name> <init>= <expr><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>yac_qi</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2ac_qi</name> <init>= <expr><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>yac_qi</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uvdc_qi</name> <init>= <expr><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>yac_qi</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uvac_qi</name> <init>= <expr><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>yac_qi</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>luma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vp7_ydc_qlookup</name><index>[<expr><name>ydc_qi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>luma_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp7_yac_qlookup</name><index>[<expr><name>yac_qi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vp7_y2dc_qlookup</name><index>[<expr><name>y2dc_qi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp7_y2ac_qlookup</name><index>[<expr><name>y2ac_qi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vp7_ydc_qlookup</name><index>[<expr><name>uvdc_qi</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp7_yac_qlookup</name><index>[<expr><name>uvac_qi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_get_quants</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>base_qi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>yac_qi</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>ydc_delta</name></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2dc_delta</name></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2ac_delta</name></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvdc_delta</name></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvac_delta</name></name> <operator>=</operator> <call><name>vp8_rac_get_sint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base_qi</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>base_quant</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base_qi</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base_qi</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_dc_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>ydc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_ac_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_dc_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2dc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_ac_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2ac_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>*</operator> <literal type="number">101581</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_dc_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvdc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vp8_ac_qlookup</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvac_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>luma_dc_qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chroma_qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VP56Frame</name></type> <name>ref_to_update</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><name>VP56Frame</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP56_FRAME_CURRENT</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>VP56_FRAME_PREVIOUS</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ref</name> <operator>==</operator> <name>VP56_FRAME_GOLDEN</name><operator>)</operator></expr> ?</condition><then> <expr><name>VP56_FRAME_GOLDEN2</name></expr> </then><else>: <expr><name>VP56_FRAME_GOLDEN</name></expr></else></ternary></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VP56_FRAME_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp78_reset_probability_tables</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vp8_token_default_probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>vp8_coeff_band</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp78_update_probability_tables</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>NUM_DCT_TOKENS</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_token_update_probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prob</name> <init>= <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>vp8_coeff_band_indexes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>vp8_coeff_band_indexes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>prob</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP7_MVC_SIZE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_MVC_SIZE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp78_update_pred16x16_pred8x8_mvc_probabilities</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mvc_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mvc_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mv_update_prob</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_refs</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_golden</name> <init>= <expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>update_altref</name> <init>= <expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>=</operator> <call><name>ref_to_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>update_golden</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name> <operator>=</operator> <call><name>ref_to_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>update_altref</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_chroma</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fade</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>dst_linesize</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name> <init>= <expr><name><name>src2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>*</operator> <name>beta</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_fade_frame</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>alpha</name> <operator>||</operator> <name>beta</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>||</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Discarding interframe without a prior keyframe!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator>
<name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name><operator>-&gt;</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_find_free_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp8_alloc_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name><operator>-&gt;</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_chroma</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fade</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part1_size</name></decl>, <decl><type ref="prev"/><name>hscale</name></decl>, <decl><type ref="prev"/><name>vscale</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>beta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown profile %d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>invisible</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>part1_size</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>+</operator> <name>part1_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer size %d is too small, needed : %d\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>+</operator> <name>part1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>put_vp8_epel_pixels_tab</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>part1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>part1_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>part1_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hscale</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vscale</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hscale</name> <operator>||</operator> <name>vscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Upscaling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp78_reset_probability_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name></name></expr></argument>, <argument><expr><name>vp8_pred16x16_prob_inter</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name></name></expr></argument>, <argument><expr><name>vp8_pred8x8c_prob_inter</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vp7_mv_default_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vp7_mv_default_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>, <argument><expr><name>ff_zigzag_scan</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_dc_pred</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_dc_pred</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>feature_present_prob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>feature_index_prob</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>vp7_feature_value_size</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp7_feature_value_size</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeff_partition</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>||</operator> 
<name>width</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp7_update_dimensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vp7_get_quants</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>=</operator> <ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VP56_FRAME_CURRENT</name></expr> </then><else>: <expr><name>VP56_FRAME_NONE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_last</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_probabilities</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_probabilities</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>update_probabilities</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_present</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fade_present</name></name> <operator>&amp;&amp;</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_zigzag_scan</name><index>[<expr><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vp78_update_probability_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp78_update_pred16x16_pred8x8_mvc_probabilities</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VP7_MVC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp7_fade_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>, <decl><type ref="prev"/><name>hscale</name></decl>, <decl><type ref="prev"/><name>vscale</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficent data (%d) for header\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>invisible</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_partition_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown profile %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>put_vp8_epel_pixels_tab</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>put_vp8_bilinear_pixels_tab</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&gt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Header size larger than data provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x2a019d</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid start code 0x%x\n"</literal></expr></argument>, <argument><expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hscale</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vscale</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hscale</name> <operator>||</operator> <name>vscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Upscaling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp78_reset_probability_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name></name></expr></argument>, <argument><expr><name>vp8_pred16x16_prob_inter</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name></name></expr></argument>, <argument><expr><name>vp8_pred8x8c_prob_inter</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name></name></expr></argument>, <argument><expr><name>vp8_mv_default_prob</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>header_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unspecified colorspace\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fullrange</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_segment_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>update</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_lf_deltas</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setup_partitions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid partitions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>||</operator> 
<name>width</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator> <operator>(</operator><name>height</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp8_update_dimensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vp8_get_quants</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_refs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr> ]</index></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>update_probabilities</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_last</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp78_update_probability_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mbskip_enabled</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mbskip</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>golden</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp78_update_pred16x16_pred8x8_mvc_probabilities</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VP8_MVC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>code_word</name></name> <operator>=</operator> <call><name>vp56_rac_renorm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>buffer</name></name> <operator>-</operator> <operator>(</operator><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>code_word</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>bit_count</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bits</name></name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>clamp_mv</name><parameter_list>(<parameter><decl><type><name>VP8mvbounds</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VP56mv</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_min</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_max</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_min</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_max</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>read_mv_component</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><literal type="number">0xF0</literal></expr> </then><else>: <expr><literal type="number">0xFFF0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ps</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ps</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;&amp;</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_read_mv_component</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_read_mv_component</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>get_submv_prob</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>vp7_submv_prob</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>vp8_submv_prob</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <operator>!</operator><operator>!</operator><name>left</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>vp8_submv_prob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>vp8_submv_prob</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <operator>!</operator><operator>!</operator><name>left</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>decode_splitmvs</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>part_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>top_mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>left_mb</name> <init>= <expr><operator>&amp;</operator><name><name>mb</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mbsplits_left</name> <init>= <expr><name><name>vp8_mbsplits</name><index>[<expr><name><name>left_mb</name><operator>-&gt;</operator><name>partitioning</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mbsplits_top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mbsplits_cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>firstidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>top_mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>left_mv</name> <init>= <expr><name><name>left_mb</name><operator>-&gt;</operator><name>bmv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>cur_mv</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>top_mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>top_mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>mb</name><index>[<expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>mbsplits_top</name> <operator>=</operator> <name><name>vp8_mbsplits</name><index>[<expr><name><name>top_mb</name><operator>-&gt;</operator><name>partitioning</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_mv</name> <operator>=</operator> <name><name>top_mb</name><operator>-&gt;</operator><name>bmv</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mbsplit_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mbsplit_prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>part_idx</name> <operator>=</operator> <name>VP8_SPLITMVMODE_16x8</name> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mbsplit_prob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>part_idx</name> <operator>=</operator> <name>VP8_SPLITMVMODE_8x8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>part_idx</name> <operator>=</operator> <name>VP8_SPLITMVMODE_4x4</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>vp8_mbsplit_count</name><index>[<expr><name>part_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbsplits_cur</name> <operator>=</operator> <name><name>vp8_mbsplits</name><index>[<expr><name>part_idx</name></expr>]</index></name></expr><operator>,</operator>
<expr><name>firstidx</name> <operator>=</operator> <name><name>vp8_mbfirstidx</name><index>[<expr><name>part_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name> <operator>=</operator> <name>part_idx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>firstidx</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>above</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>submv_prob</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left_mv</name><index>[<expr><name><name>mbsplits_left</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_mv</name><index>[<expr><name><name>mbsplits_cur</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>above</name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top_mv</name><index>[<expr><name><name>mbsplits_top</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>above</name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_mv</name><index>[<expr><name><name>mbsplits_cur</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>submv_prob</name> <operator>=</operator> <call><name>get_submv_prob</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>submv_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>submv_prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>submv_prob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>y</name></name> <operator>+</operator>
<call><name>read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>x</name></name> <operator>+</operator>
<call><name>read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>above</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_calculate_mb_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>boundary</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>edge_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>edge_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vwidth</name> <init>= <expr><name>mb_width</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new</name> <init>= <expr><operator>(</operator><name>mb_y</name> <operator>+</operator> <name>yoffset</name><operator>)</operator> <operator>*</operator> <name>vwidth</name> <operator>+</operator> <name>mb_x</name> <operator>+</operator> <name>xoffset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>&lt;</operator> <name>boundary</name> <operator>||</operator> <name>new</name> <operator>%</operator> <name>vwidth</name> <operator>==</operator> <name>vwidth</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>edge_y</name> <operator>=</operator> <name>new</name> <operator>/</operator> <name>vwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>edge_x</name> <operator>=</operator> <name>new</name> <operator>%</operator> <name>vwidth</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>VP56mv</name> <modifier>*</modifier></type><name>get_bmv_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><ternary><condition><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>VP8_MVMODE_SPLIT</name></expr> ?</condition><then> <expr><name><name>vp8_mbsplits</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name></expr>]</index><index>[<expr><name>subblock</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>vp7_decode_mvs</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name><name>mb_edge</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>CNT_ZERO</name></decl>, <decl><name>CNT_NEAREST</name></decl>, <decl><name>CNT_NEAR</name></decl> }</block>;</enum>
<enum>enum <block>{ <decl><name>VP8_EDGE_TOP</name></decl>, <decl><name>VP8_EDGE_LEFT</name></decl>, <decl><name>VP8_EDGE_TOPLEFT</name></decl> }</block>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>CNT_ZERO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>near_mv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cnt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VP7_MV_PRED_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP7MVPred</name> <modifier>*</modifier></type> <name>pred</name> <init>= <expr><operator>&amp;</operator><name><name>vp7_mv_pred</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>edge_x</name></decl>, <decl><type ref="prev"/><name>edge_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp7_calculate_mb_offset</name><argument_list>(<argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>pred</name><operator>-&gt;</operator><name>xoffset</name></name></expr></argument>,
<argument><expr><name><name>pred</name><operator>-&gt;</operator><name>yoffset</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge_y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><name><name>mb_edge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>
?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>edge_x</name> <operator>+</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>edge_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>
</then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>+</operator> <name>edge_x</name> <operator>+</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>edge_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mv</name> <init>= <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><call><name>get_bmv_ptr</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name><name>vp7_mv_pred</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subblock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mv</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mv</name> <operator>==</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_NEAREST</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mv</name> <operator>!=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_NEAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_NEAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_NEAREST</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_ZERO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>CNT_ZERO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name><name>vp7_mv_pred</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name> <operator>=</operator> <name>VP8_SPLITMVMODE_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp7_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_ZERO</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_MV</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp7_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp7_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cnt</name><index>[<expr><name>CNT_ZERO</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cnt</name><index>[<expr><name>CNT_ZERO</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp7_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_SPLIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><call><name>decode_splitmvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>vp7_read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>vp7_read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>vp8_decode_mvs</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8mvbounds</name> <modifier>*</modifier></type><name>mv_bounds</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name><name>mb_edge</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> ,
<expr><name>mb</name> <operator>-</operator> <literal type="number">1</literal></expr> ,
<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>CNT_ZERO</name></decl>, <decl><name>CNT_NEAREST</name></decl>, <decl><name>CNT_NEAR</name></decl>, <decl><name>CNT_SPLITMV</name></decl> }</block>;</enum>
<enum>enum <block>{ <decl><name>VP8_EDGE_TOP</name></decl>, <decl><name>VP8_EDGE_LEFT</name></decl>, <decl><name>VP8_EDGE_TOPLEFT</name></decl> }</block>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>CNT_ZERO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_sign_bias</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>sign_bias</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>near_mv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cnt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mb_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mb</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_edge</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>mb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_edge</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_EDGE_CHECK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ VP8Macroblock *edge = mb_edge[n]; int edge_ref = edge-&gt;ref_frame; if (edge_ref != VP56_FRAME_CURRENT) { uint32_t mv = AV_RN32A(&amp;edge-&gt;mv); if (mv) { if (cur_sign_bias != sign_bias[edge_ref]) { mv = ~mv; mv = ((mv &amp; 0x7fff7fff) + 0x00010001) ^ (mv &amp; 0x80008000); } if (!n || mv != AV_RN32A(&amp;near_mv[idx])) AV_WN32A(&amp;near_mv[++idx], mv); cnt[idx] += 1 + (n != 2); } else cnt[CNT_ZERO] += 1 + (n != 2); } }</cpp:value></cpp:define>




















<macro><name>MV_EDGE_CHECK</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>MV_EDGE_CHECK</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>MV_EDGE_CHECK</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name> <operator>=</operator> <name>VP8_SPLITMVMODE_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_ZERO</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_MV</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>CNT_SPLITMV</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>VP8_EDGE_TOP</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>VP8_EDGE_TOPLEFT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>( <argument><expr><name>VP56mv</name></expr></argument>, <argument><expr><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clamp_mv</name><argument_list>(<argument><expr><name>mv_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_ZERO</name> <operator>+</operator> <operator>(</operator><name><name>cnt</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>cnt</name><index>[<expr><name>CNT_ZERO</name></expr>]</index></name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>CNT_SPLITMV</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>mb_edge</name><index>[<expr><name>VP8_EDGE_LEFT</name></expr>]</index></name><operator>-&gt;</operator><name>mode</name> <operator>==</operator> <name>VP8_MVMODE_SPLIT</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>mb_edge</name><index>[<expr><name>VP8_EDGE_TOP</name></expr>]</index></name><operator>-&gt;</operator><name>mode</name> <operator>==</operator> <name>VP8_MVMODE_SPLIT</name><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<operator>(</operator><name><name>mb_edge</name><index>[<expr><name>VP8_EDGE_TOPLEFT</name></expr>]</index></name><operator>-&gt;</operator><name>mode</name> <operator>==</operator> <name>VP8_MVMODE_SPLIT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp8_mode_contexts</name><index>[<expr><name><name>cnt</name><index>[<expr><name>CNT_SPLITMV</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_SPLIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><call><name>decode_splitmvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>vp8_read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>vp8_read_mv_component</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>clamp_mv</name><argument_list>(<argument><expr><name>mv_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>clamp_mv</name><argument_list>(<argument><expr><name>mv_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>near_mv</name><index>[<expr><name>CNT_NEAREST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VP8_MVMODE_ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>decode_intra4x4_modes</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra4x4</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>intra4x4_pred_mode_mb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb_top</name> <init>= <expr><name>mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr></argument>, <argument><expr><name><name>mb_top</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>left</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_left</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>vp8_pred4x4_prob_intra</name><index>[<expr><name><name>top</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>left</name><index>[<expr><name>y</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>intra4x4</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred4x4_tree</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>intra4x4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>intra4x4</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>intra4x4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred4x4_tree</name></expr></argument>,
<argument><expr><name>vp8_pred4x4_prob_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>decode_mb_mode</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8mvbounds</name> <modifier>*</modifier></type><name>mv_bounds</name></decl></parameter>,
<parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>segment</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>vp7_feature_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"q-index"</literal></expr>,
<expr><literal type="string">"lf-delta"</literal></expr>,
<expr><literal type="string">"partial-golden-update"</literal></expr>,
<expr><literal type="string">"blit-pitch"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>segment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>feature_present_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp7_feature_index_tree</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>feature_index_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Feature %s present in macroblock (value 0x%x)\n"</literal></expr></argument>,
<argument><expr><name><name>vp7_feature_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>segmentid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>segment</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>segmentid</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>bit</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>bit</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>segment</name> <operator>=</operator> <ternary><condition><expr><name>ref</name></expr> ?</condition><then> <expr><operator>*</operator><name>ref</name></expr> </then><else>: <expr><operator>*</operator><name>segment</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <operator>*</operator><name>segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_enabled</name></name></expr> ?</condition><then> <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mbskip</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred16x16_tree_intra</name></expr></argument>,
<argument><expr><name>vp8_pred16x16_prob_intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_I4x4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_intra4x4_modes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>modes</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><name>vp7_pred4x4_mode</name></expr>
</then><else>: <expr><name>vp8_pred4x4_mode</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_x</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_left</name></name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred8x8c_tree</name></expr></argument>,
<argument><expr><name>vp8_pred8x8c_prob_intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>intra</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><operator>!</operator><name>is_vp7</name> <operator>&amp;&amp;</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>golden</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>VP56_FRAME_GOLDEN2</name></expr> 
</then><else>: <expr><name>VP56_FRAME_GOLDEN</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator> <name>VP56_FRAME_PREVIOUS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp7_decode_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_decode_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mv_bounds</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred16x16_tree_inter</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_I4x4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_intra4x4_modes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp8_pred8x8c_tree</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name> <operator>=</operator> <name>VP8_SPLITMVMODE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>decode_block_coeffs_internal</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>probs</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_DCT_TOKENS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>token_prob</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>scan</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>r</name></expr></init></decl>;</decl_stmt>
<goto>goto <name>skip_eob</name>;</goto>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>;</decl_stmt>
<label><name>restart</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<label><name>skip_eob</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>token_prob</name> <operator>=</operator> <name><name>probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vp7</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>skip_eob</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>token_prob</name> <operator>=</operator> <name><name>probs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>vp8_dct_cat1_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>vp8_dct_cat2_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>vp8_dct_cat2_prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cat</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>cat</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp8_rac_get_coeff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>ff_vp8_dct_cat_prob</name><index>[<expr><name>cat</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>token_prob</name> <operator>=</operator> <name><name>probs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>coeff</name></expr> </then><else>: <expr><name>coeff</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>qmul</name><index>[<expr><operator>!</operator><operator>!</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>inter_predict_dc</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>pred</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pred</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>!</operator><name>dc</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>dc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>dc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pred</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_block_coeffs_internal</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>probs</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_DCT_TOKENS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>token_prob</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>scan</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decode_block_coeffs_internal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>probs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>token_prob</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>vp8_decode_block_coeffs_internal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_block_coeffs_internal</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>probs</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_DCT_TOKENS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>token_prob</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decode_block_coeffs_internal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>probs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>token_prob</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><name>ff_zigzag_scan</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>decode_block_coeffs</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>probs</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_DCT_TOKENS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zero_nhood</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>scan</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>token_prob</name> <init>= <expr><name><name>probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>zero_nhood</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>token_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><call><name>vp7_decode_block_coeffs_internal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>probs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>token_prob</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>vp8_decode_block_coeffs_internal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>probs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>token_prob</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>decode_mb_coeffs</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>t_nnz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>l_nnz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>luma_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>luma_ctx</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nnz_pred</name></decl>, <decl><type ref="prev"/><name>nnz</name></decl>, <decl><type ref="prev"/><name>nnz_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>segment</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_dc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_I4x4</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_vp7</name> <operator>||</operator> <name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>VP8_MVMODE_SPLIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nnz_pred</name> <operator>=</operator> <name><name>t_nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>l_nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>nnz</name> <operator>=</operator> <call><name>decode_block_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block_dc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>nnz_pred</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>segment</name></expr>]</index></name><operator>.</operator><name>luma_dc_qmul</name></expr></argument>,
<argument><expr><name>ff_zigzag_scan</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l_nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>t_nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>nnz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_vp7</name> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>&gt;</operator> <name>MODE_I4x4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nnz</name> <operator>|=</operator> <call><name>inter_predict_dc</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block_dc</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_dc_pred</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nnz_total</name> <operator>+=</operator> <name>nnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_dc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_luma_dc_wht_dc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block_dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_luma_dc_wht</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block_dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>luma_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>luma_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nnz_pred</name> <operator>=</operator> <name><name>l_nnz</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name><name>t_nnz</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnz</name> <operator>=</operator> <call><name>decode_block_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><name>luma_ctx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>luma_start</name></expr></argument>, <argument><expr><name>nnz_pred</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>segment</name></expr>]</index></name><operator>.</operator><name>luma_qmul</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>nnz</name> <operator>+</operator> <name>block_dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t_nnz</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>l_nnz</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>nnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnz_total</name> <operator>+=</operator> <name>nnz</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nnz_pred</name> <operator>=</operator> <name><name>l_nnz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr>]</index></name> <operator>+</operator> <name><name>t_nnz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnz</name> <operator>=</operator> <call><name>decode_block_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nnz_pred</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmat</name><index>[<expr><name>segment</name></expr>]</index></name><operator>.</operator><name>chroma_qmul</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>nnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t_nnz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>l_nnz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>nnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnz_total</name> <operator>+=</operator> <name>nnz</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nnz_total</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>backup_mb_border</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>xchg_mb_border</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xchg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border_m1</name> <init>= <expr><name>top_border</name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>src_y</name> <operator>-=</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cb</name> <operator>-=</operator> <name>uvlinesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cr</name> <operator>-=</operator> <name>uvlinesize</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCHG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>xchg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (xchg) AV_SWAP64(b, a); else AV_COPY64(b, a); } while (0)</cpp:value></cpp:define>







<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&lt;</operator> <name>mb_width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name> <operator>||</operator> <operator>!</operator><name>mb_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>check_dc_pred8x8_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>TOP_DC_PRED8x8</name></expr> </then><else>: <expr><name>DC_128_PRED8x8</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>mode</name></expr> </then><else>: <expr><name>LEFT_DC_PRED8x8</name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>check_tm_pred8x8_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>VERT_PRED8x8</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED8x8</name></expr> </then><else>: <expr><name>DC_129_PRED8x8</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>mode</name></expr> </then><else>: <expr><name>HOR_PRED8x8</name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>check_intra_pred8x8_mode_emuedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DC_PRED8x8</name></expr>:</case>
<return>return <expr><call><name>check_dc_pred8x8_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VERT_PRED8x8</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>!</operator><name>mb_y</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED8x8</name></expr> </then><else>: <expr><name>DC_127_PRED8x8</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>mode</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>HOR_PRED8x8</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>!</operator><name>mb_x</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED8x8</name></expr> </then><else>: <expr><name>DC_129_PRED8x8</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>mode</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PLANE_PRED8x8</name></expr>:</case> 
<return>return <expr><call><name>check_tm_pred8x8_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>vp7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>check_tm_pred4x4_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_x</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>VERT_VP8_PRED</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED</name></expr> </then><else>: <expr><name>DC_129_PRED</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><name>mode</name></expr> </then><else>: <expr><name>HOR_VP8_PRED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>check_intra_pred4x4_mode_emuedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>copy_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VERT_PRED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_x</name> <operator>&amp;&amp;</operator> <name>mb_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>copy_buf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>DIAG_DOWN_LEFT_PRED</name></expr>:</case>
<case>case <expr><name>VERT_LEFT_PRED</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>!</operator><name>mb_y</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED</name></expr> </then><else>: <expr><name>DC_127_PRED</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>mode</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>HOR_PRED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>copy_buf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>HOR_UP_PRED</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>!</operator><name>mb_x</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>vp7</name></expr> ?</condition><then> <expr><name>DC_128_PRED</name></expr> </then><else>: <expr><name>DC_129_PRED</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>mode</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>TM_VP8_PRED</name></expr>:</case>
<return>return <expr><call><name>check_tm_pred4x4_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>vp7</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DC_PRED</name></expr>:</case> 

<case>case <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>:</case>
<case>case <expr><name>VERT_RIGHT_PRED</name></expr>:</case>
<case>case <expr><name>HOR_DOWN_PRED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_y</name> <operator>||</operator> <operator>!</operator><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>copy_buf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>intra_predict</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>nnz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tr</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name> <operator>||</operator> <operator>!</operator><name>mb_y</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>thread_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>&lt;</operator> <name>MODE_I4x4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>check_intra_pred8x8_mode_emuedge</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred16x16</name><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra4x4</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>intra4x4_pred_mode_mb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>lo</name> <init>= <expr><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">127</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>hi</name> <init>= <expr><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">129</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tr_top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>lo</name></expr>, <expr><name>lo</name></expr>, <expr><name>lo</name></expr>, <expr><name>lo</name></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tr_right</name> <init>= <expr><name>ptr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tr</name> <operator>=</operator> <name><name>tr_right</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tr_right</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>topright</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>copy_dst</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <name>tr_top</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <name>tr_right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>check_intra_pred4x4_mode_emuedge</name><argument_list>(<argument><expr><name><name>intra4x4</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <name>x</name></expr></argument>,
<argument><expr><name>mb_y</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>copy_dst</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mb_y</name> <operator>+</operator> <name>y</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>lo</name> <operator>*</operator> <literal type="number">0x01010101U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mb_x</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mb_x</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator>
<name><name>copy_dst</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator>
<name><name>copy_dst</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator>
<name><name>copy_dst</name><index>[<expr><literal type="number">35</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy_dst</name><index>[<expr><literal type="number">35</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred4x4</name><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>topright</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>copy_dst</name> <operator>+</operator> <literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_dc_add</name></name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_add</name></name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>topright</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>intra4x4</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>check_intra_pred8x8_mode_emuedge</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name></expr></argument>,
<argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8</name><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8</name><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name> <operator>||</operator> <operator>!</operator><name>mb_y</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>thread_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>subpel_idx</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

















<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>vp8_mc_luma</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>vp8_mc_func</name></type> <name><name>mc_func</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name> <init>= <expr><name>linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>mx_idx</name> <init>= <expr><name><name>subpel_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>my_idx</name> <init>= <expr><name><name>subpel_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x_off</name> <operator>+=</operator> <name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>+=</operator> <name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>y_off</name> <operator>+</operator> <name>block_h</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x_off</name> <operator>&lt;</operator> <name>mx_idx</name> <operator>||</operator> <name>x_off</name> <operator>&gt;=</operator> <name>width</name> <operator>-</operator> <name>block_w</name> <operator>-</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name> <operator>||</operator>
<name>y_off</name> <operator>&lt;</operator> <name>my_idx</name> <operator>||</operator> <name>y_off</name> <operator>&gt;=</operator> <name>height</name> <operator>-</operator> <name>block_h</name> <operator>-</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src</name> <operator>-</operator> <name>my_idx</name> <operator>*</operator> <name>linesize</name> <operator>-</operator> <name>mx_idx</name></expr></argument>,
<argument><expr><name>EDGE_EMU_LINESIZE</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>block_w</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block_h</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr></argument>,
<argument><expr><name>x_off</name> <operator>-</operator> <name>mx_idx</name></expr></argument>, <argument><expr><name>y_off</name> <operator>-</operator> <name>my_idx</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <name>mx_idx</name> <operator>+</operator> <name>EDGE_EMU_LINESIZE</name> <operator>*</operator> <name>my_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_linesize</name> <operator>=</operator> <name>EDGE_EMU_LINESIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><name>my_idx</name></expr>]</index><index>[<expr><name>mx_idx</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src</name><operator>,</operator> <name>src_linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>y_off</name> <operator>+</operator> <name>block_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src</name> <operator>+</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name><operator>,</operator>
<name>linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>vp8_mc_chroma</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>vp8_mc_func</name></type> <name><name>mc_func</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>mx_idx</name> <init>= <expr><name><name>subpel_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>my_idx</name> <init>= <expr><name><name>subpel_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x_off</name> <operator>+=</operator> <name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>+=</operator> <name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>y_off</name> <operator>+</operator> <name>block_h</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x_off</name> <operator>&lt;</operator> <name>mx_idx</name> <operator>||</operator> <name>x_off</name> <operator>&gt;=</operator> <name>width</name> <operator>-</operator> <name>block_w</name> <operator>-</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name> <operator>||</operator>
<name>y_off</name> <operator>&lt;</operator> <name>my_idx</name> <operator>||</operator> <name>y_off</name> <operator>&gt;=</operator> <name>height</name> <operator>-</operator> <name>block_h</name> <operator>-</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src1</name> <operator>-</operator> <name>my_idx</name> <operator>*</operator> <name>linesize</name> <operator>-</operator> <name>mx_idx</name></expr></argument>,
<argument><expr><name>EDGE_EMU_LINESIZE</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>block_w</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block_h</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr></argument>,
<argument><expr><name>x_off</name> <operator>-</operator> <name>mx_idx</name></expr></argument>, <argument><expr><name>y_off</name> <operator>-</operator> <name>my_idx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <name>mx_idx</name> <operator>+</operator> <name>EDGE_EMU_LINESIZE</name> <operator>*</operator> <name>my_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><name>my_idx</name></expr>]</index><index>[<expr><name>mx_idx</name></expr>]</index></name><operator>(</operator><name>dst1</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src1</name><operator>,</operator> <name>EDGE_EMU_LINESIZE</name><operator>,</operator> <name>block_h</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src2</name> <operator>-</operator> <name>my_idx</name> <operator>*</operator> <name>linesize</name> <operator>-</operator> <name>mx_idx</name></expr></argument>,
<argument><expr><name>EDGE_EMU_LINESIZE</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>block_w</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block_h</name> <operator>+</operator> <name><name>subpel_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>my</name></expr>]</index></name></expr></argument>,
<argument><expr><name>x_off</name> <operator>-</operator> <name>mx_idx</name></expr></argument>, <argument><expr><name>y_off</name> <operator>-</operator> <name>my_idx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <name>mx_idx</name> <operator>+</operator> <name>EDGE_EMU_LINESIZE</name> <operator>*</operator> <name>my_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><name>my_idx</name></expr>]</index><index>[<expr><name>mx_idx</name></expr>]</index></name><operator>(</operator><name>dst2</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src2</name><operator>,</operator> <name>EDGE_EMU_LINESIZE</name><operator>,</operator> <name>block_h</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><name>my_idx</name></expr>]</index><index>[<expr><name>mx_idx</name></expr>]</index></name><operator>(</operator><name>dst1</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src1</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><name>my_idx</name></expr>]</index><index>[<expr><name>mx_idx</name></expr>]</index></name><operator>(</operator><name>dst2</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src2</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>y_off</name> <operator>+</operator> <name>block_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst1</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src1</name> <operator>+</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc_func</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst2</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>src2</name> <operator>+</operator> <name>y_off</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x_off</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>block_h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>vp8_mc_part</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>ref_frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bx_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56mv</name></type> <name>uvmv</name> <init>= <expr><operator>*</operator><name>mv</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vp8_mc_luma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>by_off</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <name>bx_off</name></expr></argument>,
<argument><expr><name>ref_frame</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>, <argument><expr><name>x_off</name> <operator>+</operator> <name>bx_off</name></expr></argument>, <argument><expr><name>y_off</name> <operator>+</operator> <name>by_off</name></expr></argument>,
<argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><name>block_w</name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>x</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>y</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bx_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>by_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_w</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_h</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_chroma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>by_off</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>bx_off</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>by_off</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>bx_off</name></expr></argument>, <argument><expr><name>ref_frame</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>uvmv</name></expr></argument>, <argument><expr><name>x_off</name> <operator>+</operator> <name>bx_off</name></expr></argument>, <argument><expr><name>y_off</name> <operator>+</operator> <name>by_off</name></expr></argument>,
<argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>block_w</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>prefetch_motion</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_xy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>ref</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>mb_xy</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_off</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_off</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>x_off</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name><operator>.</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>y_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>ref</name></expr>]</index></name><operator>-&gt;</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>mx</name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>inter_predict</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_off</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_off</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name></expr>]</index></name><operator>-&gt;</operator><name>tf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>bmv</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>bmv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>partitioning</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VP8_SPLITMVMODE_NONE</name></expr>:</case>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VP8_SPLITMVMODE_4x4</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name></type> <name>uvmv</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_mc_luma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>x_off</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>y_off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>x_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr> ]</index></name><operator>.</operator><name>x</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr> ]</index></name><operator>.</operator><name>x</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr> ]</index></name><operator>.</operator><name>y</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr> ]</index></name><operator>.</operator><name>y</name> <operator>+</operator>
<name><name>mb</name><operator>-&gt;</operator><name>bmv</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>uvmv</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>FF_SIGNBIT</name><argument_list>(<argument><expr><name><name>uvmv</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>uvmv</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>FF_SIGNBIT</name><argument_list>(<argument><expr><name><name>uvmv</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>x</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvmv</name><operator>.</operator><name>y</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vp8_mc_chroma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>uvmv</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>x_off</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>y_off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VP8_SPLITMVMODE_16x8</name></expr>:</case>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VP8_SPLITMVMODE_8x16</name></expr>:</case>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VP8_SPLITMVMODE_8x8</name></expr>:</case>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp8_mc_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>idct_mb</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_I4x4</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_dst</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nnz4</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz4</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01010101</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>nnz4</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_dc_add</name></name><argument_list>(<argument><expr><name>y_dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>nnz4</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_add</name></name><argument_list>(<argument><expr><name>y_dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nnz4</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nnz4</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_dc_add4y</name></name><argument_list>(<argument><expr><name>y_dst</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y_dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nnz4</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz4</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ch_dst</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz4</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01010101</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>nnz4</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_dc_add</name></name><argument_list>(<argument><expr><name>ch_dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>ch</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>nnz4</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_add</name></name><argument_list>(<argument><expr><name>ch_dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>ch</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nnz4</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nnz4</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>chroma_idct_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ch_dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_idct_dc_add4uv</name></name><argument_list>(<argument><expr><name>ch_dst</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>chroma_idct_end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>filter_level_for_mb</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>,
<parameter><decl><type><name>VP8FilterStrength</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>interior_limit</name></decl>, <decl><type ref="prev"/><name>filter_level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_level</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>filter_level</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>segment</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter_level</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>filter_level</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_level</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>ref_frame</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_level</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter_level</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>filter_level</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>interior_limit</name> <operator>=</operator> <name>filter_level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interior_limit</name> <operator>&gt;&gt;=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interior_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>interior_limit</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>interior_limit</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>interior_limit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>filter_level</name></name> <operator>=</operator> <name>filter_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>inner_limit</name></name> <operator>=</operator> <name>interior_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>inner_filter</name></name> <operator>=</operator> <name>is_vp7</name> <operator>||</operator> <operator>!</operator><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_I4x4</name> <operator>||</operator>
<name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>VP8_MVMODE_SPLIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>filter_mb</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>VP8FilterStrength</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbedge_lim</name></decl>, <decl><type ref="prev"/><name>bedge_lim_y</name></decl>, <decl><type ref="prev"/><name>bedge_lim_uv</name></decl>, <decl><type ref="prev"/><name>hev_thresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_level</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>filter_level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inner_limit</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>inner_limit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inner_filter</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>inner_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hev_thresh_lut</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter_level</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bedge_lim_y</name> <operator>=</operator> <name>filter_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bedge_lim_uv</name> <operator>=</operator> <name>filter_level</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mbedge_lim</name> <operator>=</operator> <name>filter_level</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bedge_lim_y</name> <operator>=</operator>
<name>bedge_lim_uv</name> <operator>=</operator> <name>filter_level</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>inner_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbedge_lim</name> <operator>=</operator> <name>bedge_lim_y</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hev_thresh</name> <operator>=</operator> <name><name>hev_thresh_lut</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>]</index><index>[<expr><name>filter_level</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter16y</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>mbedge_lim</name></expr></argument>, <argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter8uv</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>,
<argument><expr><name>mbedge_lim</name></expr></argument>, <argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_LOOP_FILTER_16Y_INNER</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (cond &amp;&amp; inner_filter) { s-&gt;vp8dsp.vp8_h_loop_filter16y_inner(dst[0] + 4, linesize, bedge_lim_y, inner_limit, hev_thresh); s-&gt;vp8dsp.vp8_h_loop_filter16y_inner(dst[0] + 8, linesize, bedge_lim_y, inner_limit, hev_thresh); s-&gt;vp8dsp.vp8_h_loop_filter16y_inner(dst[0] + 12, linesize, bedge_lim_y, inner_limit, hev_thresh); s-&gt;vp8dsp.vp8_h_loop_filter8uv_inner(dst[1] + 4, dst[2] + 4, uvlinesize, bedge_lim_uv, inner_limit, hev_thresh); }</cpp:value></cpp:define>















<macro><name>H_LOOP_FILTER_16Y_INNER</name><argument_list>(<argument>!is_vp7</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>mb_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter16y</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>mbedge_lim</name></expr></argument>, <argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter8uv</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>,
<argument><expr><name>mbedge_lim</name></expr></argument>, <argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inner_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter16y_inner</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim_y</name></expr></argument>,
<argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter16y_inner</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim_y</name></expr></argument>,
<argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter16y_inner</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim_y</name></expr></argument>,
<argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter8uv_inner</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bedge_lim_uv</name></expr></argument>,
<argument><expr><name>inner_limit</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>H_LOOP_FILTER_16Y_INNER</name><argument_list>(<argument>is_vp7</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>filter_mb_simple</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>VP8FilterStrength</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbedge_lim</name></decl>, <decl><type ref="prev"/><name>bedge_lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_level</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>filter_level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inner_limit</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>inner_limit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inner_filter</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>inner_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter_level</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bedge_lim</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>filter_level</name> <operator>+</operator> <name>inner_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbedge_lim</name> <operator>=</operator> <name>bedge_lim</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>mbedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inner_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_h_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>mbedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inner_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name><operator>.</operator><name>vp8_v_loop_filter_simple</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bedge_lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARGIN</name></cpp:macro> <cpp:value>(16 &lt;&lt; 2)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>vp78_decode_mv_mb_modes</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>curframe</name></decl></parameter>,
<parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>prev_frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>MARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>MARGIN</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_left</name></name></expr></argument>, <argument><expr><name>DC_PRED</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>MARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>MARGIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb_xy</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>(</operator><name>mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></expr></argument>,
<argument><expr><name>DC_PRED</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_mb_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name></name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>curframe</name><operator>-&gt;</operator><name>seg_map</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>mb_xy</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>prev_frame</name> <operator>&amp;&amp;</operator> <name><name>prev_frame</name><operator>-&gt;</operator><name>seg_map</name></name></expr> ?</condition><then>
<expr><name><name>prev_frame</name><operator>-&gt;</operator><name>seg_map</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>mb_xy</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_mv_mb_modes</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>cur_frame</name></decl></parameter>,
<parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>prev_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_mv_mb_modes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cur_frame</name></expr></argument>, <argument><expr><name>prev_frame</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_mv_mb_modes</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>cur_frame</name></decl></parameter>,
<parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>prev_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_mv_mb_modes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cur_frame</name></expr></argument>, <argument><expr><name>prev_frame</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_thread_pos</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>otd</name></type></parameter>, <parameter><type><name>mb_x_check</name></type></parameter>, <parameter><type><name>mb_y_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int tmp = (mb_y_check &lt;&lt; 16) | (mb_x_check &amp; 0xFFFF); if (atomic_load(&amp;otd-&gt;thread_mb_pos) &lt; tmp) { pthread_mutex_lock(&amp;otd-&gt;lock); atomic_store(&amp;td-&gt;wait_mb_pos, tmp); do { if (atomic_load(&amp;otd-&gt;thread_mb_pos) &gt;= tmp) break; pthread_cond_wait(&amp;otd-&gt;cond, &amp;otd-&gt;lock); } while (1); atomic_store(&amp;td-&gt;wait_mb_pos, INT_MAX); pthread_mutex_unlock(&amp;otd-&gt;lock); } } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_pos</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mb_y</name></type></parameter>, <parameter><type><name>mb_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int pos = (mb_y &lt;&lt; 16) | (mb_x &amp; 0xFFFF); int sliced_threading = (avctx-&gt;active_thread_type == FF_THREAD_SLICE) &amp;&amp; (num_jobs &gt; 1); int is_null = !next_td || !prev_td; int pos_check = (is_null) ? 1 : (next_td != td &amp;&amp; pos &gt;= atomic_load(&amp;next_td-&gt;wait_mb_pos)) || (prev_td != td &amp;&amp; pos &gt;= atomic_load(&amp;prev_td-&gt;wait_mb_pos)); atomic_store(&amp;td-&gt;thread_mb_pos, pos); if (sliced_threading &amp;&amp; pos_check) { pthread_mutex_lock(&amp;td-&gt;lock); pthread_cond_broadcast(&amp;td-&gt;cond); pthread_mutex_unlock(&amp;td-&gt;lock); } } while (0)</cpp:value></cpp:define>















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_thread_pos</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>otd</name></type></parameter>, <parameter><type><name>mb_x_check</name></type></parameter>, <parameter><type><name>mb_y_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_pos</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mb_y</name></type></parameter>, <parameter><type><name>mb_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>decode_mb_row_no_filter</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>prev_td</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_td</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>threadnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>thread_mb_pos</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_xy</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_jobs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_jobs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>curframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_frame</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeff_partition</name><index>[<expr><name>mb_y</name> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>,
<expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>,
<expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_td</name> <operator>=</operator> <name>td</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_td</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><operator>(</operator><name>jobnr</name> <operator>+</operator> <name>num_jobs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_jobs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_td</name> <operator>=</operator> <name>td</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_td</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_jobs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>prev_frame</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_frame</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>mb_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_left</name></name></expr></argument>, <argument><expr><name>DC_PRED</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_vp7</name> <operator>||</operator> <name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_nnz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_nnz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>MARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>MARGIN</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb_xy</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_td</name> <operator>!=</operator> <name>td</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>threadnr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_thread_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>prev_td</name></expr></argument>,
<argument><expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>mb_y</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>check_thread_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>prev_td</name></expr></argument>,
<argument><expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><name>mb_y</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>is_vp7</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_mb_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name></name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>curframe</name><operator>-&gt;</operator><name>seg_map</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>mb_xy</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>prev_frame</name> <operator>&amp;&amp;</operator> <name><name>prev_frame</name><operator>-&gt;</operator><name>seg_map</name></name></expr> ?</condition><then>
<expr><name><name>prev_frame</name><operator>-&gt;</operator><name>seg_map</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>mb_xy</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefetch_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>VP56_FRAME_PREVIOUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_mb_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name><index>[<expr><name>mb_x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_nnz</name></name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>&lt;=</operator> <name>MODE_I4x4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>intra_predict</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>inter_predict</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prefetch_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mb</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>idct_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_nnz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name><index>[<expr><name>mb_x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_I4x4</name> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>VP8_MVMODE_SPLIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>left_nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name><index>[<expr><name>mb_x</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_level_for_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>filter_strength</name><index>[<expr><name>mb_x</name></expr>]</index></name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name> <operator>&amp;&amp;</operator> <name>num_jobs</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>threadnr</name> <operator>==</operator> <name>num_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>backup_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>backup_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prefetch_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>update_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_mb_row_no_filter</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decode_mb_row_no_filter</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_mb_row_no_filter</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decode_mb_row_no_filter</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_row</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>threadnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>thread_mb_pos</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_jobs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_jobs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>curframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>prev_td</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>curframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>,
<expr><name><name>curframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>,
<expr><name><name>curframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>mb_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_td</name> <operator>=</operator> <name>td</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_td</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><operator>(</operator><name>jobnr</name> <operator>+</operator> <name>num_jobs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_jobs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_td</name> <operator>=</operator> <name>td</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_td</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_jobs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VP8FilterStrength</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>filter_strength</name><index>[<expr><name>mb_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_td</name> <operator>!=</operator> <name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_thread_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>prev_td</name></expr></argument>,
<argument><expr><operator>(</operator><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next_td</name> <operator>!=</operator> <name>td</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>next_td</name> <operator>!=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_thread_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>next_td</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_jobs</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>backup_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>backup_mb_border</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_border</name><index>[<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_mb_simple</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>is_vp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>mb_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_filter_mb_row</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_mb_row</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_filter_mb_row</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_mb_row</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>vp78_decode_mb_row_sliced</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>next_td</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_td</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>curframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name></decl>, <decl><type ref="prev"/><name>num_jobs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_jobs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>thread_nr</name></name> <operator>=</operator> <name>threadnr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>MARGIN</name> <operator>-</operator> <literal type="number">64</literal> <operator>*</operator> <name>threadnr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>MARGIN</name> <operator>-</operator> <literal type="number">64</literal> <operator>*</operator> <name>threadnr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <name>jobnr</name></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name> <operator>+=</operator> <name>num_jobs</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>thread_mb_pos</name></name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>decode_mb_row_no_filter</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter_mb_row</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">64</literal> <operator>*</operator> <name>num_jobs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">64</literal> <operator>*</operator> <name>num_jobs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curframe</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_mb_row_sliced</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_mb_row_sliced</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_mb_row_sliced</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_mb_row_sliced</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>vp78_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>referenced</name></decl>, <decl><type ref="prev"/><name>num_jobs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>skip_thresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>av_uninit</name><argument_list>(<argument><expr><name>curframe</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp7_decode_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_decode_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>actually_webp</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_vp7</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>get_pixel_format</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_frame</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>referenced</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>update_last</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>==</operator> <name>VP56_FRAME_CURRENT</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name> <operator>==</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_thresh</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>referenced</name></expr> ?</condition><then> <expr><name>AVDISCARD_NONREF</name></expr>
</then><else>: <expr><ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><name>AVDISCARD_NONKEY</name></expr>
</then><else>: <expr><name>AVDISCARD_ALL</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>skip_thresh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>invisible</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip_decode</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&lt;</operator> <name>skip_thresh</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>prev_frame</name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_release_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>curframe</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name> <operator>=</operator> <call><name>vp8_find_free_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fullrange</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>||</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>||</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Discarding interframe without a prior keyframe!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr>
</then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp8_alloc_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curframe</name></expr></argument>, <argument><expr><name>referenced</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name> <operator>!=</operator> <name>VP56_FRAME_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>update_altref</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name> <operator>!=</operator> <name>VP56_FRAME_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>update_golden</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_last</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>=</operator> <name>curframe</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name> <operator>=</operator> <name>curframe</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>start_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>end_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>=</operator> <name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>top_nnz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra4x4_pred_mode_top</name></name></expr></argument>, <argument><expr><name>DC_PRED</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_layout</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>prev_frame</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_frame</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp7_decode_mv_mb_modes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>curframe</name></expr></argument>, <argument><expr><name>prev_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_decode_mv_mb_modes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>curframe</name></expr></argument>, <argument><expr><name>prev_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_jobs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_jobs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_jobs</name></name> <operator>=</operator> <name>num_jobs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>=</operator> <name>curframe</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>prev_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_min</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>MARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bounds</name><operator>.</operator><name>mv_max</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>MARGIN</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>thread_mb_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>wait_mb_pos</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vp7_decode_mb_row_sliced</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>num_jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vp8_decode_mb_row_sliced</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>num_jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curframe</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>skip_decode</name>:</label>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>update_probabilities</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>invisible</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>curframe</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vp8_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp8_decode_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vp8_decode_flush_impl</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp8_init_frames</name><parameter_list>(<parameter><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>int</name></type> <name>vp78_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vp7</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp78dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_VP7_DECODER</name> <operator>&amp;&amp;</operator> <name>is_vp7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_h264_pred_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hpc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_VP7</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp7dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_mb_row_no_filter</name></name> <operator>=</operator> <name>vp7_decode_mb_row_no_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_mb_row</name></name> <operator>=</operator> <name>vp7_filter_mb_row</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_VP8_DECODER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_vp7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_h264_pred_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hpc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_VP8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp8dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_mb_row_no_filter</name></name> <operator>=</operator> <name>vp8_decode_mb_row_no_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_mb_row</name></name> <operator>=</operator> <name>vp8_filter_mb_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>, <argument><expr><name>ff_zigzag_scan</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp8_init_frames</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vp8_decode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vp7_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp8_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vp78_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp8_decode_init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp8_init_frames</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vp8_decode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REBASE</name><parameter_list>(<parameter><type><name>pic</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((pic) ? (pic) - &amp;s_src-&gt;frames[0] + &amp;s-&gt;frames[0] : NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_decode_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s_src</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks_base</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s_src</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator> <name><name>s_src</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>prob</name><index>[<expr><operator>!</operator><name><name>s_src</name><operator>-&gt;</operator><name>update_probabilities</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>segmentation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lf_delta</name></name> <operator>=</operator> <name><name>s_src</name><operator>-&gt;</operator><name>lf_delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name></name></expr></argument>, <argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>sign_bias</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sign_bias</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s_src</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vp8_ref_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s_src</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>REBASE</name><argument_list>(<argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>REBASE</name><argument_list>(<argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>REBASE</name><argument_list>(<argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>REBASE</name><argument_list>(<argument><expr><name><name>s_src</name><operator>-&gt;</operator><name>next_framep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp7_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp7"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP7"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP7</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP8Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp7_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vp8_decode_free</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vp7_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vp8_decode_flush</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp8_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp8"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP8"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP8</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP8Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_vp8_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vp8_decode_free</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_vp8_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator>
<name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vp8_decode_flush</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>vp8_decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>vp8_decode_update_thread_context</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>hw_configs</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecHWConfigInternal</name><operator>*</operator><index>[]</index><operator>)</operator> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_VAAPI_HWACCEL</name></expr></cpp:if>
<expr><call><name>HWACCEL_VAAPI</name><argument_list>(<argument><expr><name>vp8</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_NVDEC_HWACCEL</name></expr></cpp:if>
<expr><call><name>HWACCEL_NVDEC</name><argument_list>(<argument><expr><name>vp8</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
