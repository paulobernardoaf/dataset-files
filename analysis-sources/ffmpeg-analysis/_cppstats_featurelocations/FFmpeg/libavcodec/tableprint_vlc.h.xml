<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tableprint_vlc.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_TABLEPRINT_VLC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_TABLEPRINT_VLC_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMPEG_CONFIG_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_LOG_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_log</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_dlog</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_MEM_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_malloc</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_malloc_array</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_realloc_f</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_free</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_freep</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_AVCODEC_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_INTERNAL_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_INPUT_BUFFER_PADDING_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avpriv_request_sample</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathtables.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/reverse.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitstream.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_DEFINE2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_##type##_array</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_DEFINE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPLACE_DEFINE2(type)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>write_VLC_TYPE_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VLC_TYPE</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<function_decl><type><name>REPLACE_DEFINE</name></type>(<name>VLC_TYPE</name>)<parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></function>

<macro><name>WRITE_2D_FUNC</name><argument_list>(<argument>VLC_TYPE</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>write_vlc_type</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VLC</name> <operator>*</operator><name>vlc</name></expr></argument>, <argument><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>base_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>base_table_name</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" .bits = %i,\n"</literal></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" .table = (VLC_TYPE (*)[2])(%s + 0x%x),\n"</literal></expr></argument>, <argument><expr><name>base_table_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>-</operator> <name>base_table</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" .table_size = 0x%x,\n"</literal></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" .table_allocated = 0x%x,\n"</literal></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_VLC_TYPE</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>base_table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { printf(prefix" VLC "#name" = {\n"); write_vlc_type(&amp;name, base_table, #base_table); printf("};\n"); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_VLC_ARRAY</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>base_table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; const size_t array_size = FF_ARRAY_ELEMS(name); printf(prefix" VLC "#name"[%"FMT"] = {{\n", array_size); for (i = 0; i &lt; array_size; i++) { write_vlc_type(name + i, base_table, #base_table); if (i != array_size - 1) printf("}, {\n"); } printf("}};\n"); } while(0)</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
