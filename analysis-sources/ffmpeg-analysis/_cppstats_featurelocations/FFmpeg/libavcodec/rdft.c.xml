<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rdft.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdft.h"</cpp:file></cpp:include>










<function><type><specifier>static</specifier> <name>void</name></type> <name>rdft_calc_c</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>ev</name></decl>, <decl><type ref="prev"/><name>od</name></decl>, <decl><type ref="prev"/><name>odsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>k1</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>k2</name> <init>= <expr><literal type="number">0.5</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tcos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tsin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>re</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>.</operator><name>re</name></name><operator>+</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>.</operator><name>re</name></name><operator>-</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDFT_UNMANGLE</name><parameter_list>(<parameter><type><name>sign0</name></type></parameter>, <parameter><type><name>sign1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = 1; i &lt; (n&gt;&gt;2); i++) { i1 = 2*i; i2 = n-i1; ev.re = k1*(data[i1 ]+data[i2 ]); od.im = k2*(data[i2 ]-data[i1 ]); ev.im = k1*(data[i1+1]-data[i2+1]); od.re = k2*(data[i1+1]+data[i2+1]); odsum.re = od.re*tcos[i] sign0 od.im*tsin[i]; odsum.im = od.im*tcos[i] sign1 od.re*tsin[i]; data[i1 ] = ev.re + odsum.re; data[i1+1] = ev.im + odsum.im; data[i2 ] = ev.re - odsum.re; data[i2+1] = odsum.im - ev.im; }</cpp:value></cpp:define>

















<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>negative_sin</name></name></expr>)</condition> <block>{<block_content>
<macro><name>RDFT_UNMANGLE</name><argument_list>(<argument>+</argument>,<argument>-</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>RDFT_UNMANGLE</name><argument_list>(<argument>-</argument>,<argument>+</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>sign_convention</name></name><operator>*</operator><name><name>data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>k1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_rdft_init</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RDFTransformType</name></name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name> <operator>=</operator> <name>trans</name> <operator>==</operator> <name>IDFT_C2R</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>DFT_C2R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sign_convention</name></name> <operator>=</operator> <ternary><condition><expr><name>trans</name> <operator>==</operator> <name>IDFT_R2C</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>DFT_C2R</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>negative_sin</name></name> <operator>=</operator> <name>trans</name> <operator>==</operator> <name>DFT_C2R</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>DFT_R2C</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nbits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>nbits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>trans</name> <operator>==</operator> <name>IDFT_C2R</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>IDFT_R2C</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_ff_cos_tabs</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name> <operator>=</operator> <name><name>ff_cos_tabs</name><index>[<expr><name>nbits</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name> <operator>=</operator> <name><name>ff_cos_tabs</name><index>[<expr><name>nbits</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_calc</name></name> <operator>=</operator> <name>rdft_calc_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_rdft_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rdft_end</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
