<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mimic.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIMIC_HEADER_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MimicContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>num_vblocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num_hblocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>swap_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name><name>frames</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dct_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanTable</name></type> <name>scantable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bbdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>next_cur_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_prev_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>MimicContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>huffcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000000a</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x0000000b</literal></expr>,
<expr><literal type="number">0x0000001b</literal></expr>, <expr><literal type="number">0x00000038</literal></expr>, <expr><literal type="number">0x00000078</literal></expr>, <expr><literal type="number">0x00000079</literal></expr>, <expr><literal type="number">0x0000007a</literal></expr>, <expr><literal type="number">0x000000f9</literal></expr>,
<expr><literal type="number">0x000000fa</literal></expr>, <expr><literal type="number">0x000003fb</literal></expr>, <expr><literal type="number">0x000007f8</literal></expr>, <expr><literal type="number">0x000007f9</literal></expr>, <expr><literal type="number">0x000007fa</literal></expr>, <expr><literal type="number">0x000007fb</literal></expr>,
<expr><literal type="number">0x00000ff8</literal></expr>, <expr><literal type="number">0x00000ff9</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00000039</literal></expr>, <expr><literal type="number">0x0000007b</literal></expr>, <expr><literal type="number">0x000000fb</literal></expr>,
<expr><literal type="number">0x000001f8</literal></expr>, <expr><literal type="number">0x000001f9</literal></expr>, <expr><literal type="number">0x00000ffa</literal></expr>, <expr><literal type="number">0x00000ffb</literal></expr>, <expr><literal type="number">0x00001ff8</literal></expr>, <expr><literal type="number">0x00001ff9</literal></expr>,
<expr><literal type="number">0x00001ffa</literal></expr>, <expr><literal type="number">0x00001ffb</literal></expr>, <expr><literal type="number">0x00003ff8</literal></expr>, <expr><literal type="number">0x00003ff9</literal></expr>, <expr><literal type="number">0x00003ffa</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
<expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x0000003a</literal></expr>, <expr><literal type="number">0x000001fa</literal></expr>, <expr><literal type="number">0x00003ffb</literal></expr>, <expr><literal type="number">0x00007ff8</literal></expr>, <expr><literal type="number">0x00007ff9</literal></expr>,
<expr><literal type="number">0x00007ffa</literal></expr>, <expr><literal type="number">0x00007ffb</literal></expr>, <expr><literal type="number">0x0000fff8</literal></expr>, <expr><literal type="number">0x0000fff9</literal></expr>, <expr><literal type="number">0x0000fffa</literal></expr>, <expr><literal type="number">0x0000fffb</literal></expr>,
<expr><literal type="number">0x0001fff8</literal></expr>, <expr><literal type="number">0x0001fff9</literal></expr>, <expr><literal type="number">0x0001fffa</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x0000000c</literal></expr>, <expr><literal type="number">0x000000f8</literal></expr>,
<expr><literal type="number">0x000001fb</literal></expr>, <expr><literal type="number">0x0001fffb</literal></expr>, <expr><literal type="number">0x0003fff8</literal></expr>, <expr><literal type="number">0x0003fff9</literal></expr>, <expr><literal type="number">0x0003fffa</literal></expr>, <expr><literal type="number">0x0003fffb</literal></expr>,
<expr><literal type="number">0x0007fff8</literal></expr>, <expr><literal type="number">0x0007fff9</literal></expr>, <expr><literal type="number">0x0007fffa</literal></expr>, <expr><literal type="number">0x0007fffb</literal></expr>, <expr><literal type="number">0x000ffff8</literal></expr>, <expr><literal type="number">0x000ffff9</literal></expr>,
<expr><literal type="number">0x000ffffa</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x0000001a</literal></expr>, <expr><literal type="number">0x000003f8</literal></expr>, <expr><literal type="number">0x000ffffb</literal></expr>, <expr><literal type="number">0x001ffff8</literal></expr>,
<expr><literal type="number">0x001ffff9</literal></expr>, <expr><literal type="number">0x001ffffa</literal></expr>, <expr><literal type="number">0x001ffffb</literal></expr>, <expr><literal type="number">0x003ffff8</literal></expr>, <expr><literal type="number">0x003ffff9</literal></expr>, <expr><literal type="number">0x003ffffa</literal></expr>,
<expr><literal type="number">0x003ffffb</literal></expr>, <expr><literal type="number">0x007ffff8</literal></expr>, <expr><literal type="number">0x007ffff9</literal></expr>, <expr><literal type="number">0x007ffffa</literal></expr>, <expr><literal type="number">0x007ffffb</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
<expr><literal type="number">0x0000003b</literal></expr>, <expr><literal type="number">0x000003f9</literal></expr>, <expr><literal type="number">0x00fffff8</literal></expr>, <expr><literal type="number">0x00fffff9</literal></expr>, <expr><literal type="number">0x00fffffa</literal></expr>, <expr><literal type="number">0x00fffffb</literal></expr>,
<expr><literal type="number">0x01fffff8</literal></expr>, <expr><literal type="number">0x01fffff9</literal></expr>, <expr><literal type="number">0x01fffffa</literal></expr>, <expr><literal type="number">0x01fffffb</literal></expr>, <expr><literal type="number">0x03fffff8</literal></expr>, <expr><literal type="number">0x03fffff9</literal></expr>,
<expr><literal type="number">0x03fffffa</literal></expr>, <expr><literal type="number">0x03fffffb</literal></expr>, <expr><literal type="number">0x07fffff8</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x000003fa</literal></expr>, <expr><literal type="number">0x07fffff9</literal></expr>,
<expr><literal type="number">0x07fffffa</literal></expr>, <expr><literal type="number">0x07fffffb</literal></expr>, <expr><literal type="number">0x0ffffff8</literal></expr>, <expr><literal type="number">0x0ffffff9</literal></expr>, <expr><literal type="number">0x0ffffffa</literal></expr>, <expr><literal type="number">0x0ffffffb</literal></expr>,
<expr><literal type="number">0x1ffffff8</literal></expr>, <expr><literal type="number">0x1ffffff9</literal></expr>, <expr><literal type="number">0x1ffffffa</literal></expr>, <expr><literal type="number">0x1ffffffb</literal></expr>, <expr><literal type="number">0x3ffffff8</literal></expr>, <expr><literal type="number">0x3ffffff9</literal></expr>,
<expr><literal type="number">0x3ffffffa</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huffbits</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>col_zag</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">33</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">35</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">23</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">46</literal></expr>,
<expr><literal type="number">53</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mimic_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mimic_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>huffbits</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>huffbits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>huffcodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error initializing vlc table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bbdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>, <argument><expr><name>col_zag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mimic_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mimic_decode_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx_from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>avctx_from</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>avctx</name> <operator>==</operator> <name>avctx_from</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next_cur_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>prev_index</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next_prev_index</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>src</name><operator>-&gt;</operator><name>next_cur_index</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>vlcdec_lookup</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><operator>-</operator><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><operator>-</operator><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><operator>-</operator><literal type="number">62</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>,
<expr><operator>-</operator><literal type="number">59</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><operator>-</operator><literal type="number">58</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><operator>-</operator><literal type="number">57</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><operator>-</operator><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><operator>-</operator><literal type="number">55</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">53</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><operator>-</operator><literal type="number">52</literal></expr>, <expr><literal type="number">52</literal></expr>,
<expr><operator>-</operator><literal type="number">51</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><operator>-</operator><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><operator>-</operator><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><operator>-</operator><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><operator>-</operator><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><operator>-</operator><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><operator>-</operator><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><operator>-</operator><literal type="number">126</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><operator>-</operator><literal type="number">125</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><operator>-</operator><literal type="number">124</literal></expr>, <expr><literal type="number">124</literal></expr>,
<expr><operator>-</operator><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><operator>-</operator><literal type="number">122</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">120</literal></expr>, <expr><literal type="number">120</literal></expr>,
<expr><operator>-</operator><literal type="number">119</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><operator>-</operator><literal type="number">118</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><operator>-</operator><literal type="number">117</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><operator>-</operator><literal type="number">116</literal></expr>, <expr><literal type="number">116</literal></expr>,
<expr><operator>-</operator><literal type="number">115</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><operator>-</operator><literal type="number">114</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><operator>-</operator><literal type="number">113</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><operator>-</operator><literal type="number">112</literal></expr>, <expr><literal type="number">112</literal></expr>,
<expr><operator>-</operator><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><operator>-</operator><literal type="number">110</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><operator>-</operator><literal type="number">109</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><operator>-</operator><literal type="number">108</literal></expr>, <expr><literal type="number">108</literal></expr>,
<expr><operator>-</operator><literal type="number">107</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><operator>-</operator><literal type="number">106</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><operator>-</operator><literal type="number">105</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><operator>-</operator><literal type="number">104</literal></expr>, <expr><literal type="number">104</literal></expr>,
<expr><operator>-</operator><literal type="number">103</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><operator>-</operator><literal type="number">102</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><operator>-</operator><literal type="number">101</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>,
<expr><operator>-</operator><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><operator>-</operator><literal type="number">98</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><operator>-</operator><literal type="number">97</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><operator>-</operator><literal type="number">96</literal></expr>, <expr><literal type="number">96</literal></expr>, }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">95</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><operator>-</operator><literal type="number">94</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><operator>-</operator><literal type="number">93</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><operator>-</operator><literal type="number">92</literal></expr>, <expr><literal type="number">92</literal></expr>,
<expr><operator>-</operator><literal type="number">91</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><literal type="number">88</literal></expr>,
<expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><operator>-</operator><literal type="number">86</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><operator>-</operator><literal type="number">85</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>,
<expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><operator>-</operator><literal type="number">81</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><literal type="number">80</literal></expr>,
<expr><operator>-</operator><literal type="number">79</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">77</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><operator>-</operator><literal type="number">76</literal></expr>, <expr><literal type="number">76</literal></expr>,
<expr><operator>-</operator><literal type="number">75</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">74</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">72</literal></expr>, <expr><literal type="number">72</literal></expr>,
<expr><operator>-</operator><literal type="number">71</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">69</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><operator>-</operator><literal type="number">68</literal></expr>, <expr><literal type="number">68</literal></expr>,
<expr><operator>-</operator><literal type="number">67</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">66</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><operator>-</operator><literal type="number">65</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_decode_block</name><parameter_list>(<parameter><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dct_block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vlc</name></decl>, <decl><type ref="prev"/><name>num_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vlc</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vlc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>vlc</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>num_bits</name> <operator>=</operator> <name>vlc</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name><name>vlcdec_lookup</name><index>[<expr><name>num_bits</name></expr>]</index></name><operator>)</operator><index>[<expr><name>value</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>*=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><name>coeff</name> <operator>*</operator> <name>qscale</name><operator>)</operator> <operator>/</operator> <literal type="number">1001</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_coeffs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_iframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>cur_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qscale</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><literal type="number">10000</literal> <operator>-</operator> <name>quality</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">2000</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr> ]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr> ]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_vblocks</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_hblocks</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>is_iframe</name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>is_chroma</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>is_chroma</name> <operator>||</operator> <name>is_iframe</name> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vlc_decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>,
<argument><expr><name>qscale</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding "</literal>
<literal type="string">"block.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dct_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>backref</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>+</operator> <name>backref</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>,
<argument><expr><name>cur_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>src</name> <operator>-</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>p</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No such backreference! Buggy sample.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>cur_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>stride</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_hblocks</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>stride</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_hblocks</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>cur_row</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>flip_swap_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_1</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>data_1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mimic_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap_buf_size</name> <init>= <expr><name>buf_size</name> <operator>-</operator> <name>MIMIC_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_pframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>, <decl><type ref="prev"/><name>num_coeffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;=</operator> <name>MIMIC_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"insufficient data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MIMIC_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>quality</name> <operator>=</operator> <call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>is_pframe</name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_coeffs</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">160</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>==</operator> <literal type="number">120</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">320</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>==</operator> <literal type="number">240</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid width/height!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_vblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_hblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Resolution changing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_pframe</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decoding must start with keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name>is_pframe</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_P</name></expr> </then><else>:
<expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_prev_index</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cur_index</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf_size</name></name></expr></argument>, <argument><expr><name>swap_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bbdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name>MIMIC_HEADER_SIZE</name><operator>)</operator></expr></argument>,
<argument><expr><name>swap_buf_size</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap_buf</name></name></expr></argument>, <argument><expr><name>swap_buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>, <argument><expr><operator>!</operator><name>is_pframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flip_swap_frame</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_index</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_prev_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_index</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_cur_index</name></name></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mimic_init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MimicContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mimic_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mimic_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mimic"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Mimic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MIMIC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MimicContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mimic_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mimic_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>mimic_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>mimic_decode_update_thread_context</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>mimic_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
