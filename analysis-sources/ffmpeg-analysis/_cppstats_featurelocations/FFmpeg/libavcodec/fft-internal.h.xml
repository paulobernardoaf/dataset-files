<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\fft-internal.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_FFT_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_FFT_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX15</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqrthalf</name></cpp:macro> <cpp:value>(float)M_SQRT1_2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x = a - b; y = a + b; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (dre) = (are) * (bre) - (aim) * (bim); (dim) = (are) * (bim) + (aim) * (bre); } while (0)</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_FLOAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lrint((a) * (double)(1 &lt;&lt; (bits)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int64_t accu; (accu) = (int64_t)(bre) * (are); (accu) -= (int64_t)(bim) * (aim); (dre) = (int)(((accu) + 0x40000000) &gt;&gt; 31); (accu) = (int64_t)(bre) * (aim); (accu) += (int64_t)(bim) * (are); (dim) = (int)(((accu) + 0x40000000) &gt;&gt; 31); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(SCALE_FLOAT(a, 31), -2147483647, 2147483647)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_mdct_calcw_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTDouble</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(SCALE_FLOAT(a, 15), -32767, 32767)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqrthalf</name></cpp:macro> <cpp:value>((int16_t)((1&lt;&lt;15)*M_SQRT1_2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x = (a - b) &gt;&gt; 1; y = (a + b) &gt;&gt; 1; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMULS</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (dre) = (MUL16(are, bre) - MUL16(aim, bim)) &gt;&gt; sh; (dim) = (MUL16(are, bim) + MUL16(aim, bre)) &gt;&gt; sh; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CMULS(dre, dim, are, aim, bre, bim, 15)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMULL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CMULS(dre, dim, are, aim, bre, bim, 0)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_imdct_calc_c</name></cpp:macro> <cpp:value>FFT_NAME(ff_imdct_calc_c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_imdct_half_c</name></cpp:macro> <cpp:value>FFT_NAME(ff_imdct_half_c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mdct_calc_c</name></cpp:macro> <cpp:value>FFT_NAME(ff_mdct_calc_c)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>ff_imdct_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_imdct_half_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_mdct_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
