<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\qcelpdec.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qcelpdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>I_F_Q</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>SILENCE</name></decl>,
<decl><name>RATE_OCTAVE</name></decl>,
<decl><name>RATE_QUARTER</name></decl>,
<decl><name>RATE_HALF</name></decl>,
<decl><name>RATE_FULL</name></decl>
}</block></enum></type> <name>qcelp_packet_rate</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QCELPContext</name> <block>{
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>qcelp_packet_rate</name></type> <name>bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QCELPFrame</name></type> <name>frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>erasure_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>octave_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>prev_lspf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>predictor_lspf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_synthesis_filter_mem</name><index>[<expr><literal type="number">303</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_pre_filter_mem</name><index>[<expr><literal type="number">303</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>rnd_fir_filter_mem</name><index>[<expr><literal type="number">180</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>formant_mem</name><index>[<expr><literal type="number">170</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last_codebook_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>prev_g1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pitch_lag</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>first16bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>warned_buf_mismatch_bitrate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>postfilter_synth_mem</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>postfilter_agc_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>postfilter_tilt_mem</name></decl>;</decl_stmt>
}</block></struct></type> <name>QCELPContext</name>;</typedef>






<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qcelp_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">11.0</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_lspf</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lspf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp_lspf</name></decl>, <decl><type ref="prev"/><name>smooth</name></decl>, <decl><type ref="prev"/><name>erasure_coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>predictors</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_OCTAVE</name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>predictors</name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>prev_bitrate</name></name> <operator>!=</operator> <name>RATE_OCTAVE</name> <operator>&amp;&amp;</operator>
<name><name>q</name><operator>-&gt;</operator><name>prev_bitrate</name></name> <operator>!=</operator> <name>I_F_Q</name></expr> ?</condition><then> <expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr>
</then><else>: <expr><name><name>q</name><operator>-&gt;</operator><name>predictor_lspf</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_OCTAVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>octave_count</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>predictor_lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name>QCELP_LSP_SPREAD_FACTOR</name></expr>
</then><else>: <expr><operator>-</operator><name>QCELP_LSP_SPREAD_FACTOR</name></expr></else></ternary><operator>)</operator> <operator>+</operator>
<name><name>predictors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>QCELP_LSP_OCTAVE_PREDICTOR</name> <operator>+</operator>
<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>QCELP_LSP_OCTAVE_PREDICTOR</name><operator>)</operator> <operator>/</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>smooth</name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>octave_count</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="number">.875</literal></expr> </then><else>: <expr><literal type="number">0.1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>erasure_coeff</name> <operator>=</operator> <name>QCELP_LSP_OCTAVE_PREDICTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>erasure_coeff</name> <operator>*=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0.9</literal></expr> </then><else>: <expr><literal type="number">0.7</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>predictor_lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>erasure_coeff</name><operator>)</operator> <operator>/</operator> <literal type="number">11</literal> <operator>+</operator>
<name>erasure_coeff</name> <operator>*</operator> <name><name>predictors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>smooth</name> <operator>=</operator> <literal type="number">0.125</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>lspf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>QCELP_LSP_SPREAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lspf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>QCELP_LSP_SPREAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>QCELP_LSP_SPREAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lspf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>QCELP_LSP_SPREAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>ff_weighted_vector_sumf</name><argument_list>(<argument><expr><name>lspf</name></expr></argument>, <argument><expr><name>lspf</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr></argument>, <argument><expr><name>smooth</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>smooth</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>octave_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_lspf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lspf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp_lspf</name> <operator>+=</operator> <name><name>qcelp_lspvq</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.0001</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lspf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp_lspf</name> <operator>+=</operator> <name><name>qcelp_lspvq</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.0001</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_QUARTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">.70</literal> <operator>||</operator> <name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">.97</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lspf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">.08</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">.66</literal> <operator>||</operator> <name><name>lspf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">.985</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lspf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">.0931</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gain_and_index</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>subframes_count</name></decl>, <decl><type ref="prev"/><name><name>g1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>slope</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_QUARTER</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RATE_FULL</name></expr>:</case> <expr_stmt><expr><name>subframes_count</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RATE_HALF</name></expr>:</case> <expr_stmt><expr><name>subframes_count</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>subframes_count</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframes_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cbgain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_FULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>qcelp_g12ga</name><index>[<expr><name><name>g1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cbsign</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cindex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cindex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">89</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_codebook_gain</name></name> <operator>=</operator> <name><name>qcelp_g12ga</name><index>[<expr><name><name>g1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_QUARTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.4</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.6</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.8</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.2</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.2</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.8</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.6</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.4</literal> <operator>*</operator> <name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>!=</operator> <name>SILENCE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_OCTAVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cbgain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subframes_count</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr> :</case> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subframes_count</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>slope</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>qcelp_g12ga</name><index>[<expr><name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>q</name><operator>-&gt;</operator><name>last_codebook_gain</name></name><operator>)</operator> <operator>/</operator> <name>subframes_count</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>subframes_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gain</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>last_codebook_gain</name></name> <operator>+</operator> <name>slope</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_codebook_gain</name></name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_g1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>g1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>codebook_sanity_check_for_rate_quarter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cbgain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>prev_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>cbgain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>cbgain</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff</name> <operator>-</operator> <name>prev_diff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_diff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_svector</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>cdn_vector</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cbseed</name></decl>, <decl><type ref="prev"/><name>cindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rnd</name></decl>, <decl><type ref="prev"/><name>tmp_gain</name></decl>, <decl><type ref="prev"/><name>fir_filter_value</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RATE_FULL</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_gain</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>QCELP_RATE_FULL_CODEBOOK_RATIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cindex</name> <operator>=</operator> <operator>-</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cindex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cdn_vector</name><operator>++</operator> <operator>=</operator> <name>tmp_gain</name> <operator>*</operator>
<name><name>qcelp_rate_full_codebook</name><index>[<expr><name>cindex</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>RATE_HALF</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_gain</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>QCELP_RATE_HALF_CODEBOOK_RATIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cindex</name> <operator>=</operator> <operator>-</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cindex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cdn_vector</name><operator>++</operator> <operator>=</operator> <name>tmp_gain</name> <operator>*</operator>
<name><name>qcelp_rate_half_codebook</name><index>[<expr><name>cindex</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>RATE_QUARTER</name></expr>:</case>
<expr_stmt><expr><name>cbseed</name> <operator>=</operator> <operator>(</operator><literal type="number">0x0003</literal> <operator>&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>|</operator>
<operator>(</operator><literal type="number">0x003F</literal> <operator>&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><literal type="number">0x0060</literal> <operator>&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator>
<operator>(</operator><literal type="number">0x0007</literal> <operator>&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>
<operator>(</operator><literal type="number">0x0038</literal> <operator>&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lspv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>rnd_fir_filter_mem</name></name> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_gain</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>QCELP_SQRT1887</name> <operator>/</operator> <literal type="number">32768.0</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cbseed</name> <operator>=</operator> <literal type="number">521</literal> <operator>*</operator> <name>cbseed</name> <operator>+</operator> <literal type="number">259</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rnd</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name>cbseed</name></expr>;</expr_stmt>


<expr_stmt><expr><name>fir_filter_value</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>fir_filter_value</name> <operator>+=</operator> <name><name>qcelp_rnd_fir_coefs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name><name>rnd</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>rnd</name><index>[<expr><operator>-</operator><literal type="number">20</literal><operator>+</operator><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>fir_filter_value</name> <operator>+=</operator> <name><name>qcelp_rnd_fir_coefs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>rnd</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cdn_vector</name><operator>++</operator> <operator>=</operator> <name>tmp_gain</name> <operator>*</operator> <name>fir_filter_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>rnd_fir_filter_mem</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>rnd_fir_filter_mem</name></name> <operator>+</operator> <literal type="number">160</literal></expr></argument>,
<argument><expr><literal type="number">20</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RATE_OCTAVE</name></expr>:</case>
<expr_stmt><expr><name>cbseed</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first16bits</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_gain</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>QCELP_SQRT1887</name> <operator>/</operator> <literal type="number">32768.0</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cbseed</name> <operator>=</operator> <literal type="number">521</literal> <operator>*</operator> <name>cbseed</name> <operator>+</operator> <literal type="number">259</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cdn_vector</name><operator>++</operator> <operator>=</operator> <name>tmp_gain</name> <operator>*</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name>cbseed</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>I_F_Q</name></expr>:</case>
<expr_stmt><expr><name>cbseed</name> <operator>=</operator> <operator>-</operator><literal type="number">44</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_gain</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>QCELP_RATE_FULL_CODEBOOK_RATIO</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cdn_vector</name><operator>++</operator> <operator>=</operator> <name>tmp_gain</name> <operator>*</operator>
<name><name>qcelp_rate_full_codebook</name><index>[<expr><name>cbseed</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>SILENCE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cdn_vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">160</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_gain_ctrl</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>v_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">160</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>res</name> <init>= <expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>v_ref</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>v_ref</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_scale_vector_to_given_sum_of_squares</name><argument_list>(<argument><expr><name>v_out</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>v_in</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>do_pitchfilter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>memory</name><index>[<expr><literal type="number">303</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>v_in</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>pfrac</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>v_lag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v_out</name> <operator>=</operator> <name>memory</name> <operator>+</operator> <literal type="number">143</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v_lag</name> <operator>=</operator> <name>memory</name> <operator>+</operator> <literal type="number">143</literal> <operator>+</operator> <literal type="number">40</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <name><name>lag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>v_len</name> <operator>=</operator> <name>v_in</name> <operator>+</operator> <literal type="number">40</literal></expr>;</init> <condition><expr><name>v_in</name> <operator>&lt;</operator> <name>v_len</name></expr>;</condition> <incr><expr><name>v_in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfrac</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>*</operator><name>v_out</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>v_out</name> <operator>+=</operator> <name><name>qcelp_hammsinc_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name><name>v_lag</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>v_lag</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>v_out</name> <operator>=</operator> <operator>*</operator><name>v_lag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>v_out</name> <operator>=</operator> <operator>*</operator><name>v_in</name> <operator>+</operator> <name><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>v_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_lag</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v_out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>v_out</name></expr></argument>, <argument><expr><name>v_in</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v_in</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_out</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>memory</name></expr></argument>, <argument><expr><name>memory</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">143</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>memory</name> <operator>+</operator> <literal type="number">143</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_pitch_filters</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>cdn_vector</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v_synthesis_filtered</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v_pre_filtered</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_HALF</name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>SILENCE</name> <operator>||</operator>
<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>prev_bitrate</name></name> <operator>&gt;=</operator> <name>RATE_HALF</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_HALF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>plag</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pgain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.25</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>plag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>max_pitch_gain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_pitch_gain</name> <operator>=</operator> <literal type="number">0.9</literal> <operator>-</operator> <literal type="number">0.3</literal> <operator>*</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>max_pitch_gain</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>SILENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_pitch_gain</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max_pitch_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pfrac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pfrac</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>v_synthesis_filtered</name> <operator>=</operator> <call><name>do_pitchfilter</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_synthesis_filter_mem</name></name></expr></argument>,
<argument><expr><name>cdn_vector</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pfrac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>v_pre_filtered</name> <operator>=</operator> <call><name>do_pitchfilter</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_pre_filter_mem</name></name></expr></argument>,
<argument><expr><name>v_synthesis_filtered</name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pfrac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_gain_ctrl</name><argument_list>(<argument><expr><name>cdn_vector</name></expr></argument>, <argument><expr><name>v_synthesis_filtered</name></expr></argument>, <argument><expr><name>v_pre_filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_synthesis_filter_mem</name></name></expr></argument>,
<argument><expr><name>cdn_vector</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">143</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_pre_filter_mem</name></name></expr></argument>, <argument><expr><name>cdn_vector</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">143</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_gain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>lspf2lpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lspf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>lsp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bandwidth_expansion_coeff</name> <init>= <expr><name>QCELP_BANDWIDTH_EXPANSION_COEFF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name><name>lspf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>bandwidth_expansion_coeff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bandwidth_expansion_coeff</name> <operator>*=</operator> <name>QCELP_BANDWIDTH_EXPANSION_COEFF</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate_lpc</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>curr_lspf</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>interpolated_lspf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>weight</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_QUARTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">0.25</literal> <operator>*</operator> <operator>(</operator><name>subframe_num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_OCTAVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>subframe_num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">0.625</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>weight</name> <operator>!=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_weighted_vector_sumf</name><argument_list>(<argument><expr><name>interpolated_lspf</name></expr></argument>, <argument><expr><name>curr_lspf</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr></argument>,
<argument><expr><name>weight</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>weight</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lspf2lpc</name><argument_list>(<argument><expr><name>interpolated_lspf</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_QUARTER</name> <operator>||</operator>
<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>subframe_num</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lspf2lpc</name><argument_list>(<argument><expr><name>curr_lspf</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>SILENCE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>subframe_num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lspf2lpc</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>qcelp_packet_rate</name></type> <name>buf_size2bitrate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>buf_size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">35</literal></expr>:</case> <return>return <expr><name>RATE_FULL</name></expr>;</return>
<case>case <expr><literal type="number">17</literal></expr>:</case> <return>return <expr><name>RATE_HALF</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><name>RATE_QUARTER</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><name>RATE_OCTAVE</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>SILENCE</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>I_F_Q</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>qcelp_packet_rate</name></type> <name>determine_bitrate</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>qcelp_packet_rate</name></type> <name>bitrate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitrate</name> <operator>=</operator> <call><name>buf_size2bitrate</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitrate</name> <operator>&gt;</operator> <operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>warned_buf_mismatch_bitrate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Claimed bitrate and buffer size mismatch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>warned_buf_mismatch_bitrate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bitrate</name> <operator>&lt;</operator> <operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Buffer is too small for the claimed bitrate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>I_F_Q</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>bitrate</name> <operator>=</operator> <call><name>buf_size2bitrate</name><argument_list>(<argument><expr><name>buf_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Bitrate byte missing, guessing bitrate from packet size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>I_F_Q</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitrate</name> <operator>==</operator> <name>SILENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Blank frame handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bitrate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>warn_insufficient_frame_quality</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Frame #%d, IFQ: %s\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postfilter</name><parameter_list>(<parameter><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>pow_0_775</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.775000</literal></expr>, <expr><literal type="number">0.600625</literal></expr>, <expr><literal type="number">0.465484</literal></expr>, <expr><literal type="number">0.360750</literal></expr>, <expr><literal type="number">0.279582</literal></expr>,
<expr><literal type="number">0.216676</literal></expr>, <expr><literal type="number">0.167924</literal></expr>, <expr><literal type="number">0.130141</literal></expr>, <expr><literal type="number">0.100859</literal></expr>, <expr><literal type="number">0.078166</literal></expr>
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>pow_0_625</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.625000</literal></expr>, <expr><literal type="number">0.390625</literal></expr>, <expr><literal type="number">0.244141</literal></expr>, <expr><literal type="number">0.152588</literal></expr>, <expr><literal type="number">0.095367</literal></expr>,
<expr><literal type="number">0.059605</literal></expr>, <expr><literal type="number">0.037253</literal></expr>, <expr><literal type="number">0.023283</literal></expr>, <expr><literal type="number">0.014552</literal></expr>, <expr><literal type="number">0.009095</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lpc_p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pole_out</name><index>[<expr><literal type="number">170</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>zero_out</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc_s</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>pow_0_625</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc_p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>pow_0_775</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_celp_lp_zero_synthesis_filterf</name><argument_list>(<argument><expr><name>zero_out</name></expr></argument>, <argument><expr><name>lpc_s</name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pole_out</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>postfilter_synth_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>pole_out</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>lpc_p</name></expr></argument>, <argument><expr><name>zero_out</name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>postfilter_synth_mem</name></name></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tilt_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>postfilter_tilt_mem</name></name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_adaptive_gain_control</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">0.9375</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>postfilter_agc_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qcelp_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QCELPContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>outbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>quantized_lspf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lpc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>gain</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>formant_mem</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">160</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outbuffer</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <call><name>determine_bitrate</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>I_F_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Bitrate cannot be determined."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_OCTAVE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>first16bits</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Bitrate is 1/8 and first 16 bits are on."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;</operator> <name>SILENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>QCELPBitmap</name> <modifier>*</modifier></type><name>bitmaps</name> <init>= <expr><name><name>qcelp_unpacking_bitmaps_per_rate</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>QCELPBitmap</name> <modifier>*</modifier></type><name>bitmaps_end</name> <init>= <expr><name><name>qcelp_unpacking_bitmaps_per_rate</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>]</index></name> <operator>+</operator>
<name><name>qcelp_unpacking_bitmaps_lengths</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unpacked_data</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QCELPFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>bitmaps</name> <operator>&lt;</operator> <name>bitmaps_end</name></expr>;</condition> <incr><expr><name>bitmaps</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unpacked_data</name><index>[<expr><name><name>bitmaps</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>bitmaps</name><operator>-&gt;</operator><name>bitlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>bitmaps</name><operator>-&gt;</operator><name>bitpos</name></name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>reserved</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Wrong data in reserved frame area."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>RATE_QUARTER</name> <operator>&amp;&amp;</operator>
<call><name>codebook_sanity_check_for_rate_quarter</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cbgain</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Codebook gain sanity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;=</operator> <name>RATE_HALF</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pfrac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>plag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">124</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Cannot initialize pitch filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_gain_and_index</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_svector</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_lspf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>quantized_lspf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn_insufficient_frame_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Badly received packets in frame."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>erasure</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_pitch_filters</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <name>I_F_Q</name></expr>)</condition> <block>{<block_content>
<label><name>erasure</name>:</label>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <name>I_F_Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_gain_and_index</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_svector</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_lspf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>quantized_lspf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_pitch_filters</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>erasure_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>formant_mem</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>interpolate_lpc</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>quantized_lspf</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>formant_mem</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>,
<argument><expr><name>outbuffer</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>formant_mem</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>postfilter</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>formant_mem</name></name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr></argument>, <argument><expr><name>quantized_lspf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>prev_lspf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev_bitrate</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_qcelp_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qcelp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QCELP / PureVoice"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_QCELP</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qcelp_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>qcelp_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QCELPContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
