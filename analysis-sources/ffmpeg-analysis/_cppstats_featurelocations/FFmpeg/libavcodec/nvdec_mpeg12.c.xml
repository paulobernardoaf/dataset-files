<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\nvdec_mpeg12.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_mpeg12_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUVIDPICPARAMS</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUVIDMPEG2PICPARAMS</name> <modifier>*</modifier></type><name>ppc</name> <init>= <expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CodecSpecific</name><operator>.</operator><name>mpeg2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NVDECFrame</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur_frame</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_nvdec_start_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cur_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fdd</name> <operator>=</operator> <operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>cur_frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>(</operator><name>NVDECFrame</name><operator>*</operator><operator>)</operator><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>CUVIDPICPARAMS</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>PicWidthInMbs</name> <operator>=</operator> <operator>(</operator><name><name>cur_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>,
<expr><operator>.</operator><name>FrameHeightInMbs</name> <operator>=</operator> <operator>(</operator><name><name>cur_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>,
<expr><operator>.</operator><name>CurrPicIdx</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>idx</name></name></expr>,

<expr><operator>.</operator><name>field_pic_flag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>,
<expr><operator>.</operator><name>bottom_field_flag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>,
<expr><operator>.</operator><name>second_field</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>,

<expr><operator>.</operator><name>intra_pic_flag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>,
<expr><operator>.</operator><name>ref_pic_flag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>,

<expr><operator>.</operator><name><name>CodecSpecific</name><operator>.</operator><name>mpeg2</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>ForwardRefIdx</name> <operator>=</operator> <call><name>ff_nvdec_get_ref_idx</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>BackwardRefIdx</name> <operator>=</operator> <call><name>ff_nvdec_get_ref_idx</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>picture_coding_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>,
<expr><operator>.</operator><name>full_pel_forward_vector</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>full_pel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>full_pel_backward_vector</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>full_pel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>f_code</name> <operator>=</operator> <block>{ <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr> }</block></expr>,
<expr><operator>.</operator><name>intra_dc_precision</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>,
<expr><operator>.</operator><name>frame_pred_frame_dct</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_pred_frame_dct</name></name></expr>,
<expr><operator>.</operator><name>concealment_motion_vectors</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>concealment_motion_vectors</name></name></expr>,
<expr><operator>.</operator><name>q_scale_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>,
<expr><operator>.</operator><name>intra_vlc_format</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_vlc_format</name></name></expr>,
<expr><operator>.</operator><name>alternate_scan</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>,
<expr><operator>.</operator><name>top_field_first</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>,
}</block></expr>
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>QuantMatrixIntra</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>QuantMatrixInter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_mpeg12_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>ff_nvdec_frame_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hw_frames_ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2_NVDEC_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg2_nvdec_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg2_nvdec"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>nvdec_mpeg12_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_nvdec_simple_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>ff_nvdec_simple_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>nvdec_mpeg12_frame_params</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_nvdec_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_nvdec_decode_uninit</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NVDECContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1_NVDEC_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg1_nvdec_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg1_nvdec"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>nvdec_mpeg12_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_nvdec_simple_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>ff_nvdec_simple_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>nvdec_mpeg12_frame_params</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_nvdec_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_nvdec_decode_uninit</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NVDECContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
