<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rv34dsp.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>






<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rv34_row_transform</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z0</name> <init>= <expr><literal type="number">13</literal><operator>*</operator><operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z1</name> <init>= <expr><literal type="number">13</literal><operator>*</operator><operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z2</name> <init>= <expr><literal type="number">7</literal><operator>*</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">17</literal><operator>*</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z3</name> <init>= <expr><literal type="number">17</literal><operator>*</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z0</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z1</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z0</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_idct_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rv34_row_transform</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z0</name> <init>= <expr><literal type="number">13</literal><operator>*</operator><operator>(</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">0x200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z1</name> <init>= <expr><literal type="number">13</literal><operator>*</operator><operator>(</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">0x200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z2</name> <init>= <expr><literal type="number">7</literal><operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">17</literal><operator>*</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z3</name> <init>= <expr><literal type="number">17</literal><operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>z0</name> <operator>+</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>z1</name> <operator>+</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>z1</name> <operator>-</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>z0</name> <operator>-</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_inv_transform_noround_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rv34_row_transform</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z0</name> <init>= <expr><literal type="number">39</literal><operator>*</operator><operator>(</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z1</name> <init>= <expr><literal type="number">39</literal><operator>*</operator><operator>(</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z2</name> <init>= <expr><literal type="number">21</literal><operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">51</literal><operator>*</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z3</name> <init>= <expr><literal type="number">51</literal><operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">21</literal><operator>*</operator><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>z0</name> <operator>+</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>z1</name> <operator>+</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>z1</name> <operator>-</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>z0</name> <operator>-</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_idct_dc_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">13</literal><operator>*</operator><literal type="number">13</literal><operator>*</operator><name>dc</name> <operator>+</operator> <literal type="number">0x200</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_inv_transform_dc_noround_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc</name> <init>= <expr><operator>(</operator><literal type="number">13</literal> <operator>*</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>




<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rv34dsp_init</name><parameter_list>(<parameter><decl><type><name>RV34DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv34_inv_transform</name></name> <operator>=</operator> <name>rv34_inv_transform_noround_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv34_inv_transform_dc</name></name> <operator>=</operator> <name>rv34_inv_transform_dc_noround_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv34_idct_add</name></name> <operator>=</operator> <name>rv34_idct_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv34_idct_dc_add</name></name> <operator>=</operator> <name>rv34_idct_dc_add_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rv34dsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rv34dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
