<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\sbcdsp.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_SBCDSP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_SBCDSP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbcdsp_data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_OUT_BITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_X_BUFFER_SIZE</name></cpp:macro> <cpp:value>328</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>sbc_dsp_context</name></name></type> <name>SBCDSPContext</name>;</typedef>

<struct>struct <name>sbc_dsp_context</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>increment</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sbc_analyze_4</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sbc_analyze_8</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sbc_analyze_4s</name>)<parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sbc_analyze_8s</name>)<parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sbc_enc_process_input_4s</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sbc_enc_process_input_8s</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sbc_calc_scalefactors</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sbc_calc_scalefactors_j</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>






<function_decl><type><name>void</name></type> <name>ff_sbcdsp_init</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sbcdsp_init_arm</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_sbcdsp_init_x86</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
