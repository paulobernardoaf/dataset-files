<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\nellymoser.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nellymoser.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_nelly_dequantization_table</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.0000000000</literal></expr>,

<expr><operator>-</operator><literal type="number">0.8472560048</literal></expr>, <expr><literal type="number">0.7224709988</literal></expr>,

<expr><operator>-</operator><literal type="number">1.5247479677</literal></expr>,<expr><operator>-</operator><literal type="number">0.4531480074</literal></expr>, <expr><literal type="number">0.3753609955</literal></expr>, <expr><literal type="number">1.4717899561</literal></expr>,

<expr><operator>-</operator><literal type="number">1.9822579622</literal></expr>,<expr><operator>-</operator><literal type="number">1.1929379702</literal></expr>,<expr><operator>-</operator><literal type="number">0.5829370022</literal></expr>,<expr><operator>-</operator><literal type="number">0.0693780035</literal></expr>, <expr><literal type="number">0.3909569979</literal></expr>, <expr><literal type="number">0.9069200158</literal></expr>, <expr><literal type="number">1.4862740040</literal></expr>, <expr><literal type="number">2.2215409279</literal></expr>,

<expr><operator>-</operator><literal type="number">2.3887870312</literal></expr>,<expr><operator>-</operator><literal type="number">1.8067539930</literal></expr>,<expr><operator>-</operator><literal type="number">1.4105420113</literal></expr>,<expr><operator>-</operator><literal type="number">1.0773609877</literal></expr>,<expr><operator>-</operator><literal type="number">0.7995010018</literal></expr>,<expr><operator>-</operator><literal type="number">0.5558109879</literal></expr>,<expr><operator>-</operator><literal type="number">0.3334020078</literal></expr>,<expr><operator>-</operator><literal type="number">0.1324490011</literal></expr>,
<expr><literal type="number">0.0568020009</literal></expr>, <expr><literal type="number">0.2548770010</literal></expr>, <expr><literal type="number">0.4773550034</literal></expr>, <expr><literal type="number">0.7386850119</literal></expr>, <expr><literal type="number">1.0443060398</literal></expr>, <expr><literal type="number">1.3954459429</literal></expr>, <expr><literal type="number">1.8098750114</literal></expr>, <expr><literal type="number">2.3918759823</literal></expr>,

<expr><operator>-</operator><literal type="number">2.3893830776</literal></expr>,<expr><operator>-</operator><literal type="number">1.9884680510</literal></expr>,<expr><operator>-</operator><literal type="number">1.7514040470</literal></expr>,<expr><operator>-</operator><literal type="number">1.5643119812</literal></expr>,<expr><operator>-</operator><literal type="number">1.3922129869</literal></expr>,<expr><operator>-</operator><literal type="number">1.2164649963</literal></expr>,<expr><operator>-</operator><literal type="number">1.0469499826</literal></expr>,<expr><operator>-</operator><literal type="number">0.8905100226</literal></expr>,
<expr><operator>-</operator><literal type="number">0.7645580173</literal></expr>,<expr><operator>-</operator><literal type="number">0.6454579830</literal></expr>,<expr><operator>-</operator><literal type="number">0.5259280205</literal></expr>,<expr><operator>-</operator><literal type="number">0.4059549868</literal></expr>,<expr><operator>-</operator><literal type="number">0.3029719889</literal></expr>,<expr><operator>-</operator><literal type="number">0.2096900046</literal></expr>,<expr><operator>-</operator><literal type="number">0.1239869967</literal></expr>,<expr><operator>-</operator><literal type="number">0.0479229987</literal></expr>,
<expr><literal type="number">0.0257730000</literal></expr>, <expr><literal type="number">0.1001340002</literal></expr>, <expr><literal type="number">0.1737180054</literal></expr>, <expr><literal type="number">0.2585540116</literal></expr>, <expr><literal type="number">0.3522900045</literal></expr>, <expr><literal type="number">0.4569880068</literal></expr>, <expr><literal type="number">0.5767750144</literal></expr>, <expr><literal type="number">0.7003160119</literal></expr>,
<expr><literal type="number">0.8425520062</literal></expr>, <expr><literal type="number">1.0093879700</literal></expr>, <expr><literal type="number">1.1821349859</literal></expr>, <expr><literal type="number">1.3534560204</literal></expr>, <expr><literal type="number">1.5320819616</literal></expr>, <expr><literal type="number">1.7332619429</literal></expr>, <expr><literal type="number">1.9722349644</literal></expr>, <expr><literal type="number">2.3978140354</literal></expr>,

<expr><operator>-</operator><literal type="number">2.5756309032</literal></expr>,<expr><operator>-</operator><literal type="number">2.0573320389</literal></expr>,<expr><operator>-</operator><literal type="number">1.8984919786</literal></expr>,<expr><operator>-</operator><literal type="number">1.7727810144</literal></expr>,<expr><operator>-</operator><literal type="number">1.6662600040</literal></expr>,<expr><operator>-</operator><literal type="number">1.5742180347</literal></expr>,<expr><operator>-</operator><literal type="number">1.4993319511</literal></expr>,<expr><operator>-</operator><literal type="number">1.4316639900</literal></expr>,
<expr><operator>-</operator><literal type="number">1.3652280569</literal></expr>,<expr><operator>-</operator><literal type="number">1.3000990152</literal></expr>,<expr><operator>-</operator><literal type="number">1.2280930281</literal></expr>,<expr><operator>-</operator><literal type="number">1.1588579416</literal></expr>,<expr><operator>-</operator><literal type="number">1.0921250582</literal></expr>,<expr><operator>-</operator><literal type="number">1.0135740042</literal></expr>,<expr><operator>-</operator><literal type="number">0.9202849865</literal></expr>,<expr><operator>-</operator><literal type="number">0.8287050128</literal></expr>,
<expr><operator>-</operator><literal type="number">0.7374889851</literal></expr>,<expr><operator>-</operator><literal type="number">0.6447759867</literal></expr>,<expr><operator>-</operator><literal type="number">0.5590940118</literal></expr>,<expr><operator>-</operator><literal type="number">0.4857139885</literal></expr>,<expr><operator>-</operator><literal type="number">0.4110319912</literal></expr>,<expr><operator>-</operator><literal type="number">0.3459700048</literal></expr>,<expr><operator>-</operator><literal type="number">0.2851159871</literal></expr>,<expr><operator>-</operator><literal type="number">0.2341620028</literal></expr>,
<expr><operator>-</operator><literal type="number">0.1870580018</literal></expr>,<expr><operator>-</operator><literal type="number">0.1442500055</literal></expr>,<expr><operator>-</operator><literal type="number">0.1107169986</literal></expr>,<expr><operator>-</operator><literal type="number">0.0739680007</literal></expr>,<expr><operator>-</operator><literal type="number">0.0365610011</literal></expr>,<expr><operator>-</operator><literal type="number">0.0073290002</literal></expr>, <expr><literal type="number">0.0203610007</literal></expr>, <expr><literal type="number">0.0479039997</literal></expr>,
<expr><literal type="number">0.0751969963</literal></expr>, <expr><literal type="number">0.0980999991</literal></expr>, <expr><literal type="number">0.1220389977</literal></expr>, <expr><literal type="number">0.1458999962</literal></expr>, <expr><literal type="number">0.1694349945</literal></expr>, <expr><literal type="number">0.1970459968</literal></expr>, <expr><literal type="number">0.2252430022</literal></expr>, <expr><literal type="number">0.2556869984</literal></expr>,
<expr><literal type="number">0.2870100141</literal></expr>, <expr><literal type="number">0.3197099864</literal></expr>, <expr><literal type="number">0.3525829911</literal></expr>, <expr><literal type="number">0.3889069855</literal></expr>, <expr><literal type="number">0.4334920049</literal></expr>, <expr><literal type="number">0.4769459963</literal></expr>, <expr><literal type="number">0.5204820037</literal></expr>, <expr><literal type="number">0.5644530058</literal></expr>,
<expr><literal type="number">0.6122040153</literal></expr>, <expr><literal type="number">0.6685929894</literal></expr>, <expr><literal type="number">0.7341650128</literal></expr>, <expr><literal type="number">0.8032159805</literal></expr>, <expr><literal type="number">0.8784040213</literal></expr>, <expr><literal type="number">0.9566209912</literal></expr>, <expr><literal type="number">1.0397069454</literal></expr>, <expr><literal type="number">1.1293770075</literal></expr>,
<expr><literal type="number">1.2211159468</literal></expr>, <expr><literal type="number">1.3080279827</literal></expr>, <expr><literal type="number">1.4024800062</literal></expr>, <expr><literal type="number">1.5056819916</literal></expr>, <expr><literal type="number">1.6227730513</literal></expr>, <expr><literal type="number">1.7724959850</literal></expr>, <expr><literal type="number">1.9430880547</literal></expr>, <expr><literal type="number">2.2903931141</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_nelly_band_sizes_table</name><index>[<expr><name>NELLY_BANDS</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>ff_nelly_init_table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3134</literal></expr>, <expr><literal type="number">5342</literal></expr>, <expr><literal type="number">6870</literal></expr>, <expr><literal type="number">7792</literal></expr>, <expr><literal type="number">8569</literal></expr>, <expr><literal type="number">9185</literal></expr>, <expr><literal type="number">9744</literal></expr>, <expr><literal type="number">10191</literal></expr>, <expr><literal type="number">10631</literal></expr>, <expr><literal type="number">11061</literal></expr>, <expr><literal type="number">11434</literal></expr>, <expr><literal type="number">11770</literal></expr>,
<expr><literal type="number">12116</literal></expr>, <expr><literal type="number">12513</literal></expr>, <expr><literal type="number">12925</literal></expr>, <expr><literal type="number">13300</literal></expr>, <expr><literal type="number">13674</literal></expr>, <expr><literal type="number">14027</literal></expr>, <expr><literal type="number">14352</literal></expr>, <expr><literal type="number">14716</literal></expr>, <expr><literal type="number">15117</literal></expr>, <expr><literal type="number">15477</literal></expr>, <expr><literal type="number">15824</literal></expr>,
<expr><literal type="number">16157</literal></expr>, <expr><literal type="number">16513</literal></expr>, <expr><literal type="number">16804</literal></expr>, <expr><literal type="number">17090</literal></expr>, <expr><literal type="number">17401</literal></expr>, <expr><literal type="number">17679</literal></expr>, <expr><literal type="number">17948</literal></expr>, <expr><literal type="number">18238</literal></expr>, <expr><literal type="number">18520</literal></expr>, <expr><literal type="number">18764</literal></expr>, <expr><literal type="number">19078</literal></expr>,
<expr><literal type="number">19381</literal></expr>, <expr><literal type="number">19640</literal></expr>, <expr><literal type="number">19921</literal></expr>, <expr><literal type="number">20205</literal></expr>, <expr><literal type="number">20500</literal></expr>, <expr><literal type="number">20813</literal></expr>, <expr><literal type="number">21162</literal></expr>, <expr><literal type="number">21465</literal></expr>, <expr><literal type="number">21794</literal></expr>, <expr><literal type="number">22137</literal></expr>, <expr><literal type="number">22453</literal></expr>,
<expr><literal type="number">22756</literal></expr>, <expr><literal type="number">23067</literal></expr>, <expr><literal type="number">23350</literal></expr>, <expr><literal type="number">23636</literal></expr>, <expr><literal type="number">23926</literal></expr>, <expr><literal type="number">24227</literal></expr>, <expr><literal type="number">24521</literal></expr>, <expr><literal type="number">24819</literal></expr>, <expr><literal type="number">25107</literal></expr>, <expr><literal type="number">25414</literal></expr>, <expr><literal type="number">25730</literal></expr>,
<expr><literal type="number">26120</literal></expr>, <expr><literal type="number">26497</literal></expr>, <expr><literal type="number">26895</literal></expr>, <expr><literal type="number">27344</literal></expr>, <expr><literal type="number">27877</literal></expr>, <expr><literal type="number">28463</literal></expr>, <expr><literal type="number">29426</literal></expr>, <expr><literal type="number">31355</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_nelly_delta_table</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">11725</literal></expr>, <expr><operator>-</operator><literal type="number">9420</literal></expr>, <expr><operator>-</operator><literal type="number">7910</literal></expr>, <expr><operator>-</operator><literal type="number">6801</literal></expr>, <expr><operator>-</operator><literal type="number">5948</literal></expr>, <expr><operator>-</operator><literal type="number">5233</literal></expr>, <expr><operator>-</operator><literal type="number">4599</literal></expr>, <expr><operator>-</operator><literal type="number">4039</literal></expr>, <expr><operator>-</operator><literal type="number">3507</literal></expr>, <expr><operator>-</operator><literal type="number">3030</literal></expr>, <expr><operator>-</operator><literal type="number">2596</literal></expr>,
<expr><operator>-</operator><literal type="number">2170</literal></expr>, <expr><operator>-</operator><literal type="number">1774</literal></expr>, <expr><operator>-</operator><literal type="number">1383</literal></expr>, <expr><operator>-</operator><literal type="number">1016</literal></expr>, <expr><operator>-</operator><literal type="number">660</literal></expr>, <expr><operator>-</operator><literal type="number">329</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">337</literal></expr>, <expr><literal type="number">696</literal></expr>, <expr><literal type="number">1085</literal></expr>, <expr><literal type="number">1512</literal></expr>, <expr><literal type="number">1962</literal></expr>, <expr><literal type="number">2433</literal></expr>,
<expr><literal type="number">2968</literal></expr>, <expr><literal type="number">3569</literal></expr>, <expr><literal type="number">4314</literal></expr>, <expr><literal type="number">5279</literal></expr>, <expr><literal type="number">6622</literal></expr>, <expr><literal type="number">8154</literal></expr>, <expr><literal type="number">10076</literal></expr>, <expr><literal type="number">12975</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>signed_shift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>i</name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>shift</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sum_bits</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NELLY_FILL_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>off</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>&gt;&gt;</operator><operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NELLY_BIT_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>headroom</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>la</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>la</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">31</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">30</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>*</operator><name>la</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>la</name> <operator>*=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>l</name></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_nelly_get_sample_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name><name>sbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_bitsum</name></decl>, <decl><type ref="prev"/><name>small_bitsum</name></decl>, <decl><type ref="prev"/><name>big_bitsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>shift_saved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>last_off</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>big_off</name></decl>, <decl><type ref="prev"/><name>small_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NELLY_FILL_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <call><name>headroom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NELLY_FILL_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>signed_shift</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>sbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>sbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_saved</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>NELLY_DETAIL_BITS</name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <call><name>headroom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>small_off</name> <operator>=</operator> <operator>(</operator><name>NELLY_BASE_OFF</name> <operator>*</operator> <operator>(</operator><name>sum</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>shift_saved</name> <operator>-</operator> <operator>(</operator><name>NELLY_BASE_SHIFT</name><operator>+</operator><name>shift</name><operator>-</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>small_off</name> <operator>=</operator> <call><name>signed_shift</name><argument_list>(<argument><expr><name>small_off</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsum</name> <operator>=</operator> <call><name>sum_bits</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>shift_saved</name></expr></argument>, <argument><expr><name>small_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsum</name> <operator>!=</operator> <name>NELLY_DETAIL_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>bitsum</name> <operator>-</operator> <name>NELLY_DETAIL_BITS</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>shift</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">16383</literal></expr>;</condition> <incr><expr><name>shift</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>*</operator> <name>NELLY_BASE_OFF</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>shift_saved</name><operator>-</operator><operator>(</operator><name>NELLY_BASE_SHIFT</name><operator>+</operator><name>shift</name><operator>-</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>signed_shift</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>last_off</name> <operator>=</operator> <name>small_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>small_off</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_bitsum</name> <operator>=</operator> <name>bitsum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsum</name> <operator>=</operator> <call><name>sum_bits</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>shift_saved</name></expr></argument>, <argument><expr><name>small_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitsum</name><operator>-</operator><name>NELLY_DETAIL_BITS</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>last_bitsum</name><operator>-</operator><name>NELLY_DETAIL_BITS</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bitsum</name> <operator>&gt;</operator> <name>NELLY_DETAIL_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>big_off</name> <operator>=</operator> <name>small_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>small_off</name> <operator>=</operator> <name>last_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big_bitsum</name><operator>=</operator><name>bitsum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>small_bitsum</name><operator>=</operator><name>last_bitsum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>big_off</name> <operator>=</operator> <name>last_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big_bitsum</name><operator>=</operator><name>last_bitsum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>small_bitsum</name><operator>=</operator><name>bitsum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>bitsum</name> <operator>!=</operator> <name>NELLY_DETAIL_BITS</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>big_off</name><operator>+</operator><name>small_off</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitsum</name> <operator>=</operator> <call><name>sum_bits</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>shift_saved</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitsum</name> <operator>&gt;</operator> <name>NELLY_DETAIL_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>big_off</name><operator>=</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big_bitsum</name><operator>=</operator><name>bitsum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>small_off</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>small_bitsum</name><operator>=</operator><name>bitsum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>big_bitsum</name><operator>-</operator><name>NELLY_DETAIL_BITS</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<call><name>abs</name><argument_list>(<argument><expr><name>small_bitsum</name><operator>-</operator><name>NELLY_DETAIL_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bitsum</name> <operator>=</operator> <name>small_bitsum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>small_off</name> <operator>=</operator> <name>big_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitsum</name> <operator>=</operator> <name>big_bitsum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NELLY_FILL_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>sbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>small_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name><operator>&gt;&gt;</operator><operator>(</operator><name>shift_saved</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NELLY_BIT_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bitsum</name> <operator>&gt;</operator> <name>NELLY_DETAIL_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>NELLY_DETAIL_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>tmp</name> <operator>-</operator> <name>NELLY_DETAIL_BITS</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NELLY_FILL_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
