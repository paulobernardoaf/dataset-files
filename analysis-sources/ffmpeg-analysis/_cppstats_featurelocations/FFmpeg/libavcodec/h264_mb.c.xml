<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_mb.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_lowest_part_list_y</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>raw_my</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_height_down</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>raw_my</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_my</name> <init>= <expr><operator>(</operator><name>raw_my</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>y_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><name>full_my</name> <operator>+</operator> <name>filter_height_down</name> <operator>+</operator> <name>height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_lowest_part_y</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>refs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list0</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nrefs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref_n</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>tf</name><operator>.</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator>
<operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>get_lowest_part_list_y</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nrefs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref_n</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>tf</name><operator>.</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator>
<operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>get_lowest_part_list_y</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nrefs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref_n</name></expr>]</index></name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>await_references</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>refs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>nrefs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>, <decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_16X8</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_8X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sub_mb_type</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SUB_8X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SUB_8X4</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>y_offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SUB_4X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>IS_SUB_4X4</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sub_y_offset</name> <init>= <expr><name>y_offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_lowest_part_y</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sub_y_offset</name></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>list</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ref</name> <operator>&lt;</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <name><name>nrefs</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ref</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>refs</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>ref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref_pic</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>ref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_field</name> <init>= <expr><name><name>ref_pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_field_picture</name> <init>= <expr><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>field_picture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name>ref_field_picture</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>&lt;&lt;=</operator> <call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nrefs</name><index>[<expr><name>list</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ref_field_picture</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>!</operator><operator>(</operator><name>row</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>pic_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>pic_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>ref_field_picture</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>row</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ref_field</name></expr></argument>,
<argument><expr><name>pic_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pic_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ref_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pic_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_dir_part</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>square</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_x_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_op</name></decl></parameter>,
<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_op</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mx</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_x_offset</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>src_y_offset</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>luma_xy</name> <init>= <expr><operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>full_mx</name> <init>= <expr><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>full_my</name> <init>= <expr><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pic_width</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pic_height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ysh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_width</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>my</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_height</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>full_mx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>-</operator> <name>extra_width</name> <operator>||</operator>
<name><name>full_my</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>-</operator> <name>extra_height</name> <operator>||</operator>
<name>full_mx</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> &gt;</argument_list></name> <name>pic_width</name> <operator>+</operator> <name>extra_width</name> <operator>||</operator>
<name>full_my</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> &gt;</argument_list></name> <name>pic_height</name> <operator>+</operator> <name>extra_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src_y</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument> , <argument><expr><name>full_mx</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>full_my</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pic_width</name></expr></argument>, <argument><expr><name>pic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>src_y</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>square</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name>src_y</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>src_cb</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src_cb</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument> ,
<argument><expr><name>full_mx</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>full_my</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>pic_width</name></expr></argument>, <argument><expr><name>pic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cb</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>src_cb</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>square</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_cb</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name>src_cb</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src_cr</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,
<argument><expr><name>src_cr</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument> ,
<argument><expr><name>full_mx</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>full_my</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>pic_width</name></expr></argument>, <argument><expr><name>pic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cr</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>src_cr</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>square</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_cr</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name>src_cr</name> <operator>+</operator> <name>delta</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ysh</name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>|=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <operator>(</operator><name>pic_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_cb</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>ysh</name><operator>)</operator> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cr</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>ysh</name><operator>)</operator> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src_cb</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>chroma_idc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>ysh</name><operator>)</operator></expr></argument>,
<argument><expr><name>pic_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pic_height</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cb</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>chroma_op</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>src_cb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>,
<argument><expr><name>height</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument>,
<argument><expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>my</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src_cr</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>chroma_idc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>ysh</name><operator>)</operator></expr></argument>,
<argument><expr><name>pic_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pic_height</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cr</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>chroma_op</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>src_cr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument>,
<argument><expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>my</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>chroma_idc</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_part_std</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>square</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_put</name></decl></parameter>,
<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_put</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_avg</name></decl></parameter>,
<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_avg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_op</name> <init>= <expr><name>qpix_put</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_op</name> <init>= <expr><name>chroma_put</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>x_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>square</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><name>chroma_op</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qpix_op</name> <operator>=</operator> <name>qpix_avg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_op</name> <operator>=</operator> <name>chroma_avg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>square</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><name>chroma_op</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_part_weighted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>square</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_put</name></decl></parameter>,
<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_put</name></decl></parameter>,
<parameter><decl><type><name>h264_weight_func</name></type> <name>luma_weight_op</name></decl></parameter>,
<parameter><decl><type><name>h264_weight_func</name></type> <name>chroma_weight_op</name></decl></parameter>,
<parameter><decl><type><name>h264_biweight_func</name></type> <name>luma_weight_avg</name></decl></parameter>,
<parameter><decl><type><name>h264_biweight_func</name></type> <name>chroma_weight_avg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_weight_avg</name> <operator>=</operator> <name>luma_weight_avg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_weight_op</name> <operator>=</operator> <name>luma_weight_op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>chroma_height</name> <operator>=</operator> <name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><name>x_offset</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>x_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list0</name> <operator>&amp;&amp;</operator> <name>list1</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_cb</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_cr</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refn0</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refn1</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>refn0</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>square</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>qpix_put</name></expr></argument>, <argument><expr><name>chroma_put</name></expr></argument>,
<argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>refn1</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>square</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>tmp_y</name></expr></argument>, <argument><expr><name>tmp_cb</name></expr></argument>, <argument><expr><name>tmp_cr</name></expr></argument>,
<argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>qpix_put</name></expr></argument>, <argument><expr><name>chroma_put</name></expr></argument>,
<argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>weight0</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>implicit_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight1</name> <init>= <expr><literal type="number">64</literal> <operator>-</operator> <name>weight0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luma_weight_avg</name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>tmp_y</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>,
<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>weight0</name></expr></argument>, <argument><expr><name>weight1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>chroma_weight_avg</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>tmp_cb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>,
<argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>weight0</name></expr></argument>, <argument><expr><name>weight1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chroma_weight_avg</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>tmp_cr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>,
<argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>weight0</name></expr></argument>, <argument><expr><name>weight1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>luma_weight_avg</name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>tmp_y</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>chroma_weight_avg</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>tmp_cb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chroma_weight_avg</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>tmp_cr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>list</name> <init>= <expr><ternary><condition><expr><name>list1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refn</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>refn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>square</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>list</name></expr></argument>,
<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,
<argument><expr><name>qpix_put</name></expr></argument>, <argument><expr><name>chroma_put</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luma_weight_op</name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight_chroma</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>chroma_weight_op</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chroma_weight_op</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>refn</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>prefetch_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chroma_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>refn</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>refn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>refn</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>mx</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>my</name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>+</operator>
<operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_idc</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>off</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>mx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">64</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pixel_shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>my</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>*</operator><name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>xchg_mb_border</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvlinesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xchg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma444</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>deblock_topleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deblock_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border_m1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name> <operator>&amp;&amp;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>top_idx</name> <operator>=</operator> <ternary><condition><expr><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deblock_topleft</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>==</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>deblock_top</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>deblock_topleft</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>deblock_top</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;</operator> <operator>!</operator><operator>!</operator><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src_y</name> <operator>-=</operator> <name>linesize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pixel_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cb</name> <operator>-=</operator> <name>uvlinesize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pixel_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_cr</name> <operator>-=</operator> <name>uvlinesize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pixel_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top_border_m1</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_border</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCHG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>xchg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (pixel_shift) { if (xchg) { AV_SWAP64(b + 0, a + 0); AV_SWAP64(b + 8, a + 8); } else { AV_COPY128(b, a); } } else if (xchg) AV_SWAP64(b, a); else AV_COPY64(b, a);</cpp:value></cpp:define>












<if_stmt><if>if <condition>(<expr><name>deblock_top</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deblock_topleft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>src_y</name> <operator>-</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <operator>(</operator><literal type="number">9</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>src_y</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>simple</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deblock_topleft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>-</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <operator>(</operator><literal type="number">40</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>-</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <operator>(</operator><literal type="number">9</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">32</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">40</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <operator>(</operator><literal type="number">9</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">32</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deblock_topleft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>-</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border_m1</name> <operator>+</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>-</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pixel_shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pixel_shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dctcoef_get</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high_bit_depth</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>mb</name><operator>)</operator> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><name>mb</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>dctcoef_set</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high_bit_depth</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>mb</name><operator>)</operator> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><name>mb</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>hl_decode_mb_predict_luma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>transform_bypass</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_dc_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><ternary><condition><expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>block_offset</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idct_dc_add</name> <operator>=</operator>
<name>idct_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels8_clear</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idct_dc_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct8_dc_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idct_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct8_add</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name>dest_y</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dir</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>&lt;</operator> <literal type="number">151U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8l_add</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8l_filter_add</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>,</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator> <name>topleft_samples_available</name></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>,</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nnz</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8l</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>,</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_dc_add</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_add</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idct_dc_add</name> <operator>=</operator>
<name>idct_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels4_clear</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idct_dc_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct_dc_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idct_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct_add</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name>dest_y</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dir</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>transform_bypass</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred4x4_add</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nnz</name></decl>, <decl><type ref="prev"/><name>tr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tr_high</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>DIAG_DOWN_LEFT_PRED</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <name>VERT_LEFT_PRED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>topright_avail</name> <init>= <expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>||</operator> <name>linesize</name> <operator>&lt;=</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>topright_avail</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tr_high</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>linesize</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tr_high</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tr</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>linesize</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>-</operator> <name>linesize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred4x4</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>topright</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_dc_add</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_add</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred16x16</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>LUMA_DC_BLOCK_INDEX</name> <operator>+</operator> <name>p</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transform_bypass</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_luma_dc_dequant_idct</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dc_mapping</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">16</literal></expr>,
<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">16</literal></expr>,
<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">9</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">13</literal> <operator>*</operator> <literal type="number">16</literal></expr>,
<expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">11</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">14</literal> <operator>*</operator> <literal type="number">16</literal></expr>, <expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">16</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dctcoef_set</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name><name>dc_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>hl_decode_mb_idct_luma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>transform_bypass</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>block_offset</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA16x16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name> <operator>==</operator> <name>VERT_PRED8x8</name> <operator>||</operator>
<name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name> <operator>==</operator> <name>HOR_PRED8x8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred16x16_add</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>block_offset</name><operator>,</operator>
<name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator><operator>,</operator>
<name>linesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name> <operator>||</operator>
<call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels4_clear</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct_add16intra</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>di</name> <init>= <expr><ternary><condition><expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idct_add</name> <operator>=</operator> <ternary><condition><expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels8_clear</name></name></expr>
</then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels4_clear</name></name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>di</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_add</name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct8_add4</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct_add16</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mb_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BITS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mb_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMPLE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mb_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_h264_hl_decode_mb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_complex</name> <init>= <expr><name>CONFIG_SMALL</name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>is_complex</name></name> <operator>||</operator>
<call><name>IS_INTRA_PCM</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_complex</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hl_decode_mb_444_complex</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hl_decode_mb_444_simple_8</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_complex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hl_decode_mb_complex</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hl_decode_mb_simple_16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hl_decode_mb_simple_8</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
