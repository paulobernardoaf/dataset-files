<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dvd_nav_parser.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCI_SIZE</name></cpp:macro> <cpp:value>980</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSI_SIZE</name></cpp:macro> <cpp:value>1018</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>DVDNavParseContext</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>PCI_SIZE</name><operator>+</operator><name>DSI_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copied</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVDNavParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvd_nav_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDNavParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>lba</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>copied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvd_nav_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDNavParseContext</name> <modifier>*</modifier></type><name>pc1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastPacket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">90000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <name>PCI_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lba</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>startpts</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>endpts</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>endpts</name> <operator>&gt;</operator> <name>startpts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc1</name><operator>-&gt;</operator><name>lba</name></name> <operator>=</operator> <name>lba</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>startpts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>endpts</name> <operator>-</operator> <name>startpts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pc1</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>PCI_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc1</name><operator>-&gt;</operator><name>copied</name></name> <operator>=</operator> <name>PCI_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>==</operator> <name>DSI_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pc1</name><operator>-&gt;</operator><name>copied</name></name> <operator>==</operator> <name>PCI_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lba</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lba</name> <operator>==</operator> <name><name>pc1</name><operator>-&gt;</operator><name>lba</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pc1</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc1</name><operator>-&gt;</operator><name>copied</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>DSI_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name> <operator>||</operator> <name>lastPacket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc1</name><operator>-&gt;</operator><name>copied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc1</name><operator>-&gt;</operator><name>lba</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastPacket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name><name>pc1</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pc1</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_dvd_nav_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_DVD_NAV</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVDNavParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>dvd_nav_parse_init</name></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>dvd_nav_parse</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
