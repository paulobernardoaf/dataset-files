<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vdpau_hevc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_hevc_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoHEVC</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hevc</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_YCBCR_FORMAT_Y_U_V_444</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoHEVC444</name> <modifier>*</modifier></type><name>info2</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hevc_444</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SliceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScalingList</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_min_transform_block_size_minus2</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_diff_max_min_transform_block_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_list_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>pos</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan4x4_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan4x4_x</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingList4x4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pos</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan8x8_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan8x8_x</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingList8x8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingList16x16</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingList32x32</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingListDCCoeff16x16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ScalingListDCCoeff32x32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_luma_minus1</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_chroma_minus1</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_diff_max_min_pcm_luma_coding_block_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_max_pcm_cb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pcm_loop_filter_disabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>strong_intra_smoothing_enabled_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sign_data_hiding_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_cb_qp_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_cr_qp_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_slice_chroma_qp_offsets_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>transquant_bypass_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>column_width_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>row_height_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_loop_filter_across_slices_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>seq_loop_filter_across_slices_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_deblocking_filter_disabled_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_beta_offset_div2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pps_tc_offset_div2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_parallel_merge_level_minus2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>slice_segment_header_extension_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>IDRPicFlag</name></name> <operator>=</operator> <call><name>IS_IDR</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RAPPicFlag</name></name> <operator>=</operator> <call><name>IS_IRAP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>CurrRpsIdx</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>short_term_ref_pic_set_sps_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>short_term_rps</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_rps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>CurrRpsIdx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocTotalCurr</name></name> <operator>=</operator> <call><name>ff_hevc_frame_nb_refs</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>short_term_ref_pic_set_sps_flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>short_term_rps</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumDeltaPocsOfRefRpsIdx</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>short_term_rps</name><operator>-&gt;</operator><name>rps_idx_num_delta_pocs</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumShortTermPictureSliceHeaderBits</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>short_term_ref_pic_set_size</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumLongTermPictureSliceHeaderBits</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>long_term_ref_pic_set_size</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>CurrPicOrderCntVal</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RefPics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>IsLongTerm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ref</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HEVC_FRAME_FLAG_LONG_REF</name> <operator>|</operator>
<name>HEVC_FRAME_FLAG_SHORT_REF</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VDPAU only supports up to 16 references in the DPB. "</literal>
<literal type="string">"This frame may not be decoded correctly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RefPics</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>IsLongTerm</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrBefore</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrBefore</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VDPAU only supports up to 8 references in StCurrBefore. "</literal>
<literal type="string">"This frame may not be decoded correctly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrBefore</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrAfter</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrAfter</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VDPAU only supports up to 8 references in StCurrAfter. "</literal>
<literal type="string">"This frame may not be decoded correctly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocStCurrAfter</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocLtCurr</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>NumPocLtCurr</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VDPAU only supports up to 8 references in LtCurr. "</literal>
<literal type="string">"This frame may not be decoded correctly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>NumPocLtCurr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name> <init>= <expr><call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>RefPics</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RefPicSetStCurrBefore</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing surface: %p\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing STR Before frame: %zd\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name> <init>= <expr><call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>RefPics</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RefPicSetStCurrAfter</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing surface: %p\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing STR After frame: %zd\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name> <init>= <expr><call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>RefPics</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>RefPicSetLtCurr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing surface: %p\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing LTR frame: %zd\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_YCBCR_FORMAT_Y_U_V_444</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>transformSkipRotationEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_rotation_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>transformSkipContextEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>implicitRdpcmEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>explicitRdpcmEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>explicit_rdpcm_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>extendedPrecisionProcessingFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>extended_precision_processing_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>intraSmoothingDisabledFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>highPrecisionOffsetsEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>high_precision_offsets_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>persistentRiceAdaptationEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>cabacBypassAlignmentEnableFlag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>cabac_bypass_alignment_enabled_flag</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_range_extensions_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>pps_range_extension_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>log2MaxTransformSkipSize</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>crossComponentPredictionEnableFlag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cross_component_prediction_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>chromaQpAdjustmentEnableFlag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>diffCuChromaQpAdjustmentDepth</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_chroma_qp_offset_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>chromaQpAdjustmentTableSize</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>log2SaoOffsetScaleLuma</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_luma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>log2SaoOffsetScaleChroma</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_chroma</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info2</name><operator>-&gt;</operator><name>chromaQpAdjustmentTableSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>cb_qp_adjustment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>cr_qp_adjustment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>pps_range_extension_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ff_vdpau_common_start_frame</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code_prefix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_hevc_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>start_code_prefix</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_hevc_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_hevc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>level</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_HEVC_MAIN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN_10</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_HEVC_MAIN_10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN_STILL_PICTURE</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_HEVC_MAIN_STILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_HEVC_REXT</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_HEVC_MAIN_444</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><call><name>ff_vdpau_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_vdpau_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_vdpau"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vdpau_hevc_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>vdpau_hevc_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vdpau_hevc_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vdpau_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vdpau_hevc_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vdpau_common_uninit</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vdpau_common_frame_params</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
