<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacpsdsp_template.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacpsdsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_add_squares_c</name><argument_list>(<argument><expr><name>INTFLOAT</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><call><name>AAC_MADD28</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_mul_pair_single_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>src0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>src1</name></expr></argument>,
<argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL16</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL16</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_hybrid_analysis_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><name>ptrdiff_t</name> <name>stride</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>sum_re</name> <init>= <expr><operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>sum_im</name> <init>= <expr><operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>in0_re</name> <init>= <expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>in0_im</name> <init>= <expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>in1_re</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">12</literal><operator>-</operator><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>in1_im</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">12</literal><operator>-</operator><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum_re</name> <operator>+=</operator> <operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>in0_re</name> <operator>+</operator> <name>in1_re</name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>in0_im</name> <operator>-</operator> <name>in1_im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_im</name> <operator>+=</operator> <operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>in0_im</name> <operator>+</operator> <name>in1_im</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>in0_re</name> <operator>-</operator> <name>in1_re</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>sum_re</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>sum_im</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum_re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum_im</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_hybrid_analysis_ileave_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>INTFLOAT</name> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>int</name> <name>i</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_hybrid_synthesis_deint_c</name><argument_list>(<argument><expr><name>INTFLOAT</name> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>i</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_decorrelate_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>delay</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>ap_delay</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_QMF_TIME_SLOTS</name> <operator>+</operator> <name>PS_MAX_AP_DELAY</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <name><name>phi_fract</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Q_fract</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <operator>*</operator><name>transient_gain</name></expr></argument>,
<argument><expr><name>INTFLOAT</name> <name>g_decay_slope</name></expr></argument>,
<argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>a</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.65143905753106f</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.56471812200776f</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>Q31</name><argument_list>(<argument><literal type="number">0.48954165955695f</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>ag</name><index>[<expr><name>PS_AP_LINKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>PS_AP_LINKS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ag</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>g_decay_slope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>in_re</name> <init>= <expr><call><name>AAC_MSUB30</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi_fract</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi_fract</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>in_im</name> <init>= <expr><call><name>AAC_MADD30</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi_fract</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>phi_fract</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>PS_AP_LINKS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>a_re</name> <init>= <expr><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ag</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>a_im</name> <init>= <expr><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ag</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>link_delay_re</name> <init>= <expr><name><name>ap_delay</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal><operator>-</operator><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>link_delay_im</name> <init>= <expr><name><name>ap_delay</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal><operator>-</operator><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>fractional_delay_re</name> <init>= <expr><name><name>Q_fract</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>fractional_delay_im</name> <init>= <expr><name><name>Q_fract</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>apd_re</name> <init>= <expr><name>in_re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>apd_im</name> <init>= <expr><name>in_im</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>in_re</name> <operator>=</operator> <call><name>AAC_MSUB30</name><argument_list>(<argument><expr><name>link_delay_re</name></expr></argument>, <argument><expr><name>fractional_delay_re</name></expr></argument>,
<argument><expr><name>link_delay_im</name></expr></argument>, <argument><expr><name>fractional_delay_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_re</name> <operator>-=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name>a_re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_im</name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>link_delay_re</name></expr></argument>, <argument><expr><name>fractional_delay_im</name></expr></argument>,
<argument><expr><name>link_delay_im</name></expr></argument>, <argument><expr><name>fractional_delay_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_im</name> <operator>-=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name>a_im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_delay</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>apd_re</name> <operator>+</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ag</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_delay</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>apd_im</name> <operator>+</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ag</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL16</name><argument_list>(<argument><expr><name><name>transient_gain</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL16</name><argument_list>(<argument><expr><name><name>transient_gain</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>in_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_stereo_interpolate_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><name>INTFLOAT</name> <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>INTFLOAT</name> <name><name>h_step</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h0</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h1</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h2</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h3</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs0</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs1</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs2</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs3</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>l_re</name> <init>= <expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>l_im</name> <init>= <expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>r_re</name> <init>= <expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>r_im</name> <init>= <expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h0</name> <operator>+=</operator> <name>hs0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>hs1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>hs2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>+=</operator> <name>hs3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>h0</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>h0</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ps_stereo_interpolate_ipdopd_c</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,
<argument><expr><name>INTFLOAT</name> <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>INTFLOAT</name> <name><name>h_step</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h00</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h10</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h01</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h11</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h02</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h12</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h03</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h13</name> <init>= <expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs00</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hs10</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs01</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hs11</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs02</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hs12</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINTFLOAT</name></type> <name>hs03</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hs13</name> <init>= <expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>l_re</name> <init>= <expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>l_im</name> <init>= <expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>r_re</name> <init>= <expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>r_im</name> <init>= <expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h00</name> <operator>+=</operator> <name>hs00</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h01</name> <operator>+=</operator> <name>hs01</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h02</name> <operator>+=</operator> <name>hs02</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h03</name> <operator>+=</operator> <name>hs03</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h10</name> <operator>+=</operator> <name>hs10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h11</name> <operator>+=</operator> <name>hs11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h12</name> <operator>+=</operator> <name>hs12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h13</name> <operator>+=</operator> <name>hs13</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB30_V8</name><argument_list>(<argument><expr><name>h00</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h02</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>, <argument><expr><name>h10</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h12</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30_V8</name><argument_list>(<argument><expr><name>h00</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h02</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>, <argument><expr><name>h10</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h12</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB30_V8</name><argument_list>(<argument><expr><name>h01</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h03</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h13</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MADD30_V8</name><argument_list>(<argument><expr><name>h01</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>h03</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>h13</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_psdsp_init</name>)<parameter_list>(<parameter><decl><type><name>PSDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>add_squares</name></name> <operator>=</operator> <name>ps_add_squares_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mul_pair_single</name></name> <operator>=</operator> <name>ps_mul_pair_single_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_analysis</name></name> <operator>=</operator> <name>ps_hybrid_analysis_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_analysis_ileave</name></name> <operator>=</operator> <name>ps_hybrid_analysis_ileave_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_synthesis_deint</name></name> <operator>=</operator> <name>ps_hybrid_synthesis_deint_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <name>ps_decorrelate_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_interpolate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ps_stereo_interpolate_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_interpolate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ps_stereo_interpolate_ipdopd_c</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_psdsp_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_psdsp_init_aarch64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_psdsp_init_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_psdsp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
