<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hap.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_HAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_HAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<enum>enum <name>HapTextureFormat</name> <block>{
<decl><name>HAP_FMT_RGBDXT1</name> <init>= <expr><literal type="number">0x0B</literal></expr></init></decl>,
<decl><name>HAP_FMT_RGBADXT5</name> <init>= <expr><literal type="number">0x0E</literal></expr></init></decl>,
<decl><name>HAP_FMT_YCOCGDXT5</name> <init>= <expr><literal type="number">0x0F</literal></expr></init></decl>,
<decl><name>HAP_FMT_RGTC1</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>HapCompressor</name> <block>{
<decl><name>HAP_COMP_NONE</name> <init>= <expr><literal type="number">0xA0</literal></expr></init></decl>,
<decl><name>HAP_COMP_SNAPPY</name> <init>= <expr><literal type="number">0xB0</literal></expr></init></decl>,
<decl><name>HAP_COMP_COMPLEX</name> <init>= <expr><literal type="number">0xC0</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>HapSectionType</name> <block>{
<decl><name>HAP_ST_DECODE_INSTRUCTIONS</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>HAP_ST_COMPRESSOR_TABLE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>HAP_ST_SIZE_TABLE</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>HAP_ST_OFFSET_TABLE</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>HapChunk</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>HapCompressor</name></name></type> <name>compressor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compressed_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uncompressed_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>HapChunk</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HapContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TextureDSPContext</name></type> <name>dxtc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HapTextureFormat</name></name></type> <name>opt_tex_fmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>opt_chunk_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>opt_compressor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chunk_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HapChunk</name> <modifier>*</modifier></type><name>chunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>chunk_results</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tex_rat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tex_rat2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tex_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tex_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>tex_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>max_snappy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>texture_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>texture_section_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>uncompress_pix_size</name></decl>;</decl_stmt> 


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>tex_fun</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>tex_fun2</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>HapContext</name>;</typedef>






<function_decl><type><name>int</name></type> <name>ff_hap_set_chunk_count</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_in_frame</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_hap_free_context</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_hap_parse_section_header</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>section_size</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>HapSectionType</name></name> <modifier>*</modifier></type><name>section_type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
