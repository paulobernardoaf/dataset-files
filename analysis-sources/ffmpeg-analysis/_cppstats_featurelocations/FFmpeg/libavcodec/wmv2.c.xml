<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\wmv2.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2data.h"</cpp:file></cpp:include>


<function><type><name>av_cold</name> <name>void</name></type> <name>ff_wmv2_common_init</name><parameter_list>(<parameter><decl><type><name>Wmv2Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_wmv2dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>wdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable_permutation</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>abt_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ff_wmv2_scantableA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>abt_scantable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ff_wmv2_scantableB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_h_scantable</name></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_v_scantable</name></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_put</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_add</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wmv2_add_block</name><parameter_list>(<parameter><decl><type><name>Wmv2Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>abt_type_table</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>ff_simple_idct84_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_simple_idct84_add</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>abt_block2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>abt_block2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>ff_simple_idct48_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_simple_idct48_add</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>abt_block2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>abt_block2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error in WMV2 abt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_wmv2_add_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block1</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wmv2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name> <init>= <expr><operator>(</operator><name>Wmv2Context</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmv2_add_block</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>block1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>ff_mspel_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>, <argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>, <argument><expr><name>int</name> <name>motion_y</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wmv2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name> <init>= <expr><operator>(</operator><name>Wmv2Context</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>v_edge_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dxy</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dxy</name> <operator>+</operator> <name><name>w</name><operator>-&gt;</operator><name>hshift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>v_edge_pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">16</literal> <operator>||</operator> <name>src_x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">16</literal> <operator>||</operator> <name>src_y</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>linesize</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>src_y</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>src_x</name> <operator>+</operator> <literal type="number">17</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>||</operator>
<name>src_y</name> <operator>+</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>v_edge_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>,
<argument><expr><name>src_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>put_mspel_pixels_tab</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>put_mspel_pixels_tab</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>ptr</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>put_mspel_pixels_tab</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name><operator>,</operator> <name>ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>put_mspel_pixels_tab</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name><operator>,</operator> <name>ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>my</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
