<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\twinvqdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twinvq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twinvq_data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_08_08</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s08_64</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb08s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808s1</name></name></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m08_256</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb08m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808m1</name></name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l08_512</name></expr>, <expr><literal type="number">30</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb08l</name></name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb0808l1</name></name></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp08</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape08</name></name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">40</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_11_08</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s11_64</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108s1</name></name></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m11_256</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108m1</name></name></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l11_512</name></expr>, <expr><literal type="number">30</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11l</name></name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1108l1</name></name></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp11</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape11</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">90</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_11_10</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s11_64</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110s1</name></name></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m11_256</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110m1</name></name></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l11_512</name></expr>, <expr><literal type="number">30</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb11l</name></name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1110l1</name></name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp11</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape11</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">90</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_16_16</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s16_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb16s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616s1</name></name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m16_512</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb16m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616m1</name></name></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l16_1024</name></expr>, <expr><literal type="number">30</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb16l</name></name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb1616l1</name></name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp16</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape16</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">180</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_22_20</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s22_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22s_1</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220s1</name></name></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m22_512</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22m_1</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220m1</name></name></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l22_1024</name></expr>, <expr><literal type="number">32</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22l_1</name></name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2220l1</name></name></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp22_1</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape22_1</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">144</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_22_24</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>bark_tab_s22_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22s_1</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224s1</name></name></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m22_512</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22m_1</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224m1</name></name></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l22_1024</name></expr>, <expr><literal type="number">32</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22l_1</name></name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2224l1</name></name></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp22_1</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape22_1</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">144</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_22_32</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>bark_tab_s22_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22s_2</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232s1</name></name></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>bark_tab_m22_256</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22m_2</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232m1</name></name></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l22_512</name></expr>, <expr><literal type="number">32</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb22l_2</name></name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb2232l1</name></name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp22_2</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape22_2</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">72</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_44_40</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><name>bark_tab_s44_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440s1</name></name></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>bark_tab_m44_512</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440m1</name></name></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l44_2048</name></expr>, <expr><literal type="number">40</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44l</name></name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4440l1</name></name></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">2048</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp44</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape44</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">432</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TwinVQModeTab</name></type> <name>mode_44_48</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><name>bark_tab_s44_128</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44s</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448s0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448s1</name></name></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>bark_tab_m44_512</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44m</name></name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448m0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448m1</name></name></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>bark_tab_l44_2048</name></expr>, <expr><literal type="number">40</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>fcb44l</name></name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448l0</name></name></expr>, <expr><name><name>tab</name><operator>.</operator><name>cb4448l1</name></name></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>
}</block></expr>,
<expr><literal type="number">2048</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>lsp44</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name><name>tab</name><operator>.</operator><name>shape44</name></name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">432</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>very_broken_op</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>a</name> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rtab</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>%</operator> <literal type="number">400</literal> <operator>||</operator> <name>b</name> <operator>%</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name> <operator>/</operator> <literal type="number">400</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tabs</name><index>[<expr><name>b</name> <operator>/</operator> <literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtab</name> <operator>=</operator> <name><name>tabs</name><index>[<expr><name>b</name> <operator>/</operator> <literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>tab</name></expr>;</expr_stmt>
<return>return <expr><name>x</name> <operator>-</operator> <name><name>rtab</name><index>[<expr><name>size</name> <operator>*</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>size</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>add_peak</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>ppc_gain</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape_end</name> <init>= <expr><name>shape</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>speech</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>center</name> <operator>=</operator> <call><name>very_broken_op</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>speech</name><index>[<expr><name>j</name> <operator>+</operator> <name>center</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>center</name> <operator>=</operator> <call><name>very_broken_op</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>shape</name> <operator>&lt;</operator> <name>shape_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>speech</name><index>[<expr><name>j</name> <operator>+</operator> <name>center</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ppc</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>period_coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g_coef</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isampf</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ibps</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_period</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><literal type="number">40</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>isampf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_period</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><literal type="number">40</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>isampf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>period_range</name> <init>= <expr><name>max_period</name> <operator>-</operator> <name>min_period</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pgain_step</name> <init>= <expr><literal type="number">25000.0</literal> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>pgain_bit</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ppc_gain</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8192</literal> <operator>*</operator>
<call><name>twinvq_mulawinv</name><argument_list>(<argument><expr><name>pgain_step</name> <operator>*</operator> <name>g_coef</name> <operator>+</operator>
<name>pgain_step</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">25000.0</literal></expr></argument>, <argument><expr><name>TWINVQ_PGAIN_MU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>period</name> <init>= <expr><name>min_period</name> <operator>+</operator>
<call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>period_coef</name> <operator>*</operator> <name>period_range</name></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_period_bit</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isampf</name> <operator>==</operator> <literal type="number">22</literal> <operator>&amp;&amp;</operator> <name>ibps</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><name>period</name> <operator>+</operator> <literal type="number">800</literal><operator>)</operator> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>peak_per2wid</name></name></expr></argument>,
<argument><expr><literal type="number">400</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>period</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>peak_per2wid</name></name> <operator>/</operator> <operator>(</operator><literal type="number">400</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>add_peak</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ppc_gain</name></expr></argument>, <argument><expr><name>speech</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dec_bark_env</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_hist</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>bark_hist</name><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name><name>float</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.35</literal></expr>, <expr><literal type="number">0.28</literal></expr> }</block><operator>)</operator><index>[<expr><name>ftype</name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bark_n_coef</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>bark_n_coef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fw_cb_len</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>bark_env_size</name> <operator>/</operator> <name>bark_n_coef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fw_cb_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bark_n_coef</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tmp2</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_cb</name><index>[<expr><name>fw_cb_len</name> <operator>*</operator> <name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4096</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>st</name> <init>= <expr><ternary><condition><expr><name>use_hist</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>val</name><operator>)</operator> <operator>*</operator> <name>tmp2</name> <operator>+</operator> <name>val</name> <operator>*</operator> <name><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.0</literal></expr>
</then><else>: <expr><name>tmp2</name> <operator>+</operator> <literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>twinvq_memset_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>st</name> <operator>*</operator> <name>gain</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cb_data</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>ftype</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bs_second_part</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec_change</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bs_second_part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bs_second_part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>twinvq_read_bitstream</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TwinVQFrameData</name> <modifier>*</modifier></type><name>bits</name> <init>= <expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>window_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_WINDOW_TYPE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>window_type</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid window type, broken sample?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name><name>ff_twinvq_wtype_to_ftype_table</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>window_type</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_cb_data</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>main_coeffs</name></name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>bark_n_coef</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>bark1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>
<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>bark_n_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>bark_use_hist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>sub_gain_bits</name><index>[<expr><name>i</name> <operator>*</operator> <name>sub</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>,
<argument><expr><name>TWINVQ_SUB_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_hist_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_cb_data</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>ppc_coeffs</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>p_coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_period_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>g_coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>pgain_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>twinvq_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>isampf</name></decl>, <decl><type ref="prev"/><name>ibps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing or incomplete extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>isampf</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isampf</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>isampf</name></expr></argument> &gt;</argument_list></name> <literal type="number">44</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>isampf</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">44</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">22050</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">11025</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>isampf</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>TWINVQ_CHANNELS_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels: %i\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr>
</then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ibps</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ibps</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>ibps</name></expr></argument> &gt;</argument_list></name> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad bitrate per channel value %d\n"</literal></expr></argument>, <argument><expr><name>ibps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>isampf</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ibps</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_08_08</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_11_08</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_11_10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_16_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">22</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">20</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_22_20</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">22</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_22_24</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">22</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_22_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">40</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_44_40</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">48</literal></expr>:</case>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>mode_44_48</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"This version does not support %d kHz - %d kbit/s/ch mode.\n"</literal></expr></argument>,
<argument><expr><name>isampf</name></expr></argument>, <argument><expr><name>isampf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>TWINVQ_CODEC_VQF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>read_bitstream</name></name> <operator>=</operator> <name>twinvq_read_bitstream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>dec_bark_env</name></name> <operator>=</operator> <name>dec_bark_env</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>decode_ppc</name></name> <operator>=</operator> <name>decode_ppc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>size</name></name>
<operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>is_6kbps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8LL</literal> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"VQF TwinVQ should have only one frame per packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_twinvq_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_twinvq_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"twinvq"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VQF TwinVQ"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TWINVQ</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TwinVQContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>twinvq_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_twinvq_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_twinvq_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
