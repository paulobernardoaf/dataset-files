<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegvideo_motion.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h261.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gmc1_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>motion_x</name></decl>, <decl><type ref="prev"/><name>motion_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_x</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>-</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>motion_x</name> <operator>|</operator> <name>motion_y</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc1</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>motion_x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>motion_y</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc1</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>motion_x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>motion_y</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>linesize</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>linesize</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_x</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc1</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>motion_x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>motion_y</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc1</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>motion_x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>motion_y</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gmc_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sprite_warping_accuracy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ox</name></decl>, <decl><type ref="prev"/><name>oy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>ox</name></expr></argument>, <argument><expr><name>oy</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>ox</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>oy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>ox</name></expr></argument>, <argument><expr><name>oy</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdsp</name><operator>.</operator><name>gmc</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>ox</name></expr></argument>, <argument><expr><name>oy</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sprite_delta</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hpel_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>,
<parameter><decl><type><name>op_pixels_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_x</name> <operator>+=</operator> <name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>+=</operator> <name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>|=</operator> <name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>|=</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest</name><operator>,</operator> <name>src</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>emu</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>mpeg_motion_internal</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>field_based</name></expr></argument>,
<argument><expr><name>int</name> <name>bottom_field</name></expr></argument>,
<argument><expr><name>int</name> <name>field_select</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>,
<argument><expr><name>int</name> <name>motion_y</name></expr></argument>,
<argument><expr><name>int</name> <name>h</name></expr></argument>,
<argument><expr><name>int</name> <name>is_mpeg12</name></expr></argument>,
<argument><expr><name>int</name> <name>is_16x8</name></expr></argument>,
<argument><expr><name>int</name> <name>mb_y</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>, <decl><type ref="prev"/><name>uvdxy</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>,
<decl><type ref="prev"/><name>uvsrc_x</name></decl>, <decl><type ref="prev"/><name>uvsrc_y</name></decl>, <decl><type ref="prev"/><name>v_edge_pos</name></decl>, <decl><type ref="prev"/><name>block_y_half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v_edge_pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_y_half</name> <operator>=</operator> <operator>(</operator><name>field_based</name> <operator>|</operator> <name>is_16x8</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>block_y_half</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_HPEL_CHROMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>field_based</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>block_y_half</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <name>dxy</name> <operator>|</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name>src_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>my</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>block_y_half</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <name>dxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">15</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>( <argument><expr><name>v_edge_pos</name> <operator>-</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_mpeg12</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"MPEG motion vector out of boundary (%d %d)\n"</literal></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,
<argument><expr><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">17</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ubuf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vbuf</name> <init>= <expr><name>ubuf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_IEDGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vbuf</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>uvsrc_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name>ubuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>bottom_field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field_select</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name>
<operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr_cb</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name>
<operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr_cr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CONFIG_H261_ENCODER</name> <operator>||</operator> <name>CONFIG_H261_DECODER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_h261_loop_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>mpeg_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>field_select</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>, <argument><expr><name>int</name> <name>motion_y</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>is_16x8</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpeg_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>field_select</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_16x8</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mpeg_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>field_select</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>is_16x8</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>mpeg_motion_field</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>bottom_field</name></expr></argument>, <argument><expr><name>int</name> <name>field_select</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>, <argument><expr><name>int</name> <name>motion_y</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpeg_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>bottom_field</name></expr></argument>, <argument><expr><name>field_select</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mpeg_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>bottom_field</name></expr></argument>, <argument><expr><name>field_select</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_obmc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>top</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>left</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mid</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>right</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bottom</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBMC_FILTER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>dst[x]= (t*top[x] + l*left[x] + m*mid[x] + r*right[x] + b*bottom[x] + 4)&gt;&gt;3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBMC_FILTER4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>OBMC_FILTER(x , t, l, m, r, b);OBMC_FILTER(x+1 , t, l, m, r, b);OBMC_FILTER(x +stride, t, l, m, r, b);OBMC_FILTER(x+1+stride, t, l, m, r, b);</cpp:value></cpp:define>





<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER4</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBMC_FILTER</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obmc_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>,
<parameter><decl><type><name>op_pixels_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>mv</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>mv</name><index>[<expr><name>MID</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>mv</name><index>[<expr><name>MID</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>MID</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hpel_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>put_obmc</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>qpel_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>field_based</name></expr></argument>, <argument><expr><name>int</name> <name>bottom_field</name></expr></argument>,
<argument><expr><name>int</name> <name>field_select</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>motion_x</name></expr></argument>, <argument><expr><name>int</name> <name>motion_y</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>, <decl><type ref="prev"/><name>uvdxy</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>uvsrc_x</name></decl>, <decl><type ref="prev"/><name>uvsrc_y</name></decl>, <decl><type ref="prev"/><name>v_edge_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v_edge_pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_based</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_QPEL_CHROMA2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rtab</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>rtab</name><index>[<expr><name>motion_x</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>rtab</name><index>[<expr><name>motion_y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_QPEL_CHROMA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvdxy</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>+</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">15</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>( <argument><expr><name>v_edge_pos</name> <operator>-</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">17</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>field_based</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ubuf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vbuf</name> <init>= <expr><name>ubuf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_IEDGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vbuf</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>field_based</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,
<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>field_based</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name>ubuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_based</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bottom_field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field_select</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>linesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr_cr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr_cb</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type> <name>chroma_4mv_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>,
<parameter><decl><type><name>op_pixels_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>dxy</name></decl>, <decl><type ref="prev"/><name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>offset</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>my</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>src_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>dxy</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>dxy</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>prefetch_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>mx</name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_obmc</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_8</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>mv_cache</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>cur_frame</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_xy</name> <init>= <expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>mot_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <name>mot_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <name>mot_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>mot_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator> <call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cur_frame</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>mot_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mv</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>mv_cache</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mv_cache</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mv_cache</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>mv_cache</name><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mv_cache</name><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obmc_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>chroma_4mv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_8x8</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>dir</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>motion_x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>motion_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>src_y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dxy</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>src_x</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>motion_y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dest_y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hpel_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>dest_y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>chroma_4mv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name><name>pix_op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>













<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mpv_motion_internal</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>,
<argument><expr><name>int</name> <name>dir</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name>is_mpeg12</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prefetch_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>obmc</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apply_obmc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MV_TYPE_16X16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mcsel</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>real_sprite_warping_points</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gmc1_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>gmc_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qpel_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>, <argument><expr><name>qpix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CONFIG_WMV2_DECODER</name> <operator>||</operator> <name>CONFIG_WMV2_ENCODER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>mspel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mspel_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mpeg_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_8X8</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_8x8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_FIELD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qpel_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>, <argument><expr><name>qpix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpeg_motion_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpeg_motion_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name>
<operator>||</operator> <operator>!</operator><name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpeg_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_16X8</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref2picture</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>first_field</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref2picture</name> <operator>=</operator> <name>ref_picture</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ref2picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mpeg_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ref2picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>mb_y</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>MV_TYPE_DMV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpeg_motion_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>^</operator> <name>i</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pix_op</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mpeg_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pix_op</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ff_mpv_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>, <argument><expr><name>int</name> <name>dir</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,
<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpv_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>, <argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mpv_motion_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>, <argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
