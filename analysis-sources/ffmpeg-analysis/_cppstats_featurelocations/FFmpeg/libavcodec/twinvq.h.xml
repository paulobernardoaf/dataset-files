<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\twinvq.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_TWINVQ_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_TWINVQ_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>TwinVQCodec</name> <block>{
<decl><name>TWINVQ_CODEC_VQF</name></decl>,
<decl><name>TWINVQ_CODEC_METASOUND</name></decl>,
}</block>;</enum>

<enum>enum <name>TwinVQFrameType</name> <block>{
<decl><name>TWINVQ_FT_SHORT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>TWINVQ_FT_MEDIUM</name></decl>, 
<decl><name>TWINVQ_FT_LONG</name></decl>, 
<decl><name>TWINVQ_FT_PPC</name></decl>, 
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_PPC_SHAPE_CB_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_PPC_SHAPE_LEN_MAX</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_SUB_AMP_MAX</name></cpp:macro> <cpp:value>4500.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_MULAW_MU</name></cpp:macro> <cpp:value>100.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_GAIN_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_AMP_MAX</name></cpp:macro> <cpp:value>13000.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_SUB_GAIN_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_WINDOW_TYPE_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_PGAIN_MU</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_LSP_COEFS_MAX</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_LSP_SPLIT_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_CHANNELS_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_SUBBLOCKS_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_BARK_N_COEF_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWINVQ_MAX_FRAMES_PER_PACKET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<struct>struct <name>TwinVQFrameMode</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>bark_tab</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>bark_env_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>bark_cb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bark_n_coef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bark_n_bit</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb1</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>cb_len_read</name></decl>;</decl_stmt> 
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>TwinVQFrameData</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>window_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>main_coeffs</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ppc_coeffs</name><index>[<expr><name>TWINVQ_PPC_SHAPE_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>gain_bits</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sub_gain_bits</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name> <operator>*</operator> <name>TWINVQ_SUBBLOCKS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bark1</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index><index>[<expr><name>TWINVQ_SUBBLOCKS_MAX</name></expr>]</index><index>[<expr><name>TWINVQ_BARK_N_COEF_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bark_use_hist</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index><index>[<expr><name>TWINVQ_SUBBLOCKS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lpc_idx1</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lpc_idx2</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index><index>[<expr><name>TWINVQ_LSP_SPLIT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lpc_hist_idx</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>p_coef</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>g_coef</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TwinVQFrameData</name>;</typedef>





<typedef>typedef <type><struct>struct <name>TwinVQModeTab</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>TwinVQFrameMode</name></name></type> <name><name>fmode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_lsp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lspcodebook</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>lsp_bit0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lsp_bit1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lsp_bit2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lsp_split</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ppc_shape_cb</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint8_t</name></type> <name>ppc_period_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ppc_shape_bit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ppc_shape_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pgain_bit</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint16_t</name></type> <name>peak_per2wid</name></decl>;</decl_stmt>
}</block></struct></type> <name>TwinVQModeTab</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TwinVQContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name></type> <name><name>mdct_ctx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_6kbps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_hist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>bark_hist</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int16_t</name></type> <name><name>permut</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>length</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>length_change</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits_main_spec</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>bits_main_spec_change</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>n_div</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>spectrum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>curr_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>prev_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>last_block_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discarded_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>cos_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>, <name>frames_per_packet</name>, <name>cur_frame</name>;</decl_stmt>
<decl_stmt><decl><type><name>TwinVQFrameData</name></type> <name><name>bits</name><index>[<expr><name>TWINVQ_MAX_FRAMES_PER_PACKET</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TwinVQCodec</name></name></type> <name>codec</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_bitstream</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>TwinVQContext</name></name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dec_bark_env</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TwinVQContext</name></name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>use_hist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode_ppc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TwinVQContext</name></name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>period_coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g_coef</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>TwinVQContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name><name>ff_twinvq_wtype_to_ftype_table</name><index>[]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>twinvq_memset_float</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>twinvq_mulawinv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>clip</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>y</name> <operator>/</operator> <name>clip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>clip</name> <operator>*</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><call><name>exp</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>mu</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>mu</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_twinvq_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_twinvq_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_twinvq_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
