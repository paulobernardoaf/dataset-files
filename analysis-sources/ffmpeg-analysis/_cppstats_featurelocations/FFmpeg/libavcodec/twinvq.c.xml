<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\twinvq.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twinvq.h"</cpp:file></cpp:include>













<function><type><specifier>static</specifier> <name>float</name></type> <name>eval_lpc_spectrum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cos_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>two_cos_w</name> <init>= <expr><literal type="number">2.0f</literal> <operator>*</operator> <name>cos_val</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>p</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>-</operator> <name>two_cos_w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>q</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>+</operator> <name>two_cos_w</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><name>p</name> <operator>+</operator> <name>q</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>eval_lpcenv</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cos_vals</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_s</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_SHORT</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size_s</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>cos_i</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>eval_lpc_spectrum</name><argument_list>(<argument><expr><name>cos_vals</name></expr></argument>, <argument><expr><name>cos_i</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>size_s</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>eval_lpc_spectrum</name><argument_list>(<argument><expr><name>cos_vals</name></expr></argument>, <argument><expr><operator>-</operator><name>cos_i</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>v1</name> <operator>-</operator> <name>v2</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v2</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>get_cos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cos_tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>part</name></expr> ?</condition><then> <expr><operator>-</operator><name><name>cos_tab</name><index>[<expr><name>size</name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>
</then><else>: <expr><name><name>cos_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>eval_lpcenv_or_interp</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>part</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cos_tab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>eval_lpc_spectrum</name><argument_list>(<argument><expr><name>in</name></expr></argument>,
<argument><expr><call><name>get_cos</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>cos_tab</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>step</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><index>[<expr><name>i</name> <operator>+</operator> <name>step</name></expr>]</index></name> <operator>+</operator> <name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.95</literal> <operator>*</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
<name><name>out</name><index>[<expr><name>i</name> <operator>+</operator> <name>step</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name></expr>]</index></name></expr></argument>, <argument><expr><name>step</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<call><name>eval_lpc_spectrum</name><argument_list>(<argument><expr><name>in</name></expr></argument>,
<argument><expr><call><name>get_cos</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>cos_tab</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name></expr>]</index></name></expr></argument>, <argument><expr><name>step</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>step</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>size</name> <operator>-</operator> <name>step</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>]</index></name></expr></argument>, <argument><expr><name>step</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eval_lpcenv_2parts</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>eval_lpcenv_or_interp</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eval_lpcenv_or_interp</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>lpc</name> <operator>+</operator> <name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>lpc</name> <operator>+</operator> <name>size</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>lpc</name><index>[<expr><name>size</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>step</name></expr>]</index></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twinvq_memset_float</name><argument_list>(<argument><expr><name>lpc</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>step</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cb_bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cb_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>ftype</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>tab0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tab1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>i</name> <operator>&gt;=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>length_change</name><index>[<expr><name>ftype</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitstream_second_part</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec_change</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bitstream_second_part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>*</operator><name>cb_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tmp0</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign0</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>&amp;=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bitstream_second_part</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>*</operator><name>cb_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tmp1</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>&amp;=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tab0</name> <operator>=</operator> <name>cb0</name> <operator>+</operator> <name>tmp0</name> <operator>*</operator> <name>cb_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>=</operator> <name>cb1</name> <operator>+</operator> <name>tmp1</name> <operator>*</operator> <name>cb_len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>permut</name><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>sign0</name> <operator>*</operator> <name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
<name>sign1</name> <operator>*</operator> <name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dec_gain</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQFrameData</name> <modifier>*</modifier></type><name>bits</name> <init>= <expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>step</name> <init>= <expr><name>TWINVQ_AMP_MAX</name> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TWINVQ_GAIN_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sub_step</name> <init>= <expr><name>TWINVQ_SUB_AMP_MAX</name> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TWINVQ_SUB_GAIN_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<call><name>twinvq_mulawinv</name><argument_list>(<argument><expr><name>step</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator> <name>step</name> <operator>*</operator> <name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>TWINVQ_AMP_MAX</name></expr></argument>, <argument><expr><name>TWINVQ_MULAW_MU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<call><name>twinvq_mulawinv</name><argument_list>(<argument><expr><name>step</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator> <name>step</name> <operator>*</operator> <name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>TWINVQ_AMP_MAX</name></expr></argument>, <argument><expr><name>TWINVQ_MULAW_MU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>*</operator> <name>sub</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator>
<name>val</name> <operator>*</operator> <call><name>twinvq_mulawinv</name><argument_list>(<argument><expr><name>sub_step</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator>
<name>sub_step</name> <operator>*</operator> <name><name>bits</name><operator>-&gt;</operator><name>sub_gain_bits</name><index>[<expr><name>i</name> <operator>*</operator> <name>sub</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name>TWINVQ_SUB_AMP_MAX</name></expr></argument>, <argument><expr><name>TWINVQ_MULAW_MU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>rearrange_lsp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min_dist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>min_dist2</name> <init>= <expr><name>min_dist</name> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>min_dist</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>avg</name> <init>= <expr><operator>(</operator><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>lsp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg</name> <operator>-</operator> <name>min_dist2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>avg</name> <operator>+</operator> <name>min_dist2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_lsp</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lpc_idx1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpc_idx2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lpc_hist_idx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>lspcodebook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cb2</name> <init>= <expr><name>cb</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit1</name></name><operator>)</operator> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cb3</name> <init>= <expr><name>cb2</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit2</name></name><operator>)</operator> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name><name>funny_rounding</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">2</literal></expr>,
<expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>?</operator> <operator>-</operator><literal type="number">2</literal> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>?</operator> <operator>-</operator><literal type="number">2</literal> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chunk_end</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name> <operator>+</operator> <name><name>funny_rounding</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator>
<name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chunk_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><name>lpc_idx1</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator>
<name><name>cb2</name><index>[<expr><name><name>lpc_idx2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rearrange_lsp</name><argument_list>(<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><literal type="number">0.0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tmp1</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name><name>cb3</name><index>[<expr><name>lpc_hist_idx</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp2</name> <init>= <expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>cb3</name><index>[<expr><name>lpc_hist_idx</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rearrange_lsp</name><argument_list>(<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><literal type="number">0.0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rearrange_lsp</name><argument_list>(<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><literal type="number">0.000095</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_sort_nearly_sorted_floats</name><argument_list>(<argument><expr><name>lsp</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dec_lpc_spectrum_inv</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>n_lsp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TWINVQ_FT_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>eval_lpcenv_2parts</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TWINVQ_FT_MEDIUM</name></expr>:</case>
<expr_stmt><expr><call><name>eval_lpcenv_2parts</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TWINVQ_FT_SHORT</name></expr>:</case>
<expr_stmt><expr><call><name>eval_lpcenv</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wtype_to_wsize</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_window</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wtype</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name> <init>= <expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bsize</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>first_wsize</name></decl>, <decl><type ref="prev"/><name>wsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>ch</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out2</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>prev_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>types_sizes</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_LONG</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>,
<expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_MEDIUM</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>,
<expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <operator>(</operator><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_SHORT</name></expr>]</index></name><operator>.</operator><name>sub</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wsize</name> <operator>=</operator> <name><name>types_sizes</name><index>[<expr><name><name>wtype_to_wsize</name><index>[<expr><name>wtype</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_wsize</name> <operator>=</operator> <name>wsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>bsize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sub_wtype</name> <init>= <expr><ternary><condition><expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_MEDIUM</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>wtype</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name> <operator>&amp;&amp;</operator> <name>wtype</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sub_wtype</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>wtype</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sub_wtype</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsize</name> <operator>=</operator> <name><name>types_sizes</name><index>[<expr><name><name>wtype_to_wsize</name><index>[<expr><name>sub_wtype</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name>buf1</name> <operator>+</operator> <name>bsize</name> <operator>*</operator> <name>j</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>bsize</name> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>prev_buf</name> <operator>+</operator> <operator>(</operator><name>bsize</name> <operator>-</operator> <name>wsize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>buf1</name> <operator>+</operator> <name>bsize</name> <operator>*</operator> <name>j</name></expr></argument>,
<argument><expr><name><name>ff_sine_windows</name><index>[<expr><call><name>av_log2</name><argument_list>(<argument><expr><name>wsize</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
<argument><expr><name>wsize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>+=</operator> <name>wsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>buf1</name> <operator>+</operator> <name>bsize</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>wsize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>bsize</name> <operator>-</operator> <name>wsize</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>+=</operator> <ternary><condition><expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_MEDIUM</name></expr> ?</condition><then> <expr><operator>(</operator><name>bsize</name> <operator>-</operator> <name>wsize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>bsize</name> <operator>-</operator> <name>wsize</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <name>buf1</name> <operator>+</operator> <name>bsize</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>bsize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>last_block_pos</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <name>first_wsize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_output</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wtype</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>prev_buf</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>+</operator> <name><name>tctx</name><operator>-&gt;</operator><name>last_block_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size1</name></decl>, <decl><type ref="prev"/><name>size2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>imdct_and_window</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>wtype</name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>spectrum</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>prev_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>last_block_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size1</name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>size2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>prev_buf</name></expr></argument>, <argument><expr><name>size1</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out1</name> <operator>+</operator> <name>size1</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>size2</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_buf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>size1</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out2</name> <operator>+</operator> <name>size1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>size2</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_and_decode_spectrum</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TwinVQFrameData</name> <modifier>*</modifier></type><name>bits</name> <init>= <expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>gain</name><index>[<expr><name>TWINVQ_CHANNELS_MAX</name> <operator>*</operator> <name>TWINVQ_SUBBLOCKS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>ppc_shape</name><index>[<expr><name>TWINVQ_PPC_SHAPE_LEN_MAX</name> <operator>*</operator> <name>TWINVQ_CHANNELS_MAX</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequant</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>main_coeffs</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>cb0</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>cb1</name></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>cb_len_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_gain</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cb_len_p</name> <init>= <expr><operator>(</operator><name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name> <operator>*</operator> <name>channels</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dequant</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>ppc_coeffs</name></name></expr></argument>, <argument><expr><name>ppc_shape</name></expr></argument>,
<argument><expr><name>TWINVQ_FT_PPC</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_cb</name></name></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_cb</name></name> <operator>+</operator> <name>cb_len_p</name> <operator>*</operator> <name>TWINVQ_PPC_SHAPE_CB_SIZE</name></expr></argument>,
<argument><expr><name>cb_len_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name>out</name> <operator>+</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lsp</name><index>[<expr><name>TWINVQ_LSP_COEFS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>dec_bark_env</name></name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>bark1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bits</name><operator>-&gt;</operator><name>bark_use_hist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>, <argument><expr><name><name>gain</name><index>[<expr><name>sub</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>chunk</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>j</name></expr></argument>,
<argument><expr><name>chunk</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>j</name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>decode_ppc</name></name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>p_coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>g_coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ppc_shape</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_lsp</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_hist_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>lsp_hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_lpc_spectrum_inv</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name><name>ff_twinvq_wtype_to_ftype_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>TWINVQ_FT_LONG</name></expr>, <expr><name>TWINVQ_FT_LONG</name></expr>, <expr><name>TWINVQ_FT_SHORT</name></expr>, <expr><name>TWINVQ_FT_LONG</name></expr>,
<expr><name>TWINVQ_FT_MEDIUM</name></expr>, <expr><name>TWINVQ_FT_LONG</name></expr>, <expr><name>TWINVQ_FT_LONG</name></expr>, <expr><name>TWINVQ_FT_MEDIUM</name></expr>,
<expr><name>TWINVQ_FT_MEDIUM</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_twinvq_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>discarded_packets</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>tctx</name><operator>-&gt;</operator><name>read_bitstream</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>;</condition>
<incr><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read_and_decode_spectrum</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name><operator>.</operator><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imdct_output</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name><operator>.</operator><name>ftype</name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name><operator>.</operator><name>window_type</name></expr></argument>, <argument><expr><name>out</name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>discarded_packets</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>discarded_packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_mdct_win</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_s</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_SHORT</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_m</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>TWINVQ_FT_MEDIUM</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>norm</name> <init>= <expr><ternary><condition><expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">2.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bsize</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>bsize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>-</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>norm</name> <operator>/</operator> <name>bsize</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>,
<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tctx</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tctx</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>m</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>m</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>m</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>size_m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>size_s</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>alloc_fail</name>:</label>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>permutate_in_line</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_blocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>line_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length_div</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>line_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_blocks</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_LONG</name> <operator>&amp;&amp;</operator> <name>num_vect</name> <operator>%</operator> <name>num_blocks</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>ftype</name> <operator>!=</operator> <name>TWINVQ_FT_LONG</name> <operator>&amp;&amp;</operator> <name>num_vect</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name>i</name> <operator>==</operator> <name><name>line_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_vect</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>num_vect</name> <operator>*</operator> <name>i</name> <operator>&lt;</operator> <name>block_size</name> <operator>*</operator> <name>num_blocks</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name> <operator>*</operator> <name>num_vect</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>num_vect</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>shift</name><operator>)</operator> <operator>%</operator> <name>num_vect</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>transpose_perm</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>line_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length_div</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_vect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>line_len</name><index>[<expr><name>i</name> <operator>&gt;=</operator> <name>length_div</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>cont</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>j</name> <operator>*</operator> <name>num_vect</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>linear_perm</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name>size</name> <operator>/</operator> <name>n_blocks</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>block_size</name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>n_blocks</name><operator>)</operator> <operator>+</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>n_blocks</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>construct_perm_table</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_perm</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>TWINVQ_FT_PPC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>permutate_in_line</name><argument_list>(<argument><expr><name>tmp_perm</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>block_size</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>length_change</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transpose_perm</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>permut</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_perm</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>length_change</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>linear_perm</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>permut</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>permut</name><index>[<expr><name>ftype</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>size</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_bitstream_params</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_ch</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_fr_bits</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator>
<name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lsp_bits_per_block</name> <init>= <expr><name>n_ch</name> <operator>*</operator> <operator>(</operator><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit0</name></name> <operator>+</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit1</name></name> <operator>+</operator>
<name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit2</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ppc_bits</name> <init>= <expr><name>n_ch</name> <operator>*</operator> <operator>(</operator><name><name>mtab</name><operator>-&gt;</operator><name>pgain_bit</name></name> <operator>+</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_bit</name></name> <operator>+</operator>
<name><name>mtab</name><operator>-&gt;</operator><name>ppc_period_bit</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bsize_no_main_cb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bse_bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>frametype</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bse_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n_ch</name> <operator>*</operator>
<operator>(</operator><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bark_n_coef</name> <operator>*</operator>
<name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bark_n_bit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bsize_no_main_cb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bse_bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>lsp_bits_per_block</name> <operator>+</operator> <name>ppc_bits</name> <operator>+</operator>
<name>TWINVQ_WINDOW_TYPE_BITS</name> <operator>+</operator> <name>n_ch</name> <operator>*</operator> <name>TWINVQ_GAIN_BITS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsize_no_main_cb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name>lsp_bits_per_block</name> <operator>+</operator> <name>n_ch</name> <operator>*</operator> <name>TWINVQ_GAIN_BITS</name> <operator>+</operator>
<name>TWINVQ_WINDOW_TYPE_BITS</name> <operator>+</operator>
<name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sub</name> <operator>*</operator> <operator>(</operator><name><name>bse_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>n_ch</name> <operator>*</operator> <name>TWINVQ_SUB_GAIN_BITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>TWINVQ_CODEC_METASOUND</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tctx</name><operator>-&gt;</operator><name>is_6kbps</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsize_no_main_cb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsize_no_main_cb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit_size</name></decl>, <decl><type ref="prev"/><name>vect_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounded_up</name></decl>, <decl><type ref="prev"/><name>rounded_down</name></decl>, <decl><type ref="prev"/><name>num_rounded_down</name></decl>, <decl><type ref="prev"/><name>num_rounded_up</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit_size</name> <operator>=</operator> <name>n_ch</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_bit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vect_size</name> <operator>=</operator> <name>n_ch</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bit_size</name> <operator>=</operator> <name>total_fr_bits</name> <operator>-</operator> <name><name>bsize_no_main_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vect_size</name> <operator>=</operator> <name>n_ch</name> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bit_size</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator> <operator>/</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rounded_up</name> <operator>=</operator> <operator>(</operator><name>bit_size</name> <operator>+</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rounded_down</name> <operator>=</operator> <operator>(</operator><name>bit_size</name><operator>)</operator> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_rounded_down</name> <operator>=</operator> <name>rounded_up</name> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>bit_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_rounded_up</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>num_rounded_down</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rounded_up</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rounded_up</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rounded_down</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rounded_down</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec_change</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>num_rounded_up</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rounded_up</name> <operator>=</operator> <operator>(</operator><name>vect_size</name> <operator>+</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rounded_down</name> <operator>=</operator> <operator>(</operator><name>vect_size</name><operator>)</operator> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_rounded_down</name> <operator>=</operator> <name>rounded_up</name> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>vect_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_rounded_up</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>num_rounded_down</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rounded_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rounded_down</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>length_change</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>num_rounded_up</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>frametype</name> <operator>=</operator> <name>TWINVQ_FT_SHORT</name></expr>;</init> <condition><expr><name>frametype</name> <operator>&lt;=</operator> <name>TWINVQ_FT_PPC</name></expr>;</condition> <incr><expr><name>frametype</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>construct_perm_table</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>frametype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_twinvq_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>cos_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>tmp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_twinvq_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>frames_per_packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frames_per_packet</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8LL</literal> <operator>/</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frames_per_packet</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block align is %"</literal><name>PRId64</name><literal type="string">" bits, expected %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frames_per_packet</name> <operator>&gt;</operator> <name>TWINVQ_MAX_FRAMES_PER_PACKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many frames per packet (%"</literal><name>PRId64</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name>frames_per_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>frames_per_packet</name></name> <operator>=</operator> <name>frames_per_packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_twinvq_decode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_mdct_win</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing MDCT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_twinvq_decode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_bitstream_params</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twinvq_memset_float</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bark_hist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bark_hist</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
