<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp9dec.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VP9DEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VP9DEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9shared.h"</cpp:file></cpp:include>

<enum>enum <name>MVJoint</name> <block>{
<decl><name>MV_JOINT_ZERO</name></decl>,
<decl><name>MV_JOINT_H</name></decl>,
<decl><name>MV_JOINT_V</name></decl>,
<decl><name>MV_JOINT_HV</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ProbContext</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>y_mode</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uv_mode</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filter</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mv_mode</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>comp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>single_ref</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>comp_ref</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tx32p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tx16p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tx8p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>skip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mv_joint</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>classes</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>class0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>class0_fp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>class0_hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hp</name></decl>;</decl_stmt>
}</block> <decl><name><name>mv_comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>partition</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ProbContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP9Filter</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>level</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mask</name><index>[<expr><literal type="number">2</literal></expr> ]</index><index>[<expr><literal type="number">2</literal></expr> ]</index>
<index>[<expr><literal type="number">8</literal></expr> ]</index><index>[<expr><literal type="number">4</literal></expr> ]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9Filter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP9Block</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>seg_id</name></decl>, <name>intra</name>, <name>comp</name>, <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>, <name><name>mode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>, <name>uvmode</name>, <name>skip</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>FilterMode</name></name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>mv</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><literal type="number">2</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>BlockSize</name></name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TxfmMode</name></name></type> <name>tx</name></decl>, <name>uvtx</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>BlockLevel</name></name></type> <name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>BlockPartition</name></name></type> <name>bp</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9Block</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VP9TileData</name></name></type> <name>VP9TileData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP9Context</name> <block>{
<decl_stmt><decl><type><name>VP9SharedContext</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9DSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>, <name>active_tile_cols</name>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>progress_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>progress_cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ss_h</name></decl>, <name>ss_v</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_bpp</name></decl>, <name>bpp_index</name>, <name>bytesperpixel</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_keyframe</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>, <name>last_fmt</name>, <name>gf_fmt</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sb_cols</name></decl>, <name>sb_rows</name>, <name>rows</name>, <name>cols</name>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name><name>next_refs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lim_lut</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mblim_lut</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>filter_lut</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>ProbContext</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coef</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>prob_ctx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>ProbContext</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coef</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>prob</name></decl>;</struct>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_partition_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_mode_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_y_nnz_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>above_uv_nnz_ctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_skip_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_txfm_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_segpred_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_intra_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_comp_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_ref_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>above_filter_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VP56mv</name> <argument_list>(<argument><expr><operator>*</operator><name>above_mv_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>intra_pred_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>block_alloc_using_2pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>mvscale</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mvstep</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>frame_extradata_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_extradata_pool_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9Context</name>;</typedef>

<struct>struct <name>VP9TileData</name> <block>{


<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>col7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride</name></decl>, <decl><type ref="prev"/><name>uv_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tile_col_start</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>y_mode</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>uv_mode</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>filter</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>mv_mode</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>intra</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>comp</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>single_ref</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>comp_ref</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>tx32p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>tx16p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>tx8p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>skip</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>mv_joint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>sign</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>classes</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>class0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>bits</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>class0_fp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>fp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>class0_hp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>hp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>mv_comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>partition</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>coef</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>eob</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>counts</name></decl>;</struct>


<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_emu_buffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">135</literal> <operator>*</operator> <literal type="number">144</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_y_nnz_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_mode_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>VP56mv</name></expr></argument>, <argument><expr><name>left_mv_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_uv_nnz_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_partition_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_skip_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_txfm_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_segpred_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_intra_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_comp_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_ref_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_filter_ctx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>tmp_y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>tmp_uv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> }</block> <decl><name>min_mv</name></decl>, <decl><type ref="prev"/><name>max_mv</name></decl>;</struct>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>uvblock_base</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>uvblock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>eob_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>uveob_base</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eob</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>uveob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>ff_vp9_fill_mv</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9_adapt_probs</name><parameter_list>(<parameter><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9_decode_block</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>BlockLevel</name></name></type> <name>bl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>BlockPartition</name></name></type> <name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9_loopfilter_sb</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9_intra_recon_8bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uv_off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp9_intra_recon_16bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uv_off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp9_inter_recon_8bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp9_inter_recon_16bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
