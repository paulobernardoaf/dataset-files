<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hapqa_extract_bsf.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hap.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>HapqaExtractContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>texture</name></decl>;</decl_stmt>
}</block></struct></type> <name>HapqaExtractContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_texture</name><parameter_list>(<parameter><decl><type><name>HapqaExtractContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>texture</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator> <operator>||</operator> 
<operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>texture</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator></expr>)</condition> 
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hapqa_extract</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HapqaExtractContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>section_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>HapSectionType</name></name></type> <name>section_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_section_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target_packet_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0D</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid section type for HAPQA %#04x.\n"</literal></expr></argument>, <argument><expr><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_section_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>start_section_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target_packet_size</name> <operator>=</operator> <name>section_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_texture</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>start_section_size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>section_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>start_section_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target_packet_size</name> <operator>=</operator> <name>section_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_texture</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No valid texture found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>start_section_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>target_packet_size</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>codec_ids</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CODEC_ID_HAP</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HapqaExtractContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_BSF_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"texture"</literal></expr>, <expr><literal type="string">"texture to keep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"texture"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"keep HapQ texture"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"texture"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"keep HapAlphaOnly texture"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"texture"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hapqa_extract_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hapqa_extract_bsf"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_hapqa_extract_bsf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hapqa_extract"</literal></expr>,
<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>hapqa_extract</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HapqaExtractContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hapqa_extract_class</name></expr>,
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>codec_ids</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
