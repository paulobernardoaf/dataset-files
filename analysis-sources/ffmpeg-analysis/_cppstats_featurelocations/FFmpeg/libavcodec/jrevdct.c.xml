<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\jrevdct.c">































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIGHT_BIT_SAMPLES</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSIZE2</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_SHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; (n))</cpp:value></cpp:define>

<typedef>typedef <type><name>int16_t</name></type> <name><name>DCTBLOCK</name><index>[<expr><name>DCTSIZE2</name></expr>]</index></name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DCTSIZE</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<expr_stmt><expr><name>Sorry</name></expr><operator>,</operator> <expr><name>this</name> <name>code</name> <name>only</name> <name>copes</name> <name>with</name> <literal type="number">8x8</literal> <name><name>DCTs</name><operator>.</operator> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BIT_SAMPLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS1_BITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS1_BITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE</name></cpp:macro> <cpp:value>((int32_t) 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_SCALE</name></cpp:macro> <cpp:value>(ONE &lt;&lt; CONST_BITS)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t) ((x) * CONST_SCALE + 0.5))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RIGHT_SHIFT((x) + (ONE &lt;&lt; ((n)-1)), n)</cpp:value></cpp:define>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BIT_SAMPLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHORTxSHORT_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int16_t) (var)) * ((int16_t) (const)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHORTxLCONST_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int16_t) (var)) * ((int32_t) (const)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) * (const))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_211164243</name></cpp:macro> <cpp:value>1730</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_275899380</name></cpp:macro> <cpp:value>2260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_298631336</name></cpp:macro> <cpp:value>2446</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_390180644</name></cpp:macro> <cpp:value>3196</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_509795579</name></cpp:macro> <cpp:value>4176</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_541196100</name></cpp:macro> <cpp:value>4433</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_601344887</name></cpp:macro> <cpp:value>4926</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_765366865</name></cpp:macro> <cpp:value>6270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_785694958</name></cpp:macro> <cpp:value>6436</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_899976223</name></cpp:macro> <cpp:value>7373</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_061594337</name></cpp:macro> <cpp:value>8697</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_111140466</name></cpp:macro> <cpp:value>9102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_175875602</name></cpp:macro> <cpp:value>9633</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_306562965</name></cpp:macro> <cpp:value>10703</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_387039845</name></cpp:macro> <cpp:value>11363</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_451774981</name></cpp:macro> <cpp:value>11893</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_501321110</name></cpp:macro> <cpp:value>12299</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_662939225</name></cpp:macro> <cpp:value>13623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_847759065</name></cpp:macro> <cpp:value>15137</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_961570560</name></cpp:macro> <cpp:value>16069</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_053119869</name></cpp:macro> <cpp:value>16819</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_172734803</name></cpp:macro> <cpp:value>17799</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_562915447</name></cpp:macro> <cpp:value>20995</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_3_072711026</name></cpp:macro> <cpp:value>25172</cpp:value></cpp:define>





<name>void</name></name> <macro><name>ff_j_rev_dct</name><argument_list>(<argument>DCTBLOCK data</argument>)</argument_list></macro>
<block>{
<expr><name>int32_t</name> <name>tmp0</name></expr>, <expr><name>tmp1</name></expr>, <expr><name>tmp2</name></expr>, <expr><name>tmp3</name></expr>;
<expr><name>int32_t</name> <name>tmp10</name></expr>, <expr><name>tmp11</name></expr>, <expr><name>tmp12</name></expr>, <expr><name>tmp13</name></expr>;
<expr><name>int32_t</name> <name>z1</name></expr>, <expr><name>z2</name></expr>, <expr><name>z3</name></expr>, <expr><name>z4</name></expr>, <expr><name>z5</name></expr>;
<expr><name>int32_t</name> <name>d0</name></expr>, <expr><name>d1</name></expr>, <expr><name>d2</name></expr>, <expr><name>d3</name></expr>, <expr><name>d4</name></expr>, <expr><name>d5</name></expr>, <expr><name>d6</name></expr>, <expr><name>d7</name></expr>;
<expr><specifier>register</specifier> <name>int16_t</name> <operator>*</operator><name>dataptr</name></expr>;
<expr><name>int</name> <name>rowctr</name></expr>;





<expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;

<for>for <control>(<init><expr><name>rowctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rowctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rowctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>









<decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>idataptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dataptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d1</name> <operator>|</operator> <name>d2</name> <operator>|</operator> <name>d3</name> <operator>|</operator> <name>d4</name> <operator>|</operator> <name>d5</name> <operator>|</operator> <name>d6</name> <operator>|</operator> <name>d7</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d0</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>dcval</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>d0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PASS1_BITS</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>dcval</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>dcval</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block>

<name>dataptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt> 
<continue>continue;</continue>
}



{
<if_stmt><if>if <condition>(<expr><name>d6</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name> <operator>+</operator> <name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp13</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp12</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>d7</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d5</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>d5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name> <operator>+</operator> <name>d7</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>d1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_662939225</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_111140466</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z4</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z3</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d5</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_662939225</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_111140466</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z3</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z4</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_211164243</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_451774981</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_061594337</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_172734803</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z5</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>tmp1</name> <operator>=</operator> <name>tmp2</name> <operator>=</operator> <name>tmp3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
}


dataptr<expr_stmt><expr><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>+</operator> <name>tmp3</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp3</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp11</name> <operator>+</operator> <name>tmp2</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp11</name> <operator>-</operator> <name>tmp2</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp12</name> <operator>-</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp13</name> <operator>+</operator> <name>tmp0</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp13</name> <operator>-</operator> <name>tmp0</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt> 
}





dataptr <expr_stmt><expr><operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rowctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rowctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rowctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>








<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>d6</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name> <operator>+</operator> <name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp13</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp12</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>CONST_SCALE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>d7</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d5</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>d5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name> <operator>+</operator> <name>d7</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>d1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z3</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>d7</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_662939225</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_111140466</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z4</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z3</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d5</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_662939225</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>z2</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_111140466</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z3</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z4</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>d5</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_601344887</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_509795579</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z4</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d5</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_211164243</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_451774981</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_061594337</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_2_172734803</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z5</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z5</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>z1</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d3</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_275899380</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_0_785694958</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>FIX_1_387039845</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>tmp1</name> <operator>=</operator> <name>tmp2</name> <operator>=</operator> <name>tmp3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>+</operator> <name>tmp3</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp3</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp11</name> <operator>+</operator> <name>tmp2</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp11</name> <operator>-</operator> <name>tmp2</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp1</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp12</name> <operator>-</operator> <name>tmp1</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp13</name> <operator>+</operator> <name>tmp0</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp13</name> <operator>-</operator> <name>tmp0</name></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></for>
}

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCTSIZE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSTRIDE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

void <macro><name>ff_j_rev_dct4</name><argument_list>(<argument>DCTBLOCK data</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>z1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rowctr</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rowctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rowctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rowctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>









<decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>idataptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dataptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d2</name> <operator>|</operator> <name>d4</name> <operator>|</operator> <name>d6</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d0</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>dcval</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>d0</name> <operator>&lt;&lt;</operator> <name>PASS1_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>dcval</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>dcval</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSTRIDE</name></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>d6</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name> <operator>+</operator> <name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp13</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp12</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSTRIDE</name></expr>;</expr_stmt> 
</block_content>}</block></for>





<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rowctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rowctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rowctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>








<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>d6</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name> <operator>+</operator> <name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><operator>-</operator><name>d6</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp13</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>+</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp12</name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>-</operator> <name>d4</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>CONST_BITS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp11</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp12</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSTRIDE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CONST_BITS</name><operator>+</operator><name>PASS1_BITS</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block>

<function><type><name>void</name></type> <name>ff_j_rev_dct2</name><parameter_list>(<parameter><decl><type><name>DCTBLOCK</name></type> <name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d00</name></decl>, <decl><type ref="prev"/><name>d01</name></decl>, <decl><type ref="prev"/><name>d10</name></decl>, <decl><type ref="prev"/><name>d11</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d00</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d01</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name> <operator>-</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d10</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d11</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name> <operator>-</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>d00</name> <operator>+</operator> <name>d10</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>d01</name> <operator>+</operator> <name>d11</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>d00</name> <operator>-</operator> <name>d10</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>DCTSTRIDE</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>d01</name> <operator>-</operator> <name>d11</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_j_rev_dct1</name><parameter_list>(<parameter><decl><type><name>DCTBLOCK</name></type> <name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONST_BITS</name></cpp:undef>

<function><type><name>void</name></type> <name>ff_jref_idct_put</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_j_rev_dct</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels_clamped_c</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_jref_idct_add</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_j_rev_dct</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_c</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
