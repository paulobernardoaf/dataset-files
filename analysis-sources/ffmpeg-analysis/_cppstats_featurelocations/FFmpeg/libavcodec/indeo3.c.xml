<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\indeo3.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indeo3data.h"</cpp:file></cpp:include>


<enum>enum <block>{
<decl><name>RLE_ESC_F9</name> <init>= <expr><literal type="number">249</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FA</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FB</name> <init>= <expr><literal type="number">251</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FC</name> <init>= <expr><literal type="number">252</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FD</name> <init>= <expr><literal type="number">253</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FE</name> <init>= <expr><literal type="number">254</literal></expr></init></decl>, 
<decl><name>RLE_ESC_FF</name> <init>= <expr><literal type="number">255</literal></expr></init></decl> 
}</block>;</enum>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_8BIT_PEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_KEYFRAME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_MV_Y_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_MV_X_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_NONREF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_BUFFER</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <name>Plane</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>buffers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>pixels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl>;</decl_stmt>
}</block></struct></type> <name>Plane</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELL_STACK_MAX</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Cell</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>xpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>ypos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tree</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>mv_ptr</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Cell</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Indeo3DecodeContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_resync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next_cell_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>last_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>mc_vectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_vectors</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cb_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>buf_sel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>y_data_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>v_data_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>u_data_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>y_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>v_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>u_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>alt_quant</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Plane</name></type> <name><name>planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Indeo3DecodeContext</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>requant_tab</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>build_requant_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>offsets</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>deltas</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>step</name> <operator>*</operator> <name>step</name> <operator>+</operator> <name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>




<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="number">126</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">119</literal></expr>]</index></name> <operator>=</operator> <literal type="number">118</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">120</literal></expr>]</index></name> <operator>=</operator> <literal type="number">118</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">126</literal></expr>]</index></name> <operator>=</operator> <literal type="number">124</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="number">124</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">124</literal></expr>]</index></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">125</literal></expr>]</index></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">126</literal></expr>]</index></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requant_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_frame_buffers</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>allocate_frame_buffers</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>chroma_width</name></decl>, <decl><type ref="prev"/><name>chroma_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>luma_size</name></decl>, <decl><type ref="prev"/><name>chroma_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>luma_pitch</name></decl>, <decl><type ref="prev"/><name>chroma_pitch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>luma_width</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>luma_width</name></expr></argument> &gt;</argument_list></name> <literal type="number">640</literal> <operator>||</operator>
<name><name>luma_height</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>luma_height</name></expr></argument> &gt;</argument_list></name> <literal type="number">480</literal> <operator>||</operator>
<name>luma_width</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>||</operator> <name>luma_height</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid picture dimensions: %d x %d!\n"</literal></expr></argument>,
<argument><expr><name>luma_width</name></expr></argument>, <argument><expr><name>luma_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>luma_width</name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>luma_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>luma_width</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>luma_height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>luma_pitch</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>luma_width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_pitch</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>chroma_width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>luma_size</name> <operator>=</operator> <name>luma_pitch</name> <operator>*</operator> <operator>(</operator><name>luma_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>chroma_size</name> <operator>=</operator> <name>chroma_pitch</name> <operator>*</operator> <operator>(</operator><name>chroma_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name>luma_pitch</name></expr> </then><else>: <expr><name>chroma_pitch</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name>luma_width</name></expr> </then><else>: <expr><name>chroma_width</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name>luma_height</name></expr> </then><else>: <expr><name>chroma_height</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name>luma_size</name></expr> </then><else>: <expr><name>chroma_size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name>luma_size</name></expr> </then><else>: <expr><name>chroma_size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_frame_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_cell</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>Cell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>offset_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>


<expr_stmt><expr><name>offset_dst</name> <operator>=</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name></expr>]</index></name> <operator>+</operator> <name>offset_dst</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mv_x</name><operator>=</operator> <name>mv_y</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>mv_y</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>mv_x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>+</operator> <name><name>cell</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>mv_y</name></expr></argument> &gt;</argument_list></name> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>mv_x</name></expr></argument> &gt;</argument_list></name> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Motion vectors point out of the frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>offset_dst</name> <operator>+</operator> <name>mv_y</name> <operator>*</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <name>mv_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name></expr>;</init> <condition><expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>w</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>src</name> <operator>+=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>w</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>w</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_32</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_WN32A(dst, ((AV_RN32(src) + AV_RN32(ref)) &gt;&gt; 1) &amp; 0x7F7F7F7FUL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_64</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_WN64A(dst, ((AV_RN64(src) + AV_RN64(ref)) &gt;&gt; 1) &amp; 0x7F7F7F7F7F7F7F7FULL)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>replicate64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0xFF00FF00FF00FF00ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0x00FF00FF00FF00FFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>replicate32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0xFF00FF00UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0x00FF00FFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_64</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pix</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>row_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>dst</name> <operator>+=</operator> <name>row_offset</name></expr><operator>,</operator> <expr><name>n</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<enum>enum <block>{
<decl><name>IV3_NOERR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>IV3_BAD_RLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>IV3_BAD_DATA</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>IV3_BAD_COUNTER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>IV3_UNSUPPORTED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>IV3_OUT_OF_DATA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_PRECHECK</name></cpp:macro> <cpp:value>if (*data_ptr &gt;= last_ptr) return IV3_OUT_OF_DATA;</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLE_BLOCK_COPY</name></cpp:macro> <cpp:value>if (cell-&gt;mv_ptr || !skip_flag) copy_block4(dst, ref, row_offset, row_offset, 4 &lt;&lt; v_zoom)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLE_BLOCK_COPY_8</name></cpp:macro> <cpp:value>pix64 = AV_RN64(ref);if (is_first_row) {pix64 = replicate64(pix64);fill_64(dst + row_offset, pix64, 7, row_offset);AVG_64(dst, ref, dst + row_offset);} else fill_64(dst, pix64, 8, row_offset)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLE_LINES_COPY</name></cpp:macro> <cpp:value>copy_block4(dst, ref, row_offset, row_offset, num_lines &lt;&lt; v_zoom)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLE_LINES_COPY_M10</name></cpp:macro> <cpp:value>pix64 = AV_RN64(ref);if (is_top_of_cell) {pix64 = replicate64(pix64);fill_64(dst + row_offset, pix64, (num_lines &lt;&lt; 1) - 1, row_offset);AVG_64(dst, ref, dst + row_offset);} else fill_64(dst, pix64, num_lines &lt;&lt; 1, row_offset)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_DELTA_4</name></cpp:macro> <cpp:value>AV_WN16A(dst + line_offset ,(AV_RN16(ref ) + delta_tab-&gt;deltas[dyad1]) &amp; 0x7F7F);AV_WN16A(dst + line_offset + 2,(AV_RN16(ref + 2) + delta_tab-&gt;deltas[dyad2]) &amp; 0x7F7F);if (mode &gt;= 3) {if (is_top_of_cell &amp;&amp; !cell-&gt;ypos) {AV_COPY32U(dst, dst + row_offset);} else {AVG_32(dst, ref, dst + row_offset);}}</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_DELTA_8</name></cpp:macro> <cpp:value>if (is_top_of_cell) { AV_WN32A(dst + row_offset , (replicate32(AV_RN32(ref )) + delta_tab-&gt;deltas_m10[dyad1]) &amp; 0x7F7F7F7F);AV_WN32A(dst + row_offset + 4, (replicate32(AV_RN32(ref + 4)) + delta_tab-&gt;deltas_m10[dyad2]) &amp; 0x7F7F7F7F);} else { AV_WN32A(dst + row_offset , (AV_RN32(ref ) + delta_tab-&gt;deltas_m10[dyad1]) &amp; 0x7F7F7F7F);AV_WN32A(dst + row_offset + 4, (AV_RN32(ref + 4) + delta_tab-&gt;deltas_m10[dyad2]) &amp; 0x7F7F7F7F);} if (is_top_of_cell &amp;&amp; !cell-&gt;ypos) {AV_COPY64U(dst, dst + row_offset);} else AVG_64(dst, ref, dst + row_offset);</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_DELTA_1011_INTER</name></cpp:macro> <cpp:value>if (mode == 10) { AV_WN32A(dst , (AV_RN32(dst ) + delta_tab-&gt;deltas_m10[dyad1]) &amp; 0x7F7F7F7F);AV_WN32A(dst + 4 , (AV_RN32(dst + 4 ) + delta_tab-&gt;deltas_m10[dyad2]) &amp; 0x7F7F7F7F);AV_WN32A(dst + row_offset , (AV_RN32(dst + row_offset ) + delta_tab-&gt;deltas_m10[dyad1]) &amp; 0x7F7F7F7F);AV_WN32A(dst + row_offset + 4, (AV_RN32(dst + row_offset + 4) + delta_tab-&gt;deltas_m10[dyad2]) &amp; 0x7F7F7F7F);} else { AV_WN16A(dst , (AV_RN16(dst ) + delta_tab-&gt;deltas[dyad1]) &amp; 0x7F7F);AV_WN16A(dst + 2 , (AV_RN16(dst + 2 ) + delta_tab-&gt;deltas[dyad2]) &amp; 0x7F7F);AV_WN16A(dst + row_offset , (AV_RN16(dst + row_offset ) + delta_tab-&gt;deltas[dyad1]) &amp; 0x7F7F);AV_WN16A(dst + row_offset + 2, (AV_RN16(dst + row_offset + 2) + delta_tab-&gt;deltas[dyad2]) &amp; 0x7F7F);}</cpp:value></cpp:define>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cell_data</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Cell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_block</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>row_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_zoom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_zoom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vqEntry</name> <modifier>*</modifier></type><name><name>delta</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>swap_quads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>last_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>num_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rle_blocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>code</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vqEntry</name> <modifier>*</modifier></type><name>delta_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dyad1</name></decl>, <decl><type ref="prev"/><name>dyad2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pix64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_top_of_cell</name></decl>, <decl><type ref="prev"/><name>is_first_row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk_row_offset</name></decl>, <decl><type ref="prev"/><name>line_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blk_row_offset</name> <operator>=</operator> <operator>(</operator><name>row_offset</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>v_zoom</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line_offset</name> <operator>=</operator> <ternary><condition><expr><name>v_zoom</name></expr> ?</condition><then> <expr><name>row_offset</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <name>v_zoom</name> <operator>||</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <name>h_zoom</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IV3_BAD_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>cell</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>is_first_row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>v_zoom</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>h_zoom</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rle_blocks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_BLOCK_COPY</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_BLOCK_COPY_8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rle_blocks</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_top_of_cell</name> <operator>=</operator> <name>is_first_row</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>line</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta_tab</name> <operator>=</operator> <name><name>delta</name><index>[<expr><name>line</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>delta_tab</name> <operator>=</operator> <name><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>BUFFER_PRECHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">248</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <name><name>delta_tab</name><operator>-&gt;</operator><name>num_dyads</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BUFFER_PRECHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dyad1</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dyad2</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dyad1</name> <operator>&gt;=</operator> <name><name>delta_tab</name><operator>-&gt;</operator><name>num_dyads</name></name> <operator>||</operator> <name>dyad1</name> <operator>&gt;=</operator> <literal type="number">248</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IV3_BAD_DATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>-=</operator> <name><name>delta_tab</name><operator>-&gt;</operator><name>num_dyads</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dyad1</name> <operator>=</operator> <name>code</name> <operator>/</operator> <name><name>delta_tab</name><operator>-&gt;</operator><name>quad_exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dyad2</name> <operator>=</operator> <name>code</name> <operator>%</operator> <name><name>delta_tab</name><operator>-&gt;</operator><name>quad_exp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>swap_quads</name><index>[<expr><name>line</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned int</argument>, <argument>dyad1</argument>, <argument>dyad2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>APPLY_DELTA_4</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>APPLY_DELTA_8</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>APPLY_DELTA_1011_INTER</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RLE_ESC_FC</name></expr>:</case>
<expr_stmt><expr><name>skip_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rle_blocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">253</literal></expr>;</expr_stmt>

<case>case <expr><name>RLE_ESC_FF</name></expr>:</case>
<case>case <expr><name>RLE_ESC_FE</name></expr>:</case>
<case>case <expr><name>RLE_ESC_FD</name></expr>:</case>
<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <literal type="number">257</literal> <operator>-</operator> <name>code</name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_lines</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IV3_BAD_RLE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY_M10</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RLE_ESC_FB</name></expr>:</case>
<expr_stmt><expr><name>BUFFER_PRECHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rle_blocks</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>||</operator> <name>rle_blocks</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IV3_BAD_COUNTER</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_flag</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>||</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name> <operator>||</operator> <operator>!</operator><name>skip_flag</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY_M10</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RLE_ESC_F9</name></expr>:</case>
<expr_stmt><expr><name>skip_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rle_blocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>RLE_ESC_FA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IV3_BAD_RLE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RLE_LINES_COPY_M10</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>IV3_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>num_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref</name> <operator>+=</operator> <name>row_offset</name> <operator>*</operator> <operator>(</operator><name>num_lines</name> <operator>&lt;&lt;</operator> <name>v_zoom</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>row_offset</name> <operator>*</operator> <operator>(</operator><name>num_lines</name> <operator>&lt;&lt;</operator> <name>v_zoom</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>h_zoom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>h_zoom</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>ref_block</name> <operator>+=</operator> <name>blk_row_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>blk_row_offset</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>IV3_NOERR</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cell</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>Cell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>last_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>vq_index</name></decl>, <decl><type ref="prev"/><name>prim_indx</name></decl>, <decl><type ref="prev"/><name>second_indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zoom_fac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>swap_quads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>code</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vqEntry</name> <modifier>*</modifier></type><name><name>delta</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_start</name> <init>= <expr><name>data_ptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vq_index</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref_block</name> <operator>=</operator> <name>block</name> <operator>-</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>copy_cell</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>mv_y</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>mv_x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>+</operator> <name><name>cell</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>mv_y</name></expr></argument> &gt;</argument_list></name> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>mv_x</name></expr></argument> &gt;</argument_list></name> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Motion vectors point out of the frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>mv_y</name> <operator>*</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <name>mv_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_block</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>alt_quant</name><index>[<expr><name>vq_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prim_indx</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cb_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>second_indx</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cb_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>vq_index</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cb_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prim_indx</name> <operator>=</operator> <name>second_indx</name> <operator>=</operator> <name>vq_index</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prim_indx</name> <operator>&gt;=</operator> <literal type="number">24</literal> <operator>||</operator> <name>second_indx</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid VQ table indexes! Primary: %d, secondary: %d!\n"</literal></expr></argument>,
<argument><expr><name>prim_indx</name></expr></argument>, <argument><expr><name>second_indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>vq_tab</name><index>[<expr><name>second_indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>vq_tab</name><index>[<expr><name>prim_indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swap_quads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>second_indx</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swap_quads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prim_indx</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>vq_index</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>ref_block</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref_block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>requant_tab</name><index>[<expr><name>vq_index</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index><index>[<expr><name><name>ref_block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">127</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>IV3_NOERR</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attempt to apply Mode 3/4 to an INTER cell!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zoom_fac</name> <operator>=</operator> <name>mode</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>decode_cell_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>ref_block</name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zoom_fac</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>swap_quads</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data_ptr</name></expr></argument>, <argument><expr><name>last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> 
<case>case <expr><literal type="number">11</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>decode_cell_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>ref_block</name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>swap_quads</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data_ptr</name></expr></argument>, <argument><expr><name>last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cell</name><operator>-&gt;</operator><name>mv_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attempt to use Mode 11 for an INTRA cell!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zoom_fac</name> <operator>=</operator> <name>mode</name> <operator>==</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>decode_cell_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>ref_block</name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><name>zoom_fac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>swap_quads</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data_ptr</name></expr></argument>, <argument><expr><name>last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported coding mode: %d\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IV3_BAD_RLE</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mode %d: RLE code %X is not allowed at the current line\n"</literal></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>data_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
<case>case <expr><name>IV3_BAD_DATA</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mode %d: invalid VQ data\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
<case>case <expr><name>IV3_BAD_COUNTER</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mode %d: RLE-FB invalid counter: %d\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
<case>case <expr><name>IV3_UNSUPPORTED</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mode %d: unsupported RLE code: %X\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>data_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
<case>case <expr><name>IV3_OUT_OF_DATA</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mode %d: attempt to read past end of buffer\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>data_ptr</name> <operator>-</operator> <name>data_start</name></expr>;</return> 
</block_content>}</block></function>



<enum>enum <block>{
<decl><name>H_SPLIT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>V_SPLIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>INTRA_NULL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>INTER_DATA</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_CELL</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>new_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new_size) = ((size) &gt; 2) ? ((((size) + 2) &gt;&gt; 2) &lt;&lt; 1) : 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_BITPOS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx-&gt;skip_bits += (n); ctx-&gt;need_resync = 1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESYNC_BITSTREAM</name></cpp:macro> <cpp:value>if (ctx-&gt;need_resync &amp;&amp; !(get_bits_count(&amp;ctx-&gt;gb) &amp; 7)) { skip_bits_long(&amp;ctx-&gt;gb, ctx-&gt;skip_bits); ctx-&gt;skip_bits = 0; ctx-&gt;need_resync = 0; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CELL</name></cpp:macro> <cpp:value>if (curr_cell.xpos + curr_cell.width &gt; (plane-&gt;width &gt;&gt; 2) || curr_cell.ypos + curr_cell.height &gt; (plane-&gt;height &gt;&gt; 2)) { av_log(avctx, AV_LOG_ERROR, "Invalid cell: x=%d, y=%d, w=%d, h=%d\n", curr_cell.xpos, curr_cell.ypos, curr_cell.width, curr_cell.height); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_bintree</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Cell</name> <modifier>*</modifier></type><name>ref_cell</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>strip_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Cell</name></type> <name>curr_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_used</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stack overflow (corrupted binary tree)!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_cell</name> <operator>=</operator> <operator>*</operator><name>ref_cell</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>H_SPLIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPLIT_CELL</name><argument_list>(<argument><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>curr_cell</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>ypos</name></name> <operator>+=</operator> <name><name>curr_cell</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>height</name></name> <operator>-=</operator> <name><name>curr_cell</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref_cell</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_cell</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>V_SPLIT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr_cell</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name>strip_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>curr_cell</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <operator>(</operator><name>strip_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>strip_width</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SPLIT_CELL</name><argument_list>(<argument><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>curr_cell</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+=</operator> <name><name>curr_cell</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_cell</name><operator>-&gt;</operator><name>width</name></name> <operator>-=</operator> <name><name>curr_cell</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref_cell</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_cell</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>RESYNC_BITSTREAM</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H_SPLIT</name></expr>:</case>
<case>case <expr><name>V_SPLIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>parse_bintree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curr_cell</name></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>strip_width</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>INTRA_NULL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr_cell</name><operator>.</operator><name>tree</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>mv_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>RESYNC_BITSTREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid VQ_NULL code: %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SkipCell procedure not implemented yet!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>CHECK_CELL</name></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr_cell</name><operator>.</operator><name>mv_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_cell</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curr_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>INTER_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr_cell</name><operator>.</operator><name>tree</name></name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>mv_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>need_resync</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name><index>[<expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_byte</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"motion vector out of array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mv_idx</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mv_idx</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_vectors</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"motion vector index out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>mv_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mc_vectors</name><index>[<expr><name>mv_idx</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UPDATE_BITPOS</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>need_resync</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name><index>[<expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CHECK_CELL</name></type>
<name>bytes_used</name> <init>= <expr><call><name>decode_cell</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curr_cell</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_byte</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_used</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UPDATE_BITPOS</name><argument_list>(<argument><expr><name>bytes_used</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_cell_data</name></name> <operator>+=</operator> <name>bytes_used</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_plane</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>strip_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Cell</name></type> <name>curr_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_vectors</name></decl>;</decl_stmt>



<expr_stmt><expr><name>num_vectors</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>data_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_vectors</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Read invalid number of motion vectors %d\n"</literal></expr></argument>, <argument><expr><name>num_vectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_vectors</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>data_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_vectors</name></name> <operator>=</operator> <name>num_vectors</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mc_vectors</name></name> <operator>=</operator> <ternary><condition><expr><name>num_vectors</name></expr> ?</condition><then> <expr><name>data</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>num_vectors</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>data_size</name> <operator>-</operator> <name>num_vectors</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>skip_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>need_resync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>data_size</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>xpos</name></name> <operator>=</operator> <name><name>curr_cell</name><operator>.</operator><name>ypos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>tree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curr_cell</name><operator>.</operator><name>mv_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><call><name>parse_bintree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>INTRA_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curr_cell</name></expr></argument>, <argument><expr><name>CELL_STACK_MAX</name></expr></argument>, <argument><expr><name>strip_width</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_HDR_ID</name></cpp:macro> <cpp:value>MKBETAG('F', 'R', 'M', 'H')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame_headers</name><parameter_list>(<parameter><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bs_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_num</name></decl>, <decl><type ref="prev"/><name>word2</name></decl>, <decl><type ref="prev"/><name>check_sum</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>, <decl><type ref="prev"/><name>u_offset</name></decl>, <decl><type ref="prev"/><name>v_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>starts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ends</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>frame_num</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word2</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>check_sum</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>frame_num</name> <operator>^</operator> <name>word2</name> <operator>^</operator> <name>data_size</name> <operator>^</operator> <name>OS_HDR_ID</name><operator>)</operator> <operator>!=</operator> <name>check_sum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"OS header checksum mismatch!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>bs_hdr</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported codec version!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name>frame_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_offset</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Frame dimensions changed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>width</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>width</name></expr></argument> &gt;</argument_list></name> <literal type="number">640</literal> <operator>||</operator>
<name><name>height</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>height</name></expr></argument> &gt;</argument_list></name> <literal type="number">480</literal> <operator>||</operator>
<name>width</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>||</operator> <name>height</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid picture dimensions: %d x %d!\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_frame_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>allocate_frame_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v_offset</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u_offset</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>starts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>starts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>starts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>u_offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ends</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>ends</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>starts</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ends</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_data_size</name></name> <operator>=</operator> <name><name>ends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>starts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>v_data_size</name></name> <operator>=</operator> <name><name>ends</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>starts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>u_data_size</name></name> <operator>=</operator> <name><name>ends</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>starts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFMIN3</name><argument_list>(<argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>v_offset</name></expr></argument>, <argument><expr><name>u_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>FFMAX3</name><argument_list>(<argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>v_offset</name></expr></argument>, <argument><expr><name>u_offset</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <literal type="number">16</literal> <operator>||</operator>
<call><name>FFMIN3</name><argument_list>(<argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>v_offset</name></expr></argument>, <argument><expr><name>u_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name> <operator>-</operator> <name>bs_hdr</name> <operator>+</operator> <literal type="number">16</literal> <operator>||</operator>
<call><name>FFMIN3</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_data_size</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>v_data_size</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u_data_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"One of the y/u/v offsets is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_data_ptr</name></name> <operator>=</operator> <name>bs_hdr</name> <operator>+</operator> <name>y_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>v_data_ptr</name></name> <operator>=</operator> <name>bs_hdr</name> <operator>+</operator> <name>v_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>u_data_ptr</name></name> <operator>=</operator> <name>bs_hdr</name> <operator>+</operator> <name>u_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alt_quant</name></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sync frame encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>BS_8BIT_PEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"8-bit pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>BS_MV_X_HALF</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>BS_MV_Y_HALF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Halfpel motion vectors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>output_plane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plane</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_sel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>plane</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>buf_sel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pitch</name> <init>= <expr><name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>dst_height</name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>dst_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><call><name>AV_RN32A</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7F7F7F7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>pitch</name> <operator>-</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name> <operator>-</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_requant_tab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>allocate_frame_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Indeo3DecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decode_frame_headers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>BS_NONREF</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>BS_KEYFRAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&gt;&gt;</operator> <name>BS_BUFFER</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_data_ptr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_data_size</name></name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u_data_ptr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u_data_size</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>v_data_ptr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>v_data_size</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>output_plane</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_plane</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_plane</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_sel</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_frame_buffers</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_indeo3_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"indeo3"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Intel Indeo 3"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_INDEO3</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Indeo3DecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
