<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rl.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_RL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_RL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RUN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEVEL</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>RLTable</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt> 
<expr_stmt><expr><specifier>const</specifier> <call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>table_vlc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>table_run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>table_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>index_run</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name><name>max_level</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name><name>max_run</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RL_VLC_ELEM</name> <modifier>*</modifier></type><name><name>rl_vlc</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>RLTable</name>;</typedef>





<function_decl><type><name>int</name></type> <name>ff_rl_init</name><parameter_list>(<parameter><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>static_store</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>MAX_RUN</name> <operator>+</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_rl_init_vlc</name><parameter_list>(<parameter><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>static_size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ff_rl_free</name><parameter_list>(<parameter><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_RL</name><parameter_list>(<parameter><type><name>rl</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{int q;static RL_VLC_ELEM rl_vlc_table[32][static_size];if(!rl.rl_vlc[0]){for(q=0; q&lt;32; q++)rl.rl_vlc[q]= rl_vlc_table[q];ff_rl_init_vlc(&amp;rl, static_size);}}</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_rl_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>index_run</name><index>[<expr><name>last</name></expr>]</index><index>[<expr><name>run</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>rl</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>rl</name><operator>-&gt;</operator><name>n</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>rl</name><operator>-&gt;</operator><name>max_level</name><index>[<expr><name>last</name></expr>]</index><index>[<expr><name>run</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>rl</name><operator>-&gt;</operator><name>n</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>index</name> <operator>+</operator> <name>level</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
