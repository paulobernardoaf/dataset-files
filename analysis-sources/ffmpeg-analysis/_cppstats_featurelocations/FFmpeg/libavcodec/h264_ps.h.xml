<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_ps.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_H264_PS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_H264_PS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SPS_COUNT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PPS_COUNT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LOG2_MAX_FRAME_NUM</name></cpp:macro> <cpp:value>(12 + 4)</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>SPS</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_format_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transform_bypass</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>log2_max_frame_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>poc_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>log2_max_poc_lsb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>delta_pic_order_always_zero_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_for_non_ref_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_for_top_to_bottom_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>poc_cycle_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ref_frame_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>gaps_in_frame_num_allowed_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_mbs_only_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_aff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>direct_8x8_inference_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_right</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_bottom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vui_parameters_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_signal_type_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colour_description_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timing_info_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_units_in_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>time_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_frame_rate_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>offset_for_ref_frame</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitstream_restriction_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_reorder_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scaling_matrix_present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scaling_matrix4</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scaling_matrix8</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nal_hrd_parameters_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vcl_hrd_parameters_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_struct_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time_offset_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpb_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>initial_cpb_removal_delay_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cpb_removal_delay_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dpb_output_delay_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth_luma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth_chroma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>residual_color_transform_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>constraint_set_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPS</name>;</typedef>




<typedef>typedef <type><struct>struct <name>PPS</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cabac</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pic_order_present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>slice_group_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_slice_group_map_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>ref_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>weighted_pred</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>weighted_bipred_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>init_qp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>init_qs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deblocking_filter_parameters_present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>constrained_intra_pred</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>redundant_pic_cnt_present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>transform_8x8_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scaling_matrix4</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scaling_matrix8</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chroma_qp_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>QP_MAX_NUM</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>chroma_qp_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dequant4_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>QP_MAX_NUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dequant8_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>QP_MAX_NUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>uint32_t</name><argument_list>(<argument><expr><operator>*</operator><name><name>dequant4_coeff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uint32_t</name><argument_list>(<argument><expr><operator>*</operator><name><name>dequant8_coeff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>PPS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>H264ParamSets</name> <block>{
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name><name>sps_list</name><index>[<expr><name>MAX_SPS_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name><name>pps_list</name><index>[<expr><name>MAX_PPS_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>pps_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>sps_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>overread_warning_printed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>H264ParamSets</name>;</typedef>




<function_decl><type><name>int</name></type> <name>ff_h264_decode_seq_parameter_set</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_truncation</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_h264_decode_picture_parameter_set</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_length</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ff_h264_ps_uninit</name><parameter_list>(<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
