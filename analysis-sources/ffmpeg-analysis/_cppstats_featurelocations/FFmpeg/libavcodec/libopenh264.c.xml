<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libopenh264.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_api.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_ver.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopenh264.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenh264_to_ffmpeg_log_level</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>libopenh264_log_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>libopenh264_log_level</name> <operator>&gt;=</operator> <name>WELS_LOG_DETAIL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_TRACE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>libopenh264_log_level</name> <operator>&gt;=</operator> <name>WELS_LOG_DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_DEBUG</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>libopenh264_log_level</name> <operator>&gt;=</operator> <name>WELS_LOG_INFO</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_VERBOSE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>libopenh264_log_level</name> <operator>&gt;=</operator> <name>WELS_LOG_WARNING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_WARNING</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>libopenh264_log_level</name> <operator>&gt;=</operator> <name>WELS_LOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_ERROR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>AV_LOG_QUIET</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_libopenh264_trace_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>equiv_ffmpeg_log_level</name> <init>= <expr><call><name>libopenh264_to_ffmpeg_log_level</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>equiv_ffmpeg_log_level</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_libopenh264_check_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>ARCH_X86_32</name> <operator>||</operator> <call><name>AV_GCC_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>OpenH264Version</name></type> <name>libver</name> <init>= <expr><call><name>WelsGetCodecVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>libver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_stCodecVersion</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect library version loaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
