<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\error_resilience.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_ERROR_RESILIENCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_ERROR_RESILIENCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_AC_ERROR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_DC_ERROR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_MV_ERROR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_AC_END</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_DC_END</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_MV_END</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_MB_ERROR</name></cpp:macro> <cpp:value>(ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ER_MB_END</name></cpp:macro> <cpp:value>(ER_AC_END|ER_DC_END|ER_MV_END)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ERPicture</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>tf</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>motion_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name><name>ref_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_picture</name></decl>;</decl_stmt>
}</block></struct></type> <name>ERPicture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ERContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MECmpContext</name></type> <name>mecc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mecc_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_index2xy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mb_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>b8_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>error_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_occurred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>error_status_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>er_temp_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>dc_val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mbskip_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mbintra_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ERPicture</name></type> <name>cur_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ERPicture</name></type> <name>last_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ERPicture</name></type> <name>next_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name><name>ref_index_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name><name>motion_val_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pp_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pb_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quarter_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>partitioned_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<macro><name>void</name> <argument_list>(<argument>*decode_mb</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>void</name> <operator>*</operator><name>opaque</name><operator>,</operator> <name>int</name> <name>ref</name><operator>,</operator> <name>int</name> <name>mv_dir</name><operator>,</operator> <name>int</name> <name>mv_type</name><operator>,</operator>
<call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>,</operator>
<name>int</name> <name>mb_x</name><operator>,</operator> <name>int</name> <name>mb_y</name><operator>,</operator> <name>int</name> <name>mb_intra</name><operator>,</operator> <name>int</name> <name>mb_skipped</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>ERContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_er_frame_start</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_er_frame_end</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_er_add_slice</name><parameter_list>(<parameter><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
