<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\lpc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lls.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC_USE_DOUBLE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc_apply_welch_window_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>w_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>/</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w_data</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w_data</name><operator>+=</operator><name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>+=</operator><name>n2</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>n2</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w_data</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w_data</name><index>[<expr><operator>+</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>+</operator><name>i</name></expr> ]</index></name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc_compute_autocorr_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>autoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>lag</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum0</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum1</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>sum0</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>autoc</name><index>[<expr><name>j</name></expr> ]</index></name> <operator>=</operator> <name>sum0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>autoc</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum1</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>j</name><operator>==</operator><name>lag</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr> ]</index></name>
<operator>+</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>autoc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_lpc_coefs</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lpc_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_shift</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zero_shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cmax</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>qmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sh</name></decl>;</decl_stmt>


<expr_stmt><expr><name>qmax</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>precision</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>cmax</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cmax</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cmax</name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>lpc_in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>(<expr><name>cmax</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>max_shift</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>shift</name> <operator>=</operator> <name>zero_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lpc_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>sh</name> <operator>=</operator> <name>max_shift</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>cmax</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator> <operator>&gt;</operator> <name>qmax</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sh</name> <operator>&gt;</operator> <name>min_shift</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sh</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if<condition>(<expr><name>sh</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmax</name> <operator>&gt;</operator> <name>qmax</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>qmax</name><operator>)</operator> <operator>/</operator> <name>cmax</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>error</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>-=</operator> <name><name>lpc_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>qmax</name></expr></argument>, <argument><expr><name>qmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>-=</operator> <name><name>lpc_out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>shift</name> <operator>=</operator> <name>sh</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_best_order</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>est</name></decl>;</decl_stmt>

<expr_stmt><expr><name>est</name> <operator>=</operator> <name>min_order</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>max_order</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>min_order</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>est</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>est</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_lpc_calc_ref_coefs</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>autoc</name><index>[<expr><name>MAX_LPC_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>lpc_apply_welch_window</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>lpc_compute_autocorr</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>autoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_ref_coefs</name><argument_list>(<argument><expr><name>autoc</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>order</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>ff_lpc_calc_ref_coefs_f</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>signal</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>avg_err</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>autoc</name><index>[<expr><name>MAX_LPC_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>error</name><index>[<expr><name>MAX_LPC_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>weight</name> <init>= <expr><name>a</name> <operator>-</operator> <name>b</name><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>i</name><operator>)</operator><operator>/</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>weight</name><operator>*</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>weight</name><operator>*</operator><name><name>samples</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>lpc_compute_autocorr</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>autoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <name><name>autoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_ref_coefs</name><argument_list>(<argument><expr><name>autoc</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>avg_err</name> <operator>=</operator> <operator>(</operator><name>avg_err</name> <operator>+</operator> <name><name>error</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>signal</name><operator>/</operator><name>avg_err</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ff_lpc_calc_coefs</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_order</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>coefs</name><index>[]</index><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>shift</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lpc_passes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>omethod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zero_shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>autoc</name><index>[<expr><name>MAX_LPC_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ref</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>lpc</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_order</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>max_order</name> <operator>&gt;=</operator> <name>MIN_LPC_ORDER</name> <operator>&amp;&amp;</operator> <name>max_order</name> <operator>&lt;=</operator> <name>MAX_LPC_ORDER</name> <operator>&amp;&amp;</operator>
<name>lpc_type</name> <operator>&gt;</operator> <name>FF_LPC_TYPE_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>lpc_type</name> <operator>==</operator> <name>FF_LPC_TYPE_CHOLESKY</name> <operator>||</operator> <name>lpc_type</name> <operator>==</operator> <name>FF_LPC_TYPE_LEVINSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>||</operator> <name>max_order</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_order</name></name> <operator>||</operator>
<name>lpc_type</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>lpc_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_lpc_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_lpc_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>, <argument><expr><name>lpc_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lpc_passes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lpc_passes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lpc_type</name> <operator>==</operator> <name>FF_LPC_TYPE_LEVINSON</name> <operator>||</operator> <operator>(</operator><name>lpc_type</name> <operator>==</operator> <name>FF_LPC_TYPE_CHOLESKY</name> <operator>&amp;&amp;</operator> <name>lpc_passes</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>lpc_apply_welch_window</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>lpc_compute_autocorr</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>, <argument><expr><name>autoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_lpc_coefs</name><argument_list>(<argument><expr><name>autoc</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lpc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_LPC_ORDER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lpc_type</name> <operator>==</operator> <name>FF_LPC_TYPE_CHOLESKY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LLSModel</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lls_models</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_LPC_ORDER</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_LPC_ORDER</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coeff</name><index>[<expr><name>max_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>lpc</name><index>[<expr><name>max_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init>;</init> <condition><expr><name>pass</name><operator>&lt;</operator><name>lpc_passes</name></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>avpriv_init_lls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>pass</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>weight</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>max_order</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>blocksize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>max_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <name><name>samples</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>pass</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>eval</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>, <decl><type ref="prev"/><name>rinv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>eval</name><operator>=</operator> <name><name>m</name><index>[<expr><name>pass</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>evaluate_lls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><operator>(</operator><name>pass</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>var</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_order</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eval</name><operator>=</operator> <operator>(</operator><literal type="number">512</literal><operator>&gt;&gt;</operator><name>pass</name><operator>)</operator> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>eval</name> <operator>-</operator> <name><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inv</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><name>eval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rinv</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>max_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>rinv</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>weight</name> <operator>+=</operator> <name>inv</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>weight</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><index>[<expr><name>pass</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>update_lls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>pass</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>avpriv_solve_lls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>pass</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><name><name>m</name><index>[<expr><operator>(</operator><name>pass</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><operator>(</operator><name>pass</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>variance</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>weight</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>blocksize</name> <operator>-</operator> <name>max_order</name><operator>)</operator> <operator>/</operator> <literal type="number">4000</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>max_order</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>max_order</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_EST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <call><name>estimate_best_order</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>min_order</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>opt_order</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quantize_lpc_coefs</name><argument_list>(<argument><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>min_shift</name></expr></argument>, <argument><expr><name>max_shift</name></expr></argument>, <argument><expr><name>zero_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>min_order</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>quantize_lpc_coefs</name><argument_list>(<argument><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>min_shift</name></expr></argument>, <argument><expr><name>max_shift</name></expr></argument>, <argument><expr><name>zero_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>opt_order</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_lpc_init</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_order</name></name> <operator>=</operator> <name>max_order</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_type</name></name> <operator>=</operator> <name>lpc_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_buffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name>blocksize</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>max_order</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>windowed_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>windowed_buffer</name></name> <operator>+</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>max_order</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_apply_welch_window</name></name> <operator>=</operator> <name>lpc_apply_welch_window_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_compute_autocorr</name></name> <operator>=</operator> <name>lpc_compute_autocorr_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_lpc_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_lpc_end</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>windowed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
