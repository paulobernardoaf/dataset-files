<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dca_lbr.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DCA_LBR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DCA_LBR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_exss.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_CHANNELS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_CHANNELS_TOTAL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_SUBBANDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_TONES</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_TIME_SAMPLES</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LBR_TIME_HISTORY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<enum>enum <name>DCALBRHeader</name> <block>{
<decl><name>DCA_LBR_HEADER_SYNC_ONLY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>DCA_LBR_HEADER_DECODER_INIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>DCALbrTone</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>x_freq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>f_delt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ph_rot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pad</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>amp</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>phs</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>DCALbrTone</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DCALbrDecoder</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ch_mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bit_rate_orig</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bit_rate_scaled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nchannels_total</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>freq_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>band_limit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>limited_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>limited_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res_profile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nsubbands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>g3_avg_only_start_sb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>min_mono_subband</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_mono_subband</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>framenum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lbr_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>warned</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>quant_levels</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sb_indices</name><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sec_ch_sbms</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sec_ch_lrms</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ch_pres</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>grid_1_scf</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>grid_2_scf</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>grid_3_avg</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>grid_3_scf</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>grid_3_pres</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>high_res_scf</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>part_stereo</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>part_stereo_pres</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>sb_scf</name><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>time_samples</name><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ts_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ts_size</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>history</name></expr></argument>)</argument_list></call><index>[<expr><name>DCA_LBR_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>lfe_data</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>lfe_history</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>lfe_scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tonal_scf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tonal_bounds</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DCALbrTone</name></type> <name><name>tones</name><index>[<expr><name>DCA_LBR_TONES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ntones</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTContext</name></type> <name>imdct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DCADSPContext</name> <modifier>*</modifier></type><name>dcadsp</name></decl>;</decl_stmt>
}</block></struct></type> <name>DCALbrDecoder</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_dca_lbr_parse</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>DCAExssAsset</name> <modifier>*</modifier></type><name>asset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_dca_lbr_filter_frame</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_lbr_flush</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>av_cold</name> <name>int</name></type> <name>ff_dca_lbr_init</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_lbr_close</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
