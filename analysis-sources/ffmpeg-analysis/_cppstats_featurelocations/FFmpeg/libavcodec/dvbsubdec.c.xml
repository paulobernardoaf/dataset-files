<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dvbsubdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_PAGE_SEGMENT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_REGION_SEGMENT</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_CLUT_SEGMENT</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_OBJECT_SEGMENT</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DISPLAYDEFINITION_SEGMENT</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DISPLAY_SEGMENT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cm</name></cpp:macro> <cpp:value>(ff_crop_tab + MAX_NEG_CROP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGBA</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)(a) &lt;&lt; 24) | ((r) &lt;&lt; 16) | ((g) &lt;&lt; 8) | (b))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DVBSubCLUT</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>clut4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>clut16</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>clut256</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubCLUT</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubCLUT</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>DVBSubCLUT</name></type> <name>default_clut</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>DVBSubObjectDisplay</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>object_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>region_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fgcolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bgcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubObjectDisplay</name></name> <modifier>*</modifier></type><name>region_list_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubObjectDisplay</name></name> <modifier>*</modifier></type><name>object_list_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubObjectDisplay</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVBSubObject</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubObject</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubObject</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVBSubRegionDisplay</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>region_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubRegionDisplay</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubRegionDisplay</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVBSubRegion</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bgcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>computed_clut</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_computed_clut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DVBSubRegion</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubRegion</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVBSubDisplayDefinition</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubDisplayDefinition</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVBSubContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>composition_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ancillary_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compute_edt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>compute_clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>clut_count2</name><index>[<expr><literal type="number">257</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>substream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>prev_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>clut_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>object_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>display_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubDisplayDefinition</name> <modifier>*</modifier></type><name>display_definition</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVBSubContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>DVBSubObject</name><modifier>*</modifier></type> <name>get_object</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>object_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>object_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DVBSubCLUT</name><modifier>*</modifier></type> <name>get_clut</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clut_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>clut_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DVBSubRegion</name><modifier>*</modifier></type> <name>get_region</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>region_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>region_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_region_display_list</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj2</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>obj2_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj_disp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>obj_disp_ptr</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>display_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_object</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj_disp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj_disp</name> <operator>=</operator> <operator>*</operator><name>obj_disp_ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>obj_disp</name> <operator>&amp;&amp;</operator> <name>obj_disp</name> <operator>!=</operator> <name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj_disp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>obj_disp</name><operator>-&gt;</operator><name>object_list_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj_disp</name> <operator>=</operator> <operator>*</operator><name>obj_disp_ptr</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>obj_disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>obj_disp_ptr</name> <operator>=</operator> <name><name>obj_disp</name><operator>-&gt;</operator><name>object_list_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>display_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj2_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj2</name> <operator>=</operator> <operator>*</operator><name>obj2_ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>obj2</name> <operator>!=</operator> <name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj2_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>obj2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj2</name> <operator>=</operator> <operator>*</operator><name>obj2_ptr</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>obj2_ptr</name> <operator>=</operator> <name><name>obj2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>region_list_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_cluts</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>clut</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_objects</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_regions</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_region_display_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvbsub_init_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>substream</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid DVB subtitles stream extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">5</literal><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>substream</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>substream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>substream</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Selected DVB subtitles sub-stream %d is not available\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>substream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_start</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">127</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">127</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">127</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut256</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x88</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x08</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">170</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">127</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">127</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">127</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x88</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">43</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>default_clut</name><operator>.</operator><name>clut256</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvbsub_close_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>delete_regions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_objects</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_cluts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>display_definition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_read_2bit_string</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>destbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbuf_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>non_mod</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>map_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_read</name> <init>= <expr><name>x_pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>*</operator><name>srcbuf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destbuf</name> <operator>+=</operator> <name>x_pos</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>bits</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"line overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_read_4bit_string</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>destbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbuf_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>non_mod</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>map_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_read</name> <init>= <expr><name>x_pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>*</operator><name>srcbuf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destbuf</name> <operator>+=</operator> <name>x_pos</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>bits</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>run_length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"line overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_read_8bit_string</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>destbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbuf_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>non_mod</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>map_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sbuf_end</name> <init>= <expr><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_read</name> <init>= <expr><name>x_pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>destbuf</name> <operator>+=</operator> <name>x_pos</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>srcbuf</name> <operator>&lt;</operator> <name>sbuf_end</name> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>bits</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>run_length</name> <operator>=</operator> <name>bits</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>non_mod</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixels_read</name> <operator>+=</operator> <name>run_length</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>run_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pixels_read</name> <operator>&lt;</operator> <name>dbuf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>destbuf</name><operator>++</operator> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>srcbuf</name><operator>)</operator><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"line overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pixels_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_default_clut</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>clut</name></decl></parameter>, <parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>list</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>list_inv</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>counttab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>counttab2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal></expr>]</index> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>clut_count2</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_count2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_count2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rect-&gt;data[0][(x) + (y)*stride]</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>V</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vl</name> <init>= <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>V</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vr</name> <init>= <expr><ternary><condition><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>w</name></expr> ?</condition><then> <expr><call><name>V</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vt</name> <init>= <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><call><name>V</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vb</name> <init>= <expr><ternary><condition><expr><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>h</name></expr> ?</condition><then> <expr><call><name>V</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>counttab</name><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><operator>(</operator><name>v</name><operator>!=</operator><name>vl</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name><operator>!=</operator><name>vr</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name><operator>!=</operator><name>vt</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name><operator>!=</operator><name>vb</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counttab2</name><index>[<expr><name>vl</name></expr>]</index><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counttab2</name><index>[<expr><name>vr</name></expr>]</index><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counttab2</name><index>[<expr><name>vt</name></expr>]</index><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counttab2</name><index>[<expr><name>vb</name></expr>]</index><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>list[d[(x) + (y)*stride]]</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>counttab2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bestscore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bestv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scorev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scorev</name> <operator>+=</operator> <name><name>counttab2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>scorev</name> <operator>+=</operator> <name><name>list</name><index>[<expr><name>y</name></expr>]</index></name> <operator>*</operator> <name><name>counttab2</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>scorev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">1024LL</literal><operator>*</operator><name>scorev</name> <operator>/</operator> <name><name>counttab</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>bestscore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bestscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bestv</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bestscore</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>list</name> <index>[ <expr><name>bestv</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list_inv</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>bestv</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>--</operator></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><name>count</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name>clut</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>list_inv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>RGBA</name><argument_list>(<argument><expr><name>v</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>v</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>save_subtitle_set</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubDisplayDefinition</name> <modifier>*</modifier></type><name>display_def</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>display_definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>clut_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>display_def</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset_x</name> <operator>=</operator> <name><name>display_def</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_y</name> <operator>=</operator> <name><name>display_def</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Different Version of Segment asked Twice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</init> <condition><expr><name>display</name></expr>;</condition> <incr><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>region</name> <operator>&amp;&amp;</operator> <name><name>region</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compute_edt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_out</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_start</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>(sub-&gt;pts - ctx-&gt;prev_start )</argument>, <argument>AV_TIME_BASE_Q</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal> }</argument>)</argument_list></macro> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</init> <condition><expr><name>display</name></expr>;</condition> <incr><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rect</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>+</operator> <name>offset_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>nb_colors</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>region</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_BITMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>clut</name> <operator>=</operator> <call><name>get_clut</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>clut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clut</name> <operator>=</operator> <operator>&amp;</operator><name>default_clut</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut4</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut256</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut16</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>clut_table</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>region</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clut</name> <operator>==</operator> <operator>&amp;</operator><name>default_clut</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>compute_clut</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>compute_clut</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>has_computed_clut</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compute_default_clut</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>computed_clut</name></name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>has_computed_clut</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>computed_clut</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>computed_clut</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>pict</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>pict</name><operator>.</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rect</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_parse_pixel_data_block</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_bottom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>non_mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name></decl>, <decl><type ref="prev"/><name>y_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>map2to4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0xf</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>map2to8</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>map4to8</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>map_table</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
ff_dlog(avctx, "DVB pixel block size %d, %s field:\n", buf_size,
top_bottom ? "bottom" : "top");

for (i = 0; i &lt; buf_size; i++) {
if (i % 16 == 0)
ff_dlog(avctx, "0x%8p: ", buf+i);

ff_dlog(avctx, "%02x ", buf[i]);
if (i % 16 == 15)
ff_dlog(avctx, "\n");
}

if (i % 16)
ff_dlog(avctx, "\n");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pos</name> <operator>+=</operator> <name>top_bottom</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>buf</name><operator>!=</operator><literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name>x_pos</name> <operator>&gt;=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <name>y_pos</name> <operator>&gt;=</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid object location! %d-%d %d-%d %02x\n"</literal></expr></argument>, <argument><expr><name>x_pos</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>y_pos</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>buf</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>map2to8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>map2to4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <call><name>dvbsub_read_2bit_string</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pbuf</name> <operator>+</operator> <operator>(</operator><name>y_pos</name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>,
<argument><expr><name>non_mod</name></expr></argument>, <argument><expr><name>map_table</name></expr></argument>, <argument><expr><name>x_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"4-bit pixel string in %d-bit region!\n"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>map4to8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <call><name>dvbsub_read_4bit_string</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pbuf</name> <operator>+</operator> <operator>(</operator><name>y_pos</name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>,
<argument><expr><name>non_mod</name></expr></argument>, <argument><expr><name>map_table</name></expr></argument>, <argument><expr><name>x_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x12</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"8-bit pixel string in %d-bit region!\n"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <call><name>dvbsub_read_8bit_string</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pbuf</name> <operator>+</operator> <operator>(</operator><name>y_pos</name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>,
<argument><expr><name>non_mod</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<expr_stmt><expr><name><name>map2to4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map2to4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map2to4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map2to4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x21</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map2to8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><literal type="number">0x22</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map4to8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>

<case>case <expr><literal type="number">0xf0</literal></expr>:</case>
<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Unknown/unsupported pixel block 0x%x\n"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>buf</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>has_computed_clut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse_object_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>object_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_field_len</name></decl>, <decl><type ref="prev"/><name>bottom_field_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coding_method</name></decl>, <decl><type ref="prev"/><name>non_modifying_color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>object_id</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_object</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>object_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coding_method</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>non_modifying_color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coding_method</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_field_len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_field_len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <name>top_field_len</name> <operator>+</operator> <name>bottom_field_len</name> <operator>&gt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Field data size %d+%d too large\n"</literal></expr></argument>, <argument><expr><name>top_field_len</name></expr></argument>, <argument><expr><name>bottom_field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>display</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</init> <condition><expr><name>display</name></expr>;</condition> <incr><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>object_list_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bfl</name> <init>= <expr><name>bottom_field_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbsub_parse_pixel_data_block</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>display</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>top_field_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>non_modifying_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom_field_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>block</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>top_field_len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bfl</name> <operator>=</operator> <name>top_field_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dvbsub_parse_pixel_data_block</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>display</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>bfl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>non_modifying_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown object coding %d\n"</literal></expr></argument>, <argument><expr><name>coding_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse_clut_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>clut_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entry_id</name></decl>, <decl><type ref="prev"/><name>depth</name></decl> , <decl><type ref="prev"/><name>full_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r_add</name></decl>, <decl><type ref="prev"/><name>g_add</name></decl>, <decl><type ref="prev"/><name>b_add</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DVB clut packet:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clut_id</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clut</name> <operator>=</operator> <call><name>get_clut</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>clut_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clut</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clut</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubCLUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clut</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>clut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_clut</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubCLUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>clut_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>clut_list</name></name> <operator>=</operator> <name>clut</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clut</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>version</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry_id</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid clut depth 0x%x!\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>full_range</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>full_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>YUV_TO_RGB1_CCIR</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV_TO_RGB2_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"clut %d := (%d,%d,%d,%d)\n"</literal></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><operator>(</operator><name>depth</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>depth</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>depth</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"More than one bit level marked: %x\n"</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>entry_id</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>clut4</name><index>[<expr><name>entry_id</name></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">255</literal> <operator>-</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>&amp;</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>entry_id</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>clut16</name><index>[<expr><name>entry_id</name></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">255</literal> <operator>-</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clut</name><operator>-&gt;</operator><name>clut256</name><index>[<expr><name>entry_id</name></expr>]</index></name> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">255</literal> <operator>-</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse_region_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>region_id</name></decl>, <decl><type ref="prev"/><name>object_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObject</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubObjectDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>region_id</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>region_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubRegion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_list</name></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fill</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_PAL8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <literal type="number">320</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pixel buffer memory constraint violated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name><operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator>
<name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator>
<name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <name><name>region</name><operator>-&gt;</operator><name>depth</name></name><operator>&gt;</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"region depth %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name><operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>clut</name></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>bgcolor</name></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>bgcolor</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>bgcolor</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Region %d, (%dx%d)\n"</literal></expr></argument>, <argument><expr><name>region_id</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>pbuf</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>bgcolor</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Fill region (%d)\n"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>bgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>delete_region_display_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>object_id</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_object</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>object_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubObject</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>object_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>object_list</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubObjectDisplay</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>object_id</name></name> <operator>=</operator> <name>object_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>&gt;=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>&gt;=</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Object outside region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>buf</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>fgcolor</name></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>bgcolor</name></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>region_list_next</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>object_list_next</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse_page_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>tmp_display_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>tmp_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>region_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>page_state</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>version</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>time_out</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Page time out %ds, state %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>time_out</name></name></expr></argument>, <argument><expr><name>page_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compute_edt</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>save_subtitle_set</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>page_state</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>page_state</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>delete_regions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_objects</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_cluts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_display_list</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>region_id</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>region_id</name></name> <operator>!=</operator> <name>region_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"duplicate region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <name>tmp_display_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>tmp_display_list</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>region_id</name></name> <operator>!=</operator> <name>region_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubRegionDisplay</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp_ptr</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Region %d, (%d,%d)\n"</literal></expr></argument>, <argument><expr><name>region_id</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>tmp_display_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name>tmp_display_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_display_list</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>png_save</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fname2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.ppm"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"P6\n"</literal>
<literal type="string">"%d %d\n"</literal>
<literal type="string">"%d\n"</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s-a.pgm"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"P5\n"</literal>
<literal type="string">"%d %d\n"</literal>
<literal type="string">"%d\n"</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pnmtopng -alpha %s %s &gt; %s.png 2&gt; /dev/null"</literal></expr></argument>, <argument><expr><name>fname2</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error running pnmtopng\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rm %s %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error removing %s and %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>save_display_set</name><parameter_list>(<parameter><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubRegion</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubRegionDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubCLUT</name> <modifier>*</modifier></type><name>clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>clut_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name></decl>, <decl><type ref="prev"/><name>y_pos</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>y_off</name></decl>, <decl><type ref="prev"/><name>x_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fileno_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</init> <condition><expr><name>display</name></expr>;</condition> <incr><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>&lt;</operator> <name>x_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <operator>(</operator><name>x_pos</name> <operator>-</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>&lt;</operator> <name>y_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <operator>(</operator><name>y_pos</name> <operator>-</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name>x_pos</name> <operator>+</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name>y_pos</name> <operator>+</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>x_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>display</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>display_list</name></name></expr>;</init> <condition><expr><name>display</name></expr>;</condition> <incr><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>get_region</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>region_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x_off</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>x_pos</name></name> <operator>-</operator> <name>x_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>y_pos</name></name> <operator>-</operator> <name>y_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clut</name> <operator>=</operator> <call><name>get_clut</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>clut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clut</name> <operator>=</operator> <operator>&amp;</operator><name>default_clut</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut4</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut256</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>clut_table</name> <operator>=</operator> <name><name>clut</name><operator>-&gt;</operator><name>clut16</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pbuf</name><index>[<expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>y_off</name><operator>)</operator> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x_off</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<name><name>clut_table</name><index>[<expr><name><name>region</name><operator>-&gt;</operator><name>pbuf</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"dvbs.%d"</literal></expr></argument>, <argument><expr><name>fileno_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_save</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fileno_index</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse_display_definition_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubDisplayDefinition</name> <modifier>*</modifier></type><name>display_def</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>display_definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dds_version</name></decl>, <decl><type ref="prev"/><name>info_byte</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info_byte</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dds_version</name> <operator>=</operator> <name>info_byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>display_def</name> <operator>&amp;&amp;</operator> <name><name>display_def</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>dds_version</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_def</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display_def</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>display_def</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_def</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>display_definition</name></name> <operator>=</operator> <name>display_def</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>dds_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>display_def</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>display_def</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info_byte</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>display_def</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display_def</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>display_def</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_display_end_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compute_edt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>save_subtitle_set</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>save_display_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVBSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_segment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_dds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DVB sub packet:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>||</operator> <operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"incomplete or broken packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p_end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_type</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>page_id</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_length</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_STARTCODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"segment_type:%d page_id:%d segment_length:%d\n"</literal></expr></argument>, <argument><expr><name>segment_type</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>segment_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"incomplete or broken packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>page_id</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>||</operator> <name>page_id</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>composition_id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ancillary_id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>segment_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DVBSUB_PAGE_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_parse_page_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_sub_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_segment</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DVBSUB_REGION_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_parse_region_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_segment</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DVBSUB_CLUT_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_parse_clut_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>got_segment</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DVBSUB_OBJECT_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_parse_object_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_segment</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DVBSUB_DISPLAYDEFINITION_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_parse_display_definition_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_dds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DVBSUB_DISPLAY_SEGMENT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvbsub_display_end_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_sub_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_segment</name> <operator>==</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_dds</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>got_segment</name> <operator>|=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Subtitling segment type 0x%x, page id %d, length %d\n"</literal></expr></argument>,
<argument><expr><name>segment_type</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>, <argument><expr><name>segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>segment_length</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>got_segment</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Missing display_end_segment, emulating\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dvbsub_display_end_segment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_sub_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compute_edt</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_start</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name> <operator>-</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_SUBTITLE_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"compute_edt"</literal></expr>, <expr><literal type="string">"compute end of time using pts or timeout"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DVBSubContext</name></expr></argument>, <argument><expr><name>compute_edt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"compute_clut"</literal></expr>, <expr><literal type="string">"compute clut when not available(-1) or always(1) or never(0)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DVBSubContext</name></expr></argument>, <argument><expr><name>compute_clut</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dvb_substream"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DVBSubContext</name></expr></argument>, <argument><expr><name>substream</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>DS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dvbsubdec_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"DVB Sub Decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvbsub_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvbsub"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DVB subtitles"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dvbsub_init_decoder</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>dvbsub_close_decoder</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>dvbsub_decode</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dvbsubdec_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
