<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\v4l2_buffers.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/videodev2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_buffers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_m2m.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEC_PER_SEC</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>AVRational</name></type> <name>v4l2_timebase</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>USEC_PER_SEC</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>V4L2m2mContext</name> <modifier>*</modifier></type><name>buf_to_m2mctx</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>V4L2m2mContext</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>V4L2m2mContext</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>logger</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVRational</name></type> <name>v4l2_get_timebase</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>v4l2_set_pts</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>v4l2_pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>v4l2_pts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><call><name>v4l2_get_timebase</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v4l2_timebase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>v4l2_pts</name> <operator>%</operator> <name>USEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>v4l2_pts</name> <operator>/</operator> <name>USEC_PER_SEC</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>v4l2_get_pts</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>v4l2_pts</name></decl>;</decl_stmt>


<expr_stmt><expr><name>v4l2_pts</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>USEC_PER_SEC</name> <operator>+</operator>
<name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>v4l2_pts</name></expr></argument>, <argument><expr><name>v4l2_timebase</name></expr></argument>, <argument><expr><call><name>v4l2_get_timebase</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>v4l2_get_color_primaries</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_ycbcr_encoding</name></name></type> <name>ycbcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_colorspace</name></name></type> <name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>colorspace</name></name></expr> </then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ycbcr</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>ycbcr_enc</name></name></expr></then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ycbcr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_YCBCR_ENC_XV709</name></expr>:</case>
<case>case <expr><name>V4L2_YCBCR_ENC_709</name></expr>:</case> <return>return <expr><name>AVCOL_PRI_BT709</name></expr>;</return>
<case>case <expr><name>V4L2_YCBCR_ENC_XV601</name></expr>:</case>
<case>case <expr><name>V4L2_YCBCR_ENC_601</name></expr>:</case><return>return <expr><name>AVCOL_PRI_BT470M</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_BG</name></expr>:</case> <return>return <expr><name>AVCOL_PRI_BT470BG</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE170M</name></expr>:</case> <return>return <expr><name>AVCOL_PRI_SMPTE170M</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE240M</name></expr>:</case> <return>return <expr><name>AVCOL_PRI_SMPTE240M</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_BT2020</name></expr>:</case> <return>return <expr><name>AVCOL_PRI_BT2020</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>AVCOL_PRI_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVColorRange</name></name></type> <name>v4l2_get_color_range</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_quantization</name></name></type> <name>qt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qt</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>quantization</name></name></expr> </then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>quantization</name></name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>qt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_QUANTIZATION_LIM_RANGE</name></expr>:</case> <return>return <expr><name>AVCOL_RANGE_MPEG</name></expr>;</return>
<case>case <expr><name>V4L2_QUANTIZATION_FULL_RANGE</name></expr>:</case> <return>return <expr><name>AVCOL_RANGE_JPEG</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVColorSpace</name></name></type> <name>v4l2_get_color_space</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_ycbcr_encoding</name></name></type> <name>ycbcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_colorspace</name></name></type> <name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>colorspace</name></name></expr> </then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ycbcr</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>ycbcr_enc</name></name></expr></then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_COLORSPACE_SRGB</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_RGB</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_REC709</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_BT709</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_M</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_FCC</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_BG</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_BT470BG</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE170M</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_SMPTE170M</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE240M</name></expr>:</case> <return>return <expr><name>AVCOL_SPC_SMPTE240M</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_BT2020</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ycbcr</name> <operator>==</operator> <name>V4L2_YCBCR_ENC_BT2020_CONST_LUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVCOL_SPC_BT2020_CL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>;</return></block_content></block></else></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>v4l2_get_color_trc</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_ycbcr_encoding</name></name></type> <name>ycbcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_xfer_func</name></name></type> <name>xfer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_colorspace</name></name></type> <name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>colorspace</name></name></expr> </then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ycbcr</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>ycbcr_enc</name></name></expr></then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xfer</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>xfer_func</name></name></expr></then><else>:
<expr><name><name>buf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>xfer_func</name></name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>xfer</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_XFER_FUNC_709</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_BT709</name></expr>;</return>
<case>case <expr><name>V4L2_XFER_FUNC_SRGB</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_IEC61966_2_1</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_M</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_GAMMA22</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_BG</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_GAMMA28</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE170M</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_SMPTE170M</name></expr>;</return>
<case>case <expr><name>V4L2_COLORSPACE_SMPTE240M</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_SMPTE240M</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>ycbcr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_YCBCR_ENC_XV709</name></expr>:</case>
<case>case <expr><name>V4L2_YCBCR_ENC_XV601</name></expr>:</case> <return>return <expr><name>AVCOL_TRC_BT1361_ECG</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>v4l2_free_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2Buffer</name><modifier>*</modifier></type> <name>avbuf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avbuf</name><operator>-&gt;</operator><name>context_refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_sub_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reinit</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>refsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>V4L2BUF_AVAILABLE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>streamon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_v4l2_buffer_enqueue</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avbuf</name><operator>-&gt;</operator><name>context_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_buf_increase_ref</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>context_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>context_refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>context_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>self_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>context_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>context_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>V4L2BUF_RET_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_buf_to_bufref</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>&gt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>num_planes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>mm_addr</name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>data_offset</name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>, <argument><expr><name>v4l2_free_buffer</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_buf_increase_ref</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_bufref_to_buf</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name><modifier>*</modifier></type> <name>bref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesused</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>&gt;=</operator> <name><name>out</name><operator>-&gt;</operator><name>num_planes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytesused</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>mm_addr</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>length</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>bytesused</name> <operator>=</operator> <name>bytesused</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>bytesused</name></name> <operator>=</operator> <name>bytesused</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_buffer_buf_to_swframe</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>av_pix_fmt</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_buf_to_bufref</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytesperline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></for>


<switch>switch <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>av_pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>+</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>*</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>+</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>*</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>*</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_buffer_swframe_to_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>fmt</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_format</name> <init>= <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name></expr> </then><else>: <expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name></expr> </then><else>: <expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_planar_format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>pixel_format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V4L2_PIX_FMT_YUV420M</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_YVU420M</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_YUV422M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>V4L2_PIX_FMT_YUV422M</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_YVU422M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>V4L2_PIX_FMT_YVU422M</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_YUV444M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>V4L2_PIX_FMT_YUV444M</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_YVU444M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>V4L2_PIX_FMT_YVU444M</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>V4L2_PIX_FMT_NV12M</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_NV21M</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_NV12MT_16X16</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_NV12MT</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_NV16M</name></expr>:</case>
<case>case <expr><name>V4L2_PIX_FMT_NV61M</name></expr>:</case>
<expr_stmt><expr><name>is_planar_format</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_planar_format</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>planes_nb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>planes_nb</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_bufref_to_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_bufref_to_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ff_v4l2_buffer_avframe_to_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>v4l2_set_pts</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>v4l2_buffer_swframe_to_buf</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_buffer_buf_to_avframe</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_buffer_buf_to_swframe</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_BUF_FLAG_KEYFRAME</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <call><name>v4l2_get_color_primaries</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <call><name>v4l2_get_color_space</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <call><name>v4l2_get_color_range</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <call><name>v4l2_get_color_trc</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>v4l2_get_pts</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_BUF_FLAG_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: driver decode error\n"</literal></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>decode_error_flags</name></name> <operator>|=</operator> <name>FF_DECODE_ERROR_INVALID_BITSTREAM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_buffer_buf_to_avpkt</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_buf_to_bufref</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesused</name></expr> </then><else>: <expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>bytesused</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_BUF_FLAG_KEYFRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_BUF_FLAG_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s driver encode error\n"</literal></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>v4l2_get_pts</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_buffer_avpkt_to_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_bufref_to_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>v4l2_set_pts</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>V4L2_BUF_FLAG_KEYFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_buffer_initialize</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name><modifier>*</modifier></type> <name>avbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avbuf</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>VIDEO_MAX_PLANES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>planes</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QUERYBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytesperline</name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>plane_fmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytesperline</name></expr> </then><else>:
<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>bytesperline</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mm_addr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>,
<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
<argument><expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>m</name><operator>.</operator><name>mem_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mm_addr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
<argument><expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avbuf</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mm_addr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>V4L2BUF_AVAILABLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>bytesused</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesused</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ff_v4l2_buffer_enqueue</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_buffer_enqueue</name><parameter_list>(<parameter><decl><type><name>V4L2Buffer</name><modifier>*</modifier></type> <name>avbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>buf_to_m2mctx</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>V4L2BUF_IN_DRIVER</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
