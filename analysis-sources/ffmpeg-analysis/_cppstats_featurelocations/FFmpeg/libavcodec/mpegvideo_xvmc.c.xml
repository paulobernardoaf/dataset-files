<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegvideo_xvmc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/XvMC.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xvmc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xvmc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>








<function><type><name>void</name></type> <name>ff_xvmc_init_block</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xvmc_pix_fmt</name></name> <modifier>*</modifier></type><name>render</name> <init>= <expr><operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>render</name> <operator>&amp;&amp;</operator> <name><name>render</name><operator>-&gt;</operator><name>xvmc_id</name></name> <operator>==</operator> <name>AV_XVMC_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>(</operator><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><operator>)</operator><operator>(</operator><name><name>render</name><operator>-&gt;</operator><name>data_blocks</name></name> <operator>+</operator> <name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exchange_uv</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>ff_xvmc_pack_pblocks</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_block_count</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cbp</name> <operator>&lt;&lt;=</operator> <literal type="number">12</literal><operator>-</operator><name>mb_block_count</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cbp</name> <operator>+=</operator> <name>cbp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>swap_uv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exchange_uv</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_xvmc_field_start</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xvmc_pix_fmt</name></name> <modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>render</name> <init>= <expr><operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_block_count</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>render</name> <operator>||</operator> <name><name>render</name><operator>-&gt;</operator><name>xvmc_id</name></name> <operator>!=</operator> <name>AV_XVMC_ID</name> <operator>||</operator>
<operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>data_blocks</name></name> <operator>||</operator> <operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>mv_blocks</name></name> <operator>||</operator>
<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><operator>(</operator><literal type="number">64</literal><operator>*</operator><literal type="number">6</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>render</name><operator>-&gt;</operator><name>allocated_data_blocks</name></name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">64</literal> <operator>||</operator>
<operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>p_surface</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Render token doesn't look as expected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Rendering surface contains %i unprocessed blocks.\n"</literal></expr></argument>,
<argument><expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>render</name><operator>-&gt;</operator><name>allocated_data_blocks</name></name> <operator>&lt;</operator> <name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name><operator>*</operator><name>mb_block_count</name> <operator>||</operator>
<name><name>render</name><operator>-&gt;</operator><name>start_mv_blocks_num</name></name> <operator>&gt;=</operator> <name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name> <operator>||</operator>
<name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name> <operator>&gt;</operator>
<name><name>render</name><operator>-&gt;</operator><name>allocated_data_blocks</name></name> <operator>-</operator>
<name>mb_block_count</name><operator>*</operator><operator>(</operator><name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name><operator>-</operator><name><name>render</name><operator>-&gt;</operator><name>start_mv_blocks_num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Rendering surface doesn't provide enough block structures to work with.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>XVMC_SECOND_FIELD</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>p_future_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>p_past_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>xvmc_id</name></name> <operator>!=</operator> <name>AV_XVMC_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>p_future_surface</name></name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>p_surface</name></name></expr>;</expr_stmt>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>render</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>xvmc_id</name></name> <operator>!=</operator> <name>AV_XVMC_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>p_past_surface</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>p_surface</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_xvmc_field_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xvmc_pix_fmt</name></name> <modifier>*</modifier></type><name>render</name> <init>= <expr><operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mpeg_draw_horiz_band</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_xvmc_decode_mb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XvMCMacroBlock</name> <modifier>*</modifier></type><name>mv_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xvmc_pix_fmt</name></name> <modifier>*</modifier></type><name>render</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cbp</name></decl>, <decl><type ref="prev"/><name>blocks_per_mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"XVMC doesn't support encoding!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>render</name> <operator>=</operator> <operator>(</operator>struct <name>xvmc_pix_fmt</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>render</name><operator>-&gt;</operator><name>xvmc_id</name></name> <operator>==</operator> <name>AV_XVMC_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>render</name><operator>-&gt;</operator><name>mv_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>mv_block</name> <operator>=</operator> <operator>&amp;</operator><name><name>render</name><operator>-&gt;</operator><name>mv_blocks</name><index>[<expr><name><name>render</name><operator>-&gt;</operator><name>start_mv_blocks_num</name></name> <operator>+</operator>
<name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>dct_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>macroblock_type</name></name> <operator>=</operator> <name>XVMC_MB_TYPE_INTRA</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>macroblock_type</name></name> <operator>=</operator> <name>XVMC_MB_TYPE_PATTERN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_FORWARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>macroblock_type</name></name> <operator>|=</operator> <name>XVMC_MB_TYPE_MOTION_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_BACKWARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>macroblock_type</name></name> <operator>|=</operator> <name>XVMC_MB_TYPE_MOTION_BACKWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MV_TYPE_16X16</name></expr>:</case>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>XVMC_PREDICTION_FRAME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_16X8</name></expr>:</case>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>XVMC_PREDICTION_16x8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_FIELD</name></expr>:</case>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>XVMC_PREDICTION_FIELD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MV_TYPE_DMV</name></expr>:</case>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>XVMC_PREDICTION_DUAL_PRIME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>PMV</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_vertical_field_select</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_FIELD</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_16X8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_vertical_field_select</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_vertical_field_select</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_vertical_field_select</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>motion_vertical_field_select</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_mb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cbp</name> <operator>+=</operator> <name>cbp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_mb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>unsigned_intra</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cbp</name> <operator>&amp;=</operator> <literal type="number">0xf</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>blocks_per_mb</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>coded_block_pattern</name></name> <operator>=</operator> <name>cbp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mv_block</name><operator>-&gt;</operator><name>macroblock_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XVMC_MB_TYPE_PATTERN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_mb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>render</name><operator>-&gt;</operator><name>idct</name></name> <operator>||</operator> <operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>unsigned_intra</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>render</name><operator>-&gt;</operator><name>idct</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pack_pblocks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>render</name><operator>-&gt;</operator><name>data_blocks</name><index>[<expr><name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name> <operator>&lt;=</operator> <name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>render</name><operator>-&gt;</operator><name>next_free_data_block_num</name></name> <operator>&lt;=</operator> <name><name>render</name><operator>-&gt;</operator><name>allocated_data_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>render</name><operator>-&gt;</operator><name>filled_mv_blocks_num</name></name> <operator>==</operator> <name><name>render</name><operator>-&gt;</operator><name>allocated_mv_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mpeg_draw_horiz_band</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1_XVMC_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg1_xvmc_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg1_xvmc"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_XVMC</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>ff_xvmc_field_start</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_xvmc_field_end</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>decode_mb</name> <operator>=</operator> <name>ff_xvmc_decode_mb</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2_XVMC_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg2_xvmc_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg2_xvmc"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_XVMC</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>ff_xvmc_field_start</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_xvmc_field_end</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>decode_mb</name> <operator>=</operator> <name>ff_xvmc_decode_mb</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
