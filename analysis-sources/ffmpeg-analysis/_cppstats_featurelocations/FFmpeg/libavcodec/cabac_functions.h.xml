<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cabac_functions.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_CABAC_FUNCTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_CABAC_FUNCTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNCHECKED_BITSTREAM_READER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>!CONFIG_SAFE_BITSTREAM_READER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aarch64/cabac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/cabac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/cabac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_MIPS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/cabac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ff_h264_norm_shift</name> <init>= <expr><name>ff_h264_cabac_tables</name> <operator>+</operator> <name>H264_NORM_SHIFT_OFFSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ff_h264_lps_range</name> <init>= <expr><name>ff_h264_cabac_tables</name> <operator>+</operator> <name>H264_LPS_RANGE_OFFSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ff_h264_mlps_state</name> <init>= <expr><name>ff_h264_cabac_tables</name> <operator>+</operator> <name>H264_MLPS_STATE_OFFSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ff_h264_last_coeff_flag_offset_8x8</name> <init>= <expr><name>ff_h264_cabac_tables</name> <operator>+</operator> <name>H264_LAST_COEFF_FLAG_OFFSET_8x8_OFFSET</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_bypass</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_terminate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>refill</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CABAC_BITS</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <name>CABAC_MASK</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>CABAC_BITS</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_terminate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>renorm_cabac_decoder_once</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name><init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <literal type="number">0x100</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <name>CABAC_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refill</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_inline</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>refill2</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_FAST_CLZ</name></expr></cpp:if>
<expr_stmt><expr><name>x</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>^</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name><name>ff_h264_norm_shift</name><index>[<expr><name>x</name><operator>&gt;&gt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_ctz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>CABAC_BITS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name><operator>=</operator> <operator>-</operator><name>CABAC_MASK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CABAC_BITS</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
<expr_stmt><expr><name>x</name><operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name><operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name>x</name><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>CABAC_BITS</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_inline</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_inline</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>*</operator><name>state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>RangeLPS</name><init>= <expr><name><name>ff_h264_lps_range</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&amp;</operator><literal type="number">0xC0</literal><operator>)</operator> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>lps_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <name>RangeLPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lps_mask</name><operator>=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>lps_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>+=</operator> <operator>(</operator><name>RangeLPS</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>)</operator> <operator>&amp;</operator> <name>lps_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>^=</operator><name>lps_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name><operator>=</operator> <operator>(</operator><name>ff_h264_mlps_state</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><index>[<expr><name>s</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name><operator>=</operator> <name>s</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lps_mask</name><operator>=</operator> <name><name>ff_h264_norm_shift</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;=</operator> <name>lps_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <name>lps_mask</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <name>CABAC_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refill2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>av_noinline</name> <name>av_unused</name></type> <name>get_cabac_noinline</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><call><name>get_cabac_inline</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>av_unused</name></type> <name>get_cabac</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><call><name>get_cabac_inline</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_bypass</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name> <name>av_unused</name></type> <name>get_cabac_bypass</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>range</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <name>CABAC_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refill</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>range</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;</operator> <name>range</name></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <name>range</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_bypass_sign</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_bypass_sign</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>range</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <name>CABAC_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refill</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>range</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name>range</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>val</name><operator>^</operator><name>mask</name><operator>)</operator><operator>-</operator><name>mask</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>get_cabac_terminate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name> <name>av_unused</name></type> <name>get_cabac_terminate</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>CABAC_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>renorm_cabac_decoder_once</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if><else>else<block>{<block_content>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>skip_bytes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>skip_bytes</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CABAC_BITS</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name>ptr</name><operator>)</operator> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_init_cabac_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
