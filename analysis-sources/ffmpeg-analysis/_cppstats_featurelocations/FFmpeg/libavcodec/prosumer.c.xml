<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\prosumer.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ProSumerContext</name> <block>{
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>lut</name><index>[<expr><literal type="number">0x2000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>initial_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decbuffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProSumerContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAIR</name><parameter_list>(<parameter><type><name>high</name></type></parameter>, <parameter><type><name>low</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint64_t)(high) &lt;&lt; 32) | low)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>bytestream2_get_eof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFF00u</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x8000u</literal> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFFu</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFF00u</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x8000u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFFu</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF00u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fill</name> <operator>=</operator> <name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xF000u</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0Fu</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pos</name> <operator>^</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><call><name>bytestream2_peek_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pos</name> <operator>^</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><call><name>bytestream2_peek_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>PAIR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_predict</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name>stride</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0x3F3F3F3F</literal> <operator>&amp;</operator> <name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFCFCFCFC</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProSumerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>discard_damaged_percentage</name></name> <operator>/</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name> <operator>+</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vertical_predict</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>initial_line</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vertical_predict</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>u</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>v</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>u</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>v</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TB</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 + ((i) &gt; 10) + ((i) &gt; 49))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x0101</literal></expr>, <expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x0202</literal></expr>, <expr><literal type="number">0x300</literal></expr>, <expr><literal type="number">0xFFFF</literal></expr>, <expr><literal type="number">0x400</literal></expr>, <expr><literal type="number">0xFEFE</literal></expr>, <expr><literal type="number">0x500</literal></expr>,
<expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x700</literal></expr>, <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0x900</literal></expr>, <expr><literal type="number">0xFF00</literal></expr>, <expr><literal type="number">0xA00</literal></expr>, <expr><literal type="number">0x8001</literal></expr>, <expr><literal type="number">0x600</literal></expr>,
<expr><literal type="number">0x8002</literal></expr>, <expr><literal type="number">0xB00</literal></expr>, <expr><literal type="number">0xFCFC</literal></expr>, <expr><literal type="number">0x010</literal></expr>, <expr><literal type="number">0x0404</literal></expr>, <expr><literal type="number">0x030</literal></expr>, <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0xD30</literal></expr>, <expr><literal type="number">0xFEFC</literal></expr>, <expr><literal type="number">0x020</literal></expr>,
<expr><literal type="number">0xFCFE</literal></expr>, <expr><literal type="number">0x040</literal></expr>, <expr><literal type="number">0xFEFF</literal></expr>, <expr><literal type="number">0xD20</literal></expr>, <expr><literal type="number">0x0808</literal></expr>, <expr><literal type="number">0x060</literal></expr>, <expr><literal type="number">0xFFFE</literal></expr>, <expr><literal type="number">0x050</literal></expr>, <expr><literal type="number">0x0402</literal></expr>, <expr><literal type="number">0xC00</literal></expr>,
<expr><literal type="number">0x0204</literal></expr>, <expr><literal type="number">0xC10</literal></expr>, <expr><literal type="number">0xF8F8</literal></expr>, <expr><literal type="number">0xC30</literal></expr>, <expr><literal type="number">0x0201</literal></expr>, <expr><literal type="number">0xC40</literal></expr>, <expr><literal type="number">0x0102</literal></expr>, <expr><literal type="number">0xC60</literal></expr>, <expr><literal type="number">0x0804</literal></expr>, <expr><literal type="number">0xF30</literal></expr>,
<expr><literal type="number">0x0408</literal></expr>, <expr><literal type="number">0xE00</literal></expr>, <expr><literal type="number">0xF8FC</literal></expr>, <expr><literal type="number">0xE10</literal></expr>, <expr><literal type="number">0xFCF8</literal></expr>, <expr><literal type="number">0xC70</literal></expr>, <expr><literal type="number">0x00FE</literal></expr>, <expr><literal type="number">0xD00</literal></expr>, <expr><literal type="number">0xFE00</literal></expr>, <expr><literal type="number">0xD40</literal></expr>,
<expr><literal type="number">0xFF01</literal></expr>, <expr><literal type="number">0xD50</literal></expr>, <expr><literal type="number">0x01FF</literal></expr>, <expr><literal type="number">0xD60</literal></expr>, <expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">0xD70</literal></expr>, <expr><literal type="number">0xFCFF</literal></expr>, <expr><literal type="number">0xE20</literal></expr>, <expr><literal type="number">0x0104</literal></expr>, <expr><literal type="number">0xE30</literal></expr>,
<expr><literal type="number">0xF0F0</literal></expr>, <expr><literal type="number">0xE50</literal></expr>, <expr><literal type="number">0x0401</literal></expr>, <expr><literal type="number">0xE70</literal></expr>, <expr><literal type="number">0x02FE</literal></expr>, <expr><literal type="number">0xF00</literal></expr>, <expr><literal type="number">0xFE02</literal></expr>, <expr><literal type="number">0xF10</literal></expr>, <expr><literal type="number">0xFE01</literal></expr>, <expr><literal type="number">0xF20</literal></expr>,
<expr><literal type="number">0x01FE</literal></expr>, <expr><literal type="number">0xF40</literal></expr>, <expr><literal type="number">0xFF02</literal></expr>, <expr><literal type="number">0xF50</literal></expr>, <expr><literal type="number">0x02FF</literal></expr>, <expr><literal type="number">0xF60</literal></expr>, <expr><literal type="number">0x8003</literal></expr>, <expr><literal type="number">0xC20</literal></expr>, <expr><literal type="number">0x8004</literal></expr>, <expr><literal type="number">0x070</literal></expr>,
<expr><literal type="number">0x8005</literal></expr>, <expr><literal type="number">0xD10</literal></expr>, <expr><literal type="number">0x8006</literal></expr>, <expr><literal type="number">0xC50</literal></expr>, <expr><literal type="number">0x8007</literal></expr>, <expr><literal type="number">0xE60</literal></expr>, <expr><literal type="number">0x8008</literal></expr>, <expr><literal type="number">0xE40</literal></expr>, <expr><literal type="number">0x8009</literal></expr>, <expr><literal type="number">0xF70</literal></expr>,
<expr><literal type="number">0xFC02</literal></expr>, <expr><literal type="number">0x080</literal></expr>, <expr><literal type="number">0xFE04</literal></expr>, <expr><literal type="number">0x081</literal></expr>, <expr><literal type="number">0xFC00</literal></expr>, <expr><literal type="number">0x082</literal></expr>, <expr><literal type="number">0x02FC</literal></expr>, <expr><literal type="number">0x083</literal></expr>, <expr><literal type="number">0x1010</literal></expr>, <expr><literal type="number">0x084</literal></expr>,
<expr><literal type="number">0x00FC</literal></expr>, <expr><literal type="number">0x085</literal></expr>, <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">0x086</literal></expr>, <expr><literal type="number">0x0400</literal></expr>, <expr><literal type="number">0x087</literal></expr>, <expr><literal type="number">0xFFFC</literal></expr>, <expr><literal type="number">0x088</literal></expr>, <expr><literal type="number">0x1008</literal></expr>, <expr><literal type="number">0x089</literal></expr>,
<expr><literal type="number">0x0810</literal></expr>, <expr><literal type="number">0x08A</literal></expr>, <expr><literal type="number">0x0802</literal></expr>, <expr><literal type="number">0x08B</literal></expr>, <expr><literal type="number">0x0208</literal></expr>, <expr><literal type="number">0x08C</literal></expr>, <expr><literal type="number">0xFEF8</literal></expr>, <expr><literal type="number">0x08D</literal></expr>, <expr><literal type="number">0xFC01</literal></expr>, <expr><literal type="number">0x08E</literal></expr>,
<expr><literal type="number">0x04FF</literal></expr>, <expr><literal type="number">0x08F</literal></expr>, <expr><literal type="number">0xF8FE</literal></expr>, <expr><literal type="number">0x090</literal></expr>, <expr><literal type="number">0xFC04</literal></expr>, <expr><literal type="number">0x091</literal></expr>, <expr><literal type="number">0x04FC</literal></expr>, <expr><literal type="number">0x092</literal></expr>, <expr><literal type="number">0xFF04</literal></expr>, <expr><literal type="number">0x093</literal></expr>,
<expr><literal type="number">0x01FC</literal></expr>, <expr><literal type="number">0x094</literal></expr>, <expr><literal type="number">0xF0F8</literal></expr>, <expr><literal type="number">0x095</literal></expr>, <expr><literal type="number">0xF8F0</literal></expr>, <expr><literal type="number">0x096</literal></expr>, <expr><literal type="number">0x04FE</literal></expr>, <expr><literal type="number">0x097</literal></expr>, <expr><literal type="number">0xF0FC</literal></expr>, <expr><literal type="number">0x098</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x099</literal></expr>, <expr><literal type="number">0x08FE</literal></expr>, <expr><literal type="number">0x09A</literal></expr>, <expr><literal type="number">0x01F8</literal></expr>, <expr><literal type="number">0x09B</literal></expr>, <expr><literal type="number">0x0800</literal></expr>, <expr><literal type="number">0x09C</literal></expr>, <expr><literal type="number">0x08FC</literal></expr>, <expr><literal type="number">0x09D</literal></expr>,
<expr><literal type="number">0xFE08</literal></expr>, <expr><literal type="number">0x09E</literal></expr>, <expr><literal type="number">0xFC08</literal></expr>, <expr><literal type="number">0x09F</literal></expr>, <expr><literal type="number">0xF800</literal></expr>, <expr><literal type="number">0x0A0</literal></expr>, <expr><literal type="number">0x0108</literal></expr>, <expr><literal type="number">0x0A1</literal></expr>, <expr><literal type="number">0xF802</literal></expr>, <expr><literal type="number">0x0A2</literal></expr>,
<expr><literal type="number">0x0801</literal></expr>, <expr><literal type="number">0x0A3</literal></expr>, <expr><literal type="number">0x00F8</literal></expr>, <expr><literal type="number">0x0A4</literal></expr>, <expr><literal type="number">0xF804</literal></expr>, <expr><literal type="number">0x0A5</literal></expr>, <expr><literal type="number">0xF8FF</literal></expr>, <expr><literal type="number">0x0A6</literal></expr>, <expr><literal type="number">0xFFF8</literal></expr>, <expr><literal type="number">0x0A7</literal></expr>,
<expr><literal type="number">0x04F8</literal></expr>, <expr><literal type="number">0x0A8</literal></expr>, <expr><literal type="number">0x02F8</literal></expr>, <expr><literal type="number">0x0A9</literal></expr>, <expr><literal type="number">0x1004</literal></expr>, <expr><literal type="number">0x0AA</literal></expr>, <expr><literal type="number">0x08F8</literal></expr>, <expr><literal type="number">0x0AB</literal></expr>, <expr><literal type="number">0xF808</literal></expr>, <expr><literal type="number">0x0AC</literal></expr>,
<expr><literal type="number">0x0410</literal></expr>, <expr><literal type="number">0x0AD</literal></expr>, <expr><literal type="number">0xFF08</literal></expr>, <expr><literal type="number">0x0AE</literal></expr>, <expr><literal type="number">0x08FF</literal></expr>, <expr><literal type="number">0x0AF</literal></expr>, <expr><literal type="number">0xFCF0</literal></expr>, <expr><literal type="number">0x0B0</literal></expr>, <expr><literal type="number">0xF801</literal></expr>, <expr><literal type="number">0x0B1</literal></expr>,
<expr><literal type="number">0xE0F0</literal></expr>, <expr><literal type="number">0x0B2</literal></expr>, <expr><literal type="number">0xF3F3</literal></expr>, <expr><literal type="number">0x0B3</literal></expr>, <expr><literal type="number">0xF0E0</literal></expr>, <expr><literal type="number">0x0B4</literal></expr>, <expr><literal type="number">0xFAFA</literal></expr>, <expr><literal type="number">0x0B5</literal></expr>, <expr><literal type="number">0xF7F7</literal></expr>, <expr><literal type="number">0x0B6</literal></expr>,
<expr><literal type="number">0xFEF0</literal></expr>, <expr><literal type="number">0x0B7</literal></expr>, <expr><literal type="number">0xF0FE</literal></expr>, <expr><literal type="number">0x0B8</literal></expr>, <expr><literal type="number">0xE9E9</literal></expr>, <expr><literal type="number">0x0B9</literal></expr>, <expr><literal type="number">0xF9F9</literal></expr>, <expr><literal type="number">0x0BA</literal></expr>, <expr><literal type="number">0x2020</literal></expr>, <expr><literal type="number">0x0BB</literal></expr>,
<expr><literal type="number">0xE0E0</literal></expr>, <expr><literal type="number">0x0BC</literal></expr>, <expr><literal type="number">0x02F0</literal></expr>, <expr><literal type="number">0x0BD</literal></expr>, <expr><literal type="number">0x04F0</literal></expr>, <expr><literal type="number">0x0BE</literal></expr>, <expr><literal type="number">0x2010</literal></expr>, <expr><literal type="number">0x0BF</literal></expr>, <expr><literal type="number">0xECEC</literal></expr>, <expr><literal type="number">0x0C0</literal></expr>,
<expr><literal type="number">0xEFEF</literal></expr>, <expr><literal type="number">0x0C1</literal></expr>, <expr><literal type="number">0x1020</literal></expr>, <expr><literal type="number">0x0C2</literal></expr>, <expr><literal type="number">0xF5F5</literal></expr>, <expr><literal type="number">0x0C3</literal></expr>, <expr><literal type="number">0xF4F4</literal></expr>, <expr><literal type="number">0x0C4</literal></expr>, <expr><literal type="number">0xEDED</literal></expr>, <expr><literal type="number">0x0C5</literal></expr>,
<expr><literal type="number">0xEAEA</literal></expr>, <expr><literal type="number">0x0C6</literal></expr>, <expr><literal type="number">0xFBFB</literal></expr>, <expr><literal type="number">0x0C7</literal></expr>, <expr><literal type="number">0x1002</literal></expr>, <expr><literal type="number">0x0C8</literal></expr>, <expr><literal type="number">0xF2F2</literal></expr>, <expr><literal type="number">0x0C9</literal></expr>, <expr><literal type="number">0xF6F6</literal></expr>, <expr><literal type="number">0x0CA</literal></expr>,
<expr><literal type="number">0xF1F1</literal></expr>, <expr><literal type="number">0x0CB</literal></expr>, <expr><literal type="number">0xFDFD</literal></expr>, <expr><literal type="number">0x0CC</literal></expr>, <expr><literal type="number">0x0210</literal></expr>, <expr><literal type="number">0x0CD</literal></expr>, <expr><literal type="number">0x10FF</literal></expr>, <expr><literal type="number">0x0CE</literal></expr>, <expr><literal type="number">0xFDFE</literal></expr>, <expr><literal type="number">0x0CF</literal></expr>,
<expr><literal type="number">0x10F8</literal></expr>, <expr><literal type="number">0x0D0</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x0D1</literal></expr>, <expr><literal type="number">0xF001</literal></expr>, <expr><literal type="number">0x0D2</literal></expr>, <expr><literal type="number">0x1001</literal></expr>, <expr><literal type="number">0x0D3</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">0x0D4</literal></expr>,
<expr><literal type="number">0x10FE</literal></expr>, <expr><literal type="number">0x0D5</literal></expr>, <expr><literal type="number">0xEBEB</literal></expr>, <expr><literal type="number">0x0D6</literal></expr>, <expr><literal type="number">0xFE10</literal></expr>, <expr><literal type="number">0x0D7</literal></expr>, <expr><literal type="number">0x0110</literal></expr>, <expr><literal type="number">0x0D8</literal></expr>, <expr><literal type="number">0xF000</literal></expr>, <expr><literal type="number">0x0D9</literal></expr>,
<expr><literal type="number">0x08F0</literal></expr>, <expr><literal type="number">0x0DA</literal></expr>, <expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">0x0DB</literal></expr>, <expr><literal type="number">0x0303</literal></expr>, <expr><literal type="number">0x0DC</literal></expr>, <expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">0x0DD</literal></expr>, <expr><literal type="number">0xF002</literal></expr>, <expr><literal type="number">0x0DE</literal></expr>,
<expr><literal type="number">0x10FC</literal></expr>, <expr><literal type="number">0x0DF</literal></expr>, <expr><literal type="number">0xFC10</literal></expr>, <expr><literal type="number">0x0E0</literal></expr>, <expr><literal type="number">0xF0FF</literal></expr>, <expr><literal type="number">0x0E1</literal></expr>, <expr><literal type="number">0xEEEE</literal></expr>, <expr><literal type="number">0x0E2</literal></expr>, <expr><literal type="number">0xF004</literal></expr>, <expr><literal type="number">0x0E3</literal></expr>,
<expr><literal type="number">0xFFF0</literal></expr>, <expr><literal type="number">0x0E4</literal></expr>, <expr><literal type="number">0xF7F8</literal></expr>, <expr><literal type="number">0x0E5</literal></expr>, <expr><literal type="number">0xF3F2</literal></expr>, <expr><literal type="number">0x0E6</literal></expr>, <expr><literal type="number">0xF9FA</literal></expr>, <expr><literal type="number">0x0E7</literal></expr>, <expr><literal type="number">0x0820</literal></expr>, <expr><literal type="number">0x0E8</literal></expr>,
<expr><literal type="number">0x0302</literal></expr>, <expr><literal type="number">0x0E9</literal></expr>, <expr><literal type="number">0xE0F8</literal></expr>, <expr><literal type="number">0x0EA</literal></expr>, <expr><literal type="number">0x0505</literal></expr>, <expr><literal type="number">0x0EB</literal></expr>, <expr><literal type="number">0x2008</literal></expr>, <expr><literal type="number">0x0EC</literal></expr>, <expr><literal type="number">0xE8E8</literal></expr>, <expr><literal type="number">0x0ED</literal></expr>,
<expr><literal type="number">0x0403</literal></expr>, <expr><literal type="number">0x0EE</literal></expr>, <expr><literal type="number">0xFBFC</literal></expr>, <expr><literal type="number">0x0EF</literal></expr>, <expr><literal type="number">0xFCFD</literal></expr>, <expr><literal type="number">0x0F0</literal></expr>, <expr><literal type="number">0xFBFA</literal></expr>, <expr><literal type="number">0x0F1</literal></expr>, <expr><literal type="number">0x0203</literal></expr>, <expr><literal type="number">0x0F2</literal></expr>,
<expr><literal type="number">0xFCFB</literal></expr>, <expr><literal type="number">0x0F3</literal></expr>, <expr><literal type="number">0x0304</literal></expr>, <expr><literal type="number">0x0F4</literal></expr>, <expr><literal type="number">0xF810</literal></expr>, <expr><literal type="number">0x0F5</literal></expr>, <expr><literal type="number">0xFF10</literal></expr>, <expr><literal type="number">0x0F6</literal></expr>, <expr><literal type="number">0xF008</literal></expr>, <expr><literal type="number">0x0F7</literal></expr>,
<expr><literal type="number">0xFEFD</literal></expr>, <expr><literal type="number">0x0F8</literal></expr>, <expr><literal type="number">0xF7F6</literal></expr>, <expr><literal type="number">0x0F9</literal></expr>, <expr><literal type="number">0xF2F1</literal></expr>, <expr><literal type="number">0x0FA</literal></expr>, <expr><literal type="number">0xF3F4</literal></expr>, <expr><literal type="number">0x0FB</literal></expr>, <expr><literal type="number">0xEDEC</literal></expr>, <expr><literal type="number">0x0FC</literal></expr>,
<expr><literal type="number">0xF4F1</literal></expr>, <expr><literal type="number">0x0FD</literal></expr>, <expr><literal type="number">0xF5F6</literal></expr>, <expr><literal type="number">0x0FE</literal></expr>, <expr><literal type="number">0xF0F1</literal></expr>, <expr><literal type="number">0x0FF</literal></expr>, <expr><literal type="number">0xF9F8</literal></expr>, <expr><literal type="number">0xC80</literal></expr>, <expr><literal type="number">0x10F0</literal></expr>, <expr><literal type="number">0xC81</literal></expr>,
<expr><literal type="number">0xF2F3</literal></expr>, <expr><literal type="number">0xC82</literal></expr>, <expr><literal type="number">0xF7F9</literal></expr>, <expr><literal type="number">0xC83</literal></expr>, <expr><literal type="number">0xF6F5</literal></expr>, <expr><literal type="number">0xC84</literal></expr>, <expr><literal type="number">0xF0EF</literal></expr>, <expr><literal type="number">0xC85</literal></expr>, <expr><literal type="number">0xF4F5</literal></expr>, <expr><literal type="number">0xC86</literal></expr>,
<expr><literal type="number">0xF6F7</literal></expr>, <expr><literal type="number">0xC87</literal></expr>, <expr><literal type="number">0xFAF9</literal></expr>, <expr><literal type="number">0xC88</literal></expr>, <expr><literal type="number">0x0405</literal></expr>, <expr><literal type="number">0xC89</literal></expr>, <expr><literal type="number">0xF8F9</literal></expr>, <expr><literal type="number">0xC8A</literal></expr>, <expr><literal type="number">0xFAFB</literal></expr>, <expr><literal type="number">0xC8B</literal></expr>,
<expr><literal type="number">0xF1F0</literal></expr>, <expr><literal type="number">0xC8C</literal></expr>, <expr><literal type="number">0xF4F3</literal></expr>, <expr><literal type="number">0xC8D</literal></expr>, <expr><literal type="number">0xF1F2</literal></expr>, <expr><literal type="number">0xC8E</literal></expr>, <expr><literal type="number">0xF8E0</literal></expr>, <expr><literal type="number">0xC8F</literal></expr>, <expr><literal type="number">0xF8F7</literal></expr>, <expr><literal type="number">0xC90</literal></expr>,
<expr><literal type="number">0xFDFC</literal></expr>, <expr><literal type="number">0xC91</literal></expr>, <expr><literal type="number">0xF8FA</literal></expr>, <expr><literal type="number">0xC92</literal></expr>, <expr><literal type="number">0xFAF6</literal></expr>, <expr><literal type="number">0xC93</literal></expr>, <expr><literal type="number">0xEEEF</literal></expr>, <expr><literal type="number">0xC94</literal></expr>, <expr><literal type="number">0xF5F7</literal></expr>, <expr><literal type="number">0xC95</literal></expr>,
<expr><literal type="number">0xFDFB</literal></expr>, <expr><literal type="number">0xC96</literal></expr>, <expr><literal type="number">0xF4F6</literal></expr>, <expr><literal type="number">0xC97</literal></expr>, <expr><literal type="number">0xFCFA</literal></expr>, <expr><literal type="number">0xC98</literal></expr>, <expr><literal type="number">0xECED</literal></expr>, <expr><literal type="number">0xC99</literal></expr>, <expr><literal type="number">0xF0F3</literal></expr>, <expr><literal type="number">0xC9A</literal></expr>,
<expr><literal type="number">0xF3F1</literal></expr>, <expr><literal type="number">0xC9B</literal></expr>, <expr><literal type="number">0xECEB</literal></expr>, <expr><literal type="number">0xC9C</literal></expr>, <expr><literal type="number">0xEDEE</literal></expr>, <expr><literal type="number">0xC9D</literal></expr>, <expr><literal type="number">0xF9F7</literal></expr>, <expr><literal type="number">0xC9E</literal></expr>, <expr><literal type="number">0x0420</literal></expr>, <expr><literal type="number">0xC9F</literal></expr>,
<expr><literal type="number">0xEBEA</literal></expr>, <expr><literal type="number">0xCA0</literal></expr>, <expr><literal type="number">0xF0F4</literal></expr>, <expr><literal type="number">0xCA1</literal></expr>, <expr><literal type="number">0xF3F5</literal></expr>, <expr><literal type="number">0xCA2</literal></expr>, <expr><literal type="number">0xFAF7</literal></expr>, <expr><literal type="number">0xCA3</literal></expr>, <expr><literal type="number">0x0301</literal></expr>, <expr><literal type="number">0xCA4</literal></expr>,
<expr><literal type="number">0xF3F7</literal></expr>, <expr><literal type="number">0xCA5</literal></expr>, <expr><literal type="number">0xF7F3</literal></expr>, <expr><literal type="number">0xCA6</literal></expr>, <expr><literal type="number">0xEFF0</literal></expr>, <expr><literal type="number">0xCA7</literal></expr>, <expr><literal type="number">0xF9F6</literal></expr>, <expr><literal type="number">0xCA8</literal></expr>, <expr><literal type="number">0xEFEE</literal></expr>, <expr><literal type="number">0xCA9</literal></expr>,
<expr><literal type="number">0xF4F7</literal></expr>, <expr><literal type="number">0xCAA</literal></expr>, <expr><literal type="number">0x0504</literal></expr>, <expr><literal type="number">0xCAB</literal></expr>, <expr><literal type="number">0xF5F4</literal></expr>, <expr><literal type="number">0xCAC</literal></expr>, <expr><literal type="number">0xF1F3</literal></expr>, <expr><literal type="number">0xCAD</literal></expr>, <expr><literal type="number">0xEBEE</literal></expr>, <expr><literal type="number">0xCAE</literal></expr>,
<expr><literal type="number">0xF2F5</literal></expr>, <expr><literal type="number">0xCAF</literal></expr>, <expr><literal type="number">0xF3EF</literal></expr>, <expr><literal type="number">0xCB0</literal></expr>, <expr><literal type="number">0xF5F1</literal></expr>, <expr><literal type="number">0xCB1</literal></expr>, <expr><literal type="number">0xF9F3</literal></expr>, <expr><literal type="number">0xCB2</literal></expr>, <expr><literal type="number">0xEDF0</literal></expr>, <expr><literal type="number">0xCB3</literal></expr>,
<expr><literal type="number">0xEEF1</literal></expr>, <expr><literal type="number">0xCB4</literal></expr>, <expr><literal type="number">0xF6F9</literal></expr>, <expr><literal type="number">0xCB5</literal></expr>, <expr><literal type="number">0xF8FB</literal></expr>, <expr><literal type="number">0xCB6</literal></expr>, <expr><literal type="number">0xF010</literal></expr>, <expr><literal type="number">0xCB7</literal></expr>, <expr><literal type="number">0xF2F6</literal></expr>, <expr><literal type="number">0xCB8</literal></expr>,
<expr><literal type="number">0xF4ED</literal></expr>, <expr><literal type="number">0xCB9</literal></expr>, <expr><literal type="number">0xF7FB</literal></expr>, <expr><literal type="number">0xCBA</literal></expr>, <expr><literal type="number">0xF8F3</literal></expr>, <expr><literal type="number">0xCBB</literal></expr>, <expr><literal type="number">0xEDEB</literal></expr>, <expr><literal type="number">0xCBC</literal></expr>, <expr><literal type="number">0xF0F2</literal></expr>, <expr><literal type="number">0xCBD</literal></expr>,
<expr><literal type="number">0xF2F9</literal></expr>, <expr><literal type="number">0xCBE</literal></expr>, <expr><literal type="number">0xF8F1</literal></expr>, <expr><literal type="number">0xCBF</literal></expr>, <expr><literal type="number">0xFAFC</literal></expr>, <expr><literal type="number">0xCC0</literal></expr>, <expr><literal type="number">0xFBF8</literal></expr>, <expr><literal type="number">0xCC1</literal></expr>, <expr><literal type="number">0xF6F0</literal></expr>, <expr><literal type="number">0xCC2</literal></expr>,
<expr><literal type="number">0xFAF8</literal></expr>, <expr><literal type="number">0xCC3</literal></expr>, <expr><literal type="number">0x0103</literal></expr>, <expr><literal type="number">0xCC4</literal></expr>, <expr><literal type="number">0xF3F6</literal></expr>, <expr><literal type="number">0xCC5</literal></expr>, <expr><literal type="number">0xF4F9</literal></expr>, <expr><literal type="number">0xCC6</literal></expr>, <expr><literal type="number">0xF7F2</literal></expr>, <expr><literal type="number">0xCC7</literal></expr>,
<expr><literal type="number">0x2004</literal></expr>, <expr><literal type="number">0xCC8</literal></expr>, <expr><literal type="number">0xF2F0</literal></expr>, <expr><literal type="number">0xCC9</literal></expr>, <expr><literal type="number">0xF4F2</literal></expr>, <expr><literal type="number">0xCCA</literal></expr>, <expr><literal type="number">0xEEED</literal></expr>, <expr><literal type="number">0xCCB</literal></expr>, <expr><literal type="number">0xFCE0</literal></expr>, <expr><literal type="number">0xCCC</literal></expr>,
<expr><literal type="number">0xEAE9</literal></expr>, <expr><literal type="number">0xCCD</literal></expr>, <expr><literal type="number">0xEAEB</literal></expr>, <expr><literal type="number">0xCCE</literal></expr>, <expr><literal type="number">0xF6F4</literal></expr>, <expr><literal type="number">0xCCF</literal></expr>, <expr><literal type="number">0xFFFD</literal></expr>, <expr><literal type="number">0xCD0</literal></expr>, <expr><literal type="number">0xE9EA</literal></expr>, <expr><literal type="number">0xCD1</literal></expr>,
<expr><literal type="number">0xF1F4</literal></expr>, <expr><literal type="number">0xCD2</literal></expr>, <expr><literal type="number">0xF6EF</literal></expr>, <expr><literal type="number">0xCD3</literal></expr>, <expr><literal type="number">0xF6F8</literal></expr>, <expr><literal type="number">0xCD4</literal></expr>, <expr><literal type="number">0xF8F6</literal></expr>, <expr><literal type="number">0xCD5</literal></expr>, <expr><literal type="number">0xEFF2</literal></expr>, <expr><literal type="number">0xCD6</literal></expr>,
<expr><literal type="number">0xEFF1</literal></expr>, <expr><literal type="number">0xCD7</literal></expr>, <expr><literal type="number">0xF7F1</literal></expr>, <expr><literal type="number">0xCD8</literal></expr>, <expr><literal type="number">0xFBFD</literal></expr>, <expr><literal type="number">0xCD9</literal></expr>, <expr><literal type="number">0xFEF6</literal></expr>, <expr><literal type="number">0xCDA</literal></expr>, <expr><literal type="number">0xFFF7</literal></expr>, <expr><literal type="number">0xCDB</literal></expr>,
<expr><literal type="number">0x0605</literal></expr>, <expr><literal type="number">0xCDC</literal></expr>, <expr><literal type="number">0xF0F5</literal></expr>, <expr><literal type="number">0xCDD</literal></expr>, <expr><literal type="number">0xF0FA</literal></expr>, <expr><literal type="number">0xCDE</literal></expr>, <expr><literal type="number">0xF1F9</literal></expr>, <expr><literal type="number">0xCDF</literal></expr>, <expr><literal type="number">0xF2FC</literal></expr>, <expr><literal type="number">0xCE0</literal></expr>,
<expr><literal type="number">0xF7EE</literal></expr>, <expr><literal type="number">0xCE1</literal></expr>, <expr><literal type="number">0xF7F5</literal></expr>, <expr><literal type="number">0xCE2</literal></expr>, <expr><literal type="number">0xF9FC</literal></expr>, <expr><literal type="number">0xCE3</literal></expr>, <expr><literal type="number">0xFAF5</literal></expr>, <expr><literal type="number">0xCE4</literal></expr>, <expr><literal type="number">0xFBF1</literal></expr>, <expr><literal type="number">0xCE5</literal></expr>,
<expr><literal type="number">0xF1EF</literal></expr>, <expr><literal type="number">0xCE6</literal></expr>, <expr><literal type="number">0xF1FA</literal></expr>, <expr><literal type="number">0xCE7</literal></expr>, <expr><literal type="number">0xF4F8</literal></expr>, <expr><literal type="number">0xCE8</literal></expr>, <expr><literal type="number">0xF7F0</literal></expr>, <expr><literal type="number">0xCE9</literal></expr>, <expr><literal type="number">0xF7F4</literal></expr>, <expr><literal type="number">0xCEA</literal></expr>,
<expr><literal type="number">0xF7FC</literal></expr>, <expr><literal type="number">0xCEB</literal></expr>, <expr><literal type="number">0xF9FB</literal></expr>, <expr><literal type="number">0xCEC</literal></expr>, <expr><literal type="number">0xFAF1</literal></expr>, <expr><literal type="number">0xCED</literal></expr>, <expr><literal type="number">0xFBF9</literal></expr>, <expr><literal type="number">0xCEE</literal></expr>, <expr><literal type="number">0xFDFF</literal></expr>, <expr><literal type="number">0xCEF</literal></expr>,
<expr><literal type="number">0xE0FC</literal></expr>, <expr><literal type="number">0xCF0</literal></expr>, <expr><literal type="number">0xEBEC</literal></expr>, <expr><literal type="number">0xCF1</literal></expr>, <expr><literal type="number">0xEDEF</literal></expr>, <expr><literal type="number">0xCF2</literal></expr>, <expr><literal type="number">0xEFED</literal></expr>, <expr><literal type="number">0xCF3</literal></expr>, <expr><literal type="number">0xF1F6</literal></expr>, <expr><literal type="number">0xCF4</literal></expr>,
<expr><literal type="number">0xF2F7</literal></expr>, <expr><literal type="number">0xCF5</literal></expr>, <expr><literal type="number">0xF3EE</literal></expr>, <expr><literal type="number">0xCF6</literal></expr>, <expr><literal type="number">0xF3F8</literal></expr>, <expr><literal type="number">0xCF7</literal></expr>, <expr><literal type="number">0xF5F2</literal></expr>, <expr><literal type="number">0xCF8</literal></expr>, <expr><literal type="number">0xF8F2</literal></expr>, <expr><literal type="number">0xCF9</literal></expr>,
<expr><literal type="number">0xF9F1</literal></expr>, <expr><literal type="number">0xCFA</literal></expr>, <expr><literal type="number">0xF9F2</literal></expr>, <expr><literal type="number">0xCFB</literal></expr>, <expr><literal type="number">0xFBEF</literal></expr>, <expr><literal type="number">0xCFC</literal></expr>, <expr><literal type="number">0x00FD</literal></expr>, <expr><literal type="number">0xCFD</literal></expr>, <expr><literal type="number">0xECEE</literal></expr>, <expr><literal type="number">0xCFE</literal></expr>,
<expr><literal type="number">0xF2EF</literal></expr>, <expr><literal type="number">0xCFF</literal></expr>, <expr><literal type="number">0xF2F8</literal></expr>, <expr><literal type="number">0xD80</literal></expr>, <expr><literal type="number">0xF5F0</literal></expr>, <expr><literal type="number">0xD81</literal></expr>, <expr><literal type="number">0xF6F2</literal></expr>, <expr><literal type="number">0xD82</literal></expr>, <expr><literal type="number">0xFCF7</literal></expr>, <expr><literal type="number">0xD83</literal></expr>,
<expr><literal type="number">0xFCF9</literal></expr>, <expr><literal type="number">0xD84</literal></expr>, <expr><literal type="number">0x0506</literal></expr>, <expr><literal type="number">0xD85</literal></expr>, <expr><literal type="number">0xEEEC</literal></expr>, <expr><literal type="number">0xD86</literal></expr>, <expr><literal type="number">0xF0F6</literal></expr>, <expr><literal type="number">0xD87</literal></expr>, <expr><literal type="number">0xF2F4</literal></expr>, <expr><literal type="number">0xD88</literal></expr>,
<expr><literal type="number">0xF6F1</literal></expr>, <expr><literal type="number">0xD89</literal></expr>, <expr><literal type="number">0xF8F5</literal></expr>, <expr><literal type="number">0xD8A</literal></expr>, <expr><literal type="number">0xF9F4</literal></expr>, <expr><literal type="number">0xD8B</literal></expr>, <expr><literal type="number">0xFBF7</literal></expr>, <expr><literal type="number">0xD8C</literal></expr>, <expr><literal type="number">0x0503</literal></expr>, <expr><literal type="number">0xD8D</literal></expr>,
<expr><literal type="number">0xEFEC</literal></expr>, <expr><literal type="number">0xD8E</literal></expr>, <expr><literal type="number">0xF3F0</literal></expr>, <expr><literal type="number">0xD8F</literal></expr>, <expr><literal type="number">0xF4F0</literal></expr>, <expr><literal type="number">0xD90</literal></expr>, <expr><literal type="number">0xF5F3</literal></expr>, <expr><literal type="number">0xD91</literal></expr>, <expr><literal type="number">0xF6F3</literal></expr>, <expr><literal type="number">0xD92</literal></expr>,
<expr><literal type="number">0xF7FA</literal></expr>, <expr><literal type="number">0xD93</literal></expr>, <expr><literal type="number">0x800A</literal></expr>, <expr><literal type="number">0xD94</literal></expr>, <expr><literal type="number">0x800B</literal></expr>, <expr><literal type="number">0xD95</literal></expr>, <expr><literal type="number">0x800C</literal></expr>, <expr><literal type="number">0xD96</literal></expr>, <expr><literal type="number">0x800D</literal></expr>, <expr><literal type="number">0xD97</literal></expr>,
<expr><literal type="number">0x800E</literal></expr>, <expr><literal type="number">0xD98</literal></expr>, <expr><literal type="number">0x800F</literal></expr>, <expr><literal type="number">0xD99</literal></expr>, <expr><literal type="number">0x8010</literal></expr>, <expr><literal type="number">0xD9A</literal></expr>, <expr><literal type="number">0x8011</literal></expr>, <expr><literal type="number">0xD9B</literal></expr>, <expr><literal type="number">0x8012</literal></expr>, <expr><literal type="number">0xD9C</literal></expr>,
<expr><literal type="number">0x8013</literal></expr>, <expr><literal type="number">0xD9D</literal></expr>, <expr><literal type="number">0x8014</literal></expr>, <expr><literal type="number">0xD9E</literal></expr>, <expr><literal type="number">0x8015</literal></expr>, <expr><literal type="number">0xD9F</literal></expr>, <expr><literal type="number">0x8016</literal></expr>, <expr><literal type="number">0xDA0</literal></expr>, <expr><literal type="number">0x8017</literal></expr>, <expr><literal type="number">0xDA1</literal></expr>,
<expr><literal type="number">0x8018</literal></expr>, <expr><literal type="number">0xDA2</literal></expr>, <expr><literal type="number">0x8019</literal></expr>, <expr><literal type="number">0xDA3</literal></expr>, <expr><literal type="number">0x801A</literal></expr>, <expr><literal type="number">0xDA4</literal></expr>, <expr><literal type="number">0x801B</literal></expr>, <expr><literal type="number">0xDA5</literal></expr>, <expr><literal type="number">0x801C</literal></expr>, <expr><literal type="number">0xDA6</literal></expr>,
<expr><literal type="number">0x801D</literal></expr>, <expr><literal type="number">0xDA7</literal></expr>, <expr><literal type="number">0x801E</literal></expr>, <expr><literal type="number">0xDA8</literal></expr>, <expr><literal type="number">0x801F</literal></expr>, <expr><literal type="number">0xDA9</literal></expr>, <expr><literal type="number">0x8020</literal></expr>, <expr><literal type="number">0xDAA</literal></expr>, <expr><literal type="number">0x8021</literal></expr>, <expr><literal type="number">0xDAB</literal></expr>,
<expr><literal type="number">0x8022</literal></expr>, <expr><literal type="number">0xDAC</literal></expr>, <expr><literal type="number">0x8023</literal></expr>, <expr><literal type="number">0xDAD</literal></expr>, <expr><literal type="number">0x8024</literal></expr>, <expr><literal type="number">0xDAE</literal></expr>, <expr><literal type="number">0x8025</literal></expr>, <expr><literal type="number">0xDAF</literal></expr>, <expr><literal type="number">0x8026</literal></expr>, <expr><literal type="number">0xDB0</literal></expr>,
<expr><literal type="number">0x8027</literal></expr>, <expr><literal type="number">0xDB1</literal></expr>, <expr><literal type="number">0x8028</literal></expr>, <expr><literal type="number">0xDB2</literal></expr>, <expr><literal type="number">0x8029</literal></expr>, <expr><literal type="number">0xDB3</literal></expr>, <expr><literal type="number">0x802A</literal></expr>, <expr><literal type="number">0xDB4</literal></expr>, <expr><literal type="number">0x802B</literal></expr>, <expr><literal type="number">0xDB5</literal></expr>,
<expr><literal type="number">0x802C</literal></expr>, <expr><literal type="number">0xDB6</literal></expr>, <expr><literal type="number">0x802D</literal></expr>, <expr><literal type="number">0xDB7</literal></expr>, <expr><literal type="number">0x802E</literal></expr>, <expr><literal type="number">0xDB8</literal></expr>, <expr><literal type="number">0x802F</literal></expr>, <expr><literal type="number">0xDB9</literal></expr>, <expr><literal type="number">0x80FF</literal></expr>, <expr><literal type="number">0xDBA</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_elements</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>e0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>idx</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">43</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>TB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFFF00000u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>-</operator> <name>b</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>==</operator> <name><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0x80u</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e0</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>e0</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">12</literal> <operator>+</operator> <name>b</name> <operator>-</operator> <name>shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x40u</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e1</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>&lt;&lt;=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e1</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_lut</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>TB</name><argument_list>(<argument><expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name><name>table</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>f</name> <init>= <expr><literal type="number">0xFFFFFFFFu</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFu</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF00u</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x8000u</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_elements</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0x68000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProSumerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <literal type="number">3LL</literal> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>initial_line</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>initial_line</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>initial_line</name></name></expr></argument>, <argument><expr><literal type="number">0x80u</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_lut</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProSumerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>initial_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_prosumer_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"prosumer"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Brooktree ProSumer Video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PROSUMER</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProSumerContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>
<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
