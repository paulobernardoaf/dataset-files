<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pthread_slice.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/slicethread.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>action_func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>action_func2</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>main_func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>SliceThreadContext</name> <block>{
<decl_stmt><decl><type><name>AVSliceThread</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action_func</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action_func2</name> <modifier>*</modifier></type><name>func2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>main_func</name> <modifier>*</modifier></type><name>mainfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>job_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entries_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>progress_cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>progress_mutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>SliceThreadContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mainfunc</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>func</name></name></expr> ?</condition><then> <expr><call><name><name>c</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>args</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>job_size</name></name> <operator>*</operator> <name>jobnr</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name><name>c</name><operator>-&gt;</operator><name>func2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>threadnr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>rets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rets</name><index>[<expr><name>jobnr</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_slice_thread_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avpriv_slicethread_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>progress_cond</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_execute</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>action_func</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_SLICE</name><operator>)</operator> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>avcodec_default_execute</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>job_count</name></expr></argument>, <argument><expr><name>job_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>job_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>job_size</name></name> <operator>=</operator> <name>job_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rets</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_slicethread_execute</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>job_count</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>mainfunc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_execute2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>action_func2</name><modifier>*</modifier></type> <name>func2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>func2</name></name> <operator>=</operator> <name>func2</name></expr>;</expr_stmt>
<return>return <expr><call><name>thread_execute</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>job_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_slice_thread_execute_with_mainfunc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>action_func2</name><modifier>*</modifier></type> <name>func2</name></decl></parameter>, <parameter><decl><type><name>main_func</name> <modifier>*</modifier></type><name>mainfunc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>func2</name></name> <operator>=</operator> <name>func2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mainfunc</name></name> <operator>=</operator> <name>mainfunc</name></expr>;</expr_stmt>
<return>return <expr><call><name>thread_execute</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>job_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_slice_thread_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_count</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>mainfunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">2800</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thread_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_cpus</name> <init>= <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_cpus</name></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_cpus</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thread_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_cpus</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>thread_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thread_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name> <operator>=</operator> <name>c</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mainfunc</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_SLICE_THREAD_HAS_MF</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>main_function</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>(</operator><name>thread_count</name> <operator>=</operator> <call><name>avpriv_slicethread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>worker_func</name></expr></argument>, <argument><expr><name>mainfunc</name></expr></argument>, <argument><expr><name>thread_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_slicethread_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <name>thread_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>execute</name></name> <operator>=</operator> <name>thread_execute</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name> <operator>=</operator> <name>thread_execute2</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_report_progress2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>field</name></expr>]</index></name> <operator>+=</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_await_progress2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name> <operator>||</operator> <operator>!</operator><name>field</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>thread</name> <operator>=</operator> <ternary><condition><expr><name>thread</name></expr> ?</condition><then> <expr><name>thread</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>entries</name><index>[<expr><name>field</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>shift</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alloc_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_cond_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>entries</name></name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entries_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_reset_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SliceThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>entries_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
