<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\g722dec.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g722.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(G722Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"bits_per_codeword"</literal></expr>, <expr><literal type="string">"Bits per G722 codeword"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bits_per_codeword</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">8</literal></expr> }</block></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>g722_decoder_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"g722 decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g722_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g722dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>low_inv_quant5</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">2919</literal></expr>, <expr><operator>-</operator><literal type="number">2195</literal></expr>, <expr><operator>-</operator><literal type="number">1765</literal></expr>, <expr><operator>-</operator><literal type="number">1458</literal></expr>, <expr><operator>-</operator><literal type="number">1219</literal></expr>, <expr><operator>-</operator><literal type="number">1023</literal></expr>,
<expr><operator>-</operator><literal type="number">858</literal></expr>, <expr><operator>-</operator><literal type="number">714</literal></expr>, <expr><operator>-</operator><literal type="number">587</literal></expr>, <expr><operator>-</operator><literal type="number">473</literal></expr>, <expr><operator>-</operator><literal type="number">370</literal></expr>, <expr><operator>-</operator><literal type="number">276</literal></expr>, <expr><operator>-</operator><literal type="number">190</literal></expr>, <expr><operator>-</operator><literal type="number">110</literal></expr>,
<expr><literal type="number">2919</literal></expr>, <expr><literal type="number">2195</literal></expr>, <expr><literal type="number">1765</literal></expr>, <expr><literal type="number">1458</literal></expr>, <expr><literal type="number">1219</literal></expr>, <expr><literal type="number">1023</literal></expr>, <expr><literal type="number">858</literal></expr>, <expr><literal type="number">714</literal></expr>,
<expr><literal type="number">587</literal></expr>, <expr><literal type="number">473</literal></expr>, <expr><literal type="number">370</literal></expr>, <expr><literal type="number">276</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">35</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>low_inv_quants</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>ff_g722_low_inv_quant6</name></expr>,
<expr><name>low_inv_quant5</name></expr>,
<expr><name>ff_g722_low_inv_quant4</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g722_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bits_per_codeword</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>quantizer_table</name> <init>= <expr><name><name>low_inv_quants</name><index>[<expr><name>skip</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ilow</name></decl>, <decl><type ref="prev"/><name>ihigh</name></decl>, <decl><type ref="prev"/><name>rlow</name></decl>, <decl><type ref="prev"/><name>rhigh</name></decl>, <decl><type ref="prev"/><name>dhigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>xout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ihigh</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ilow</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>-</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rlow</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>*</operator> <name><name>quantizer_table</name><index>[<expr><name>ilow</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator>
<operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s_predictor</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g722_update_low_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ilow</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>skip</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dhigh</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>*</operator> <name><name>ff_g722_high_inv_quant</name><index>[<expr><name>ihigh</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rhigh</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>dhigh</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s_predictor</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g722_update_high_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dhigh</name></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rlow</name> <operator>+</operator> <name>rhigh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rlow</name> <operator>-</operator> <name>rhigh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>apply_qmf</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>xout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_buf</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>xout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_buf</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>xout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>&gt;=</operator> <name>PREV_SAMPLES_BUF_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>-</operator> <literal type="number">22</literal></expr></argument>,
<argument><expr><literal type="number">22</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g722_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g722"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.722 ADPCM"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G722</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G722Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g722_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>g722_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>g722_decoder_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
