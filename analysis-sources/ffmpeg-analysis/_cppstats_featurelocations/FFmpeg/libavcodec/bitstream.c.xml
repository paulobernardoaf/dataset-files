<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\bitstream.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_log2_run</name><index>[<expr><literal type="number">41</literal></expr>]</index></name><init>=<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,
<expr><literal type="number">24</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>avpriv_align_put_bits</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_left</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avpriv_put_string</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>terminate_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>*</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>terminate_string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avpriv_copy_bits</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>words</name> <init>= <expr><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>length</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>length</name> <operator>&lt;=</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_SMALL</name> <operator>||</operator> <name>words</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>words</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>words</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>words</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DATA</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>table</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>wrap</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const uint8_t *ptr = (const uint8_t *)table + i * wrap; switch(size) { case 1: v = *(const uint8_t *)ptr; break; case 2: v = *(const uint16_t *)ptr; break; case 4: v = *(const uint32_t *)ptr; break; default: av_assert1(0); } }</cpp:value></cpp:define>


















<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_table</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_static</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>&gt;</operator> <name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_static</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VLC_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>+</operator> <name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VLC_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VLCcode</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>symbol</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
}</block></struct></type> <name>VLCcode</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_vlcspec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VLCcode</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>build_table</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_nb_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_codes</name></decl></parameter>,
<parameter><decl><type><name>VLCcode</name> <modifier>*</modifier></type><name>codes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>table_size</name></decl>, <decl><type ref="prev"/><name>table_index</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>code_prefix</name></decl>, <decl><type ref="prev"/><name>symbol</name></decl>, <decl><type ref="prev"/><name>subtable_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>volatile</specifier> <call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>volatile</specifier> <name>table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><name>table_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>table_nb_bits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>table_nb_bits</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>table_index</name> <operator>=</operator> <call><name>alloc_table</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"new table index=%d size=%d\n"</literal></expr></argument>, <argument><expr><name>table_index</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>table_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>table_index</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><specifier>volatile</specifier> <call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><operator>&amp;</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>table_index</name></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"i=%d n=%d code=0x%"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>table_nb_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>table_nb_bits</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>table_nb_bits</name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INIT_VLC_LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>bitswap_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldsym</name> <init>= <expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%4x: code=%d n=%d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>||</operator> <name>oldsym</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>!=</operator> <name>n</name> <operator>||</operator> <name>oldsym</name> <operator>!=</operator> <name>symbol</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>table_nb_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code_prefix</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>table_nb_bits</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>subtable_bits</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name> <operator>&lt;&lt;</operator> <name>table_nb_bits</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_codes</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>codes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>-</operator> <name>table_nb_bits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>codes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>table_nb_bits</name><operator>)</operator> <operator>!=</operator> <name>code_prefix</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name> <operator>&lt;&lt;</operator> <name>table_nb_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subtable_bits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>subtable_bits</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>subtable_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>subtable_bits</name></expr></argument>, <argument><expr><name>table_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INIT_VLC_LE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>bitswap_32</name><argument_list>(<argument><expr><name>code_prefix</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>table_nb_bits</name><operator>)</operator></expr> </then><else>: <expr><name>code_prefix</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>subtable_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%4x: n=%d (subtable)\n"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>+</operator> <name>table_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>build_table</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>subtable_bits</name></expr></argument>, <argument><expr><name>k</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>codes</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>index</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><specifier>volatile</specifier> <call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><operator>&amp;</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>table_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"strange codes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<return>return <expr><name>table_index</name></expr>;</return>
</block_content>}</block></function>




























<function><type><name>int</name></type> <name>ff_init_vlc_sparse</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_codes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>codes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codes_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codes_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbols_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbols_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VLCcode</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLCcode</name></type> <name><name>localbuf</name><index>[<expr><literal type="number">1500</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VLC</name></type> <name>localvlc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <name>vlc_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>nb_bits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INIT_VLC_USE_NEW_STATIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nb_codes</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>localbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>localbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>localvlc</name> <operator>=</operator> <operator>*</operator><name>vlc_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc</name> <operator>=</operator> <operator>&amp;</operator><name>localvlc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name>nb_codes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VLCcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>symbols_size</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name>symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>for (i = 0; i &lt; nb_codes; i++) { GET_DATA(buf[j].bits, bits, i, bits_wrap, bits_size); if (!(condition)) continue; if (buf[j].bits &gt; 3*nb_bits || buf[j].bits&gt;32) { av_log(NULL, AV_LOG_ERROR, "Too long VLC (%d) in init_vlc\n", buf[j].bits);if (!(flags &amp; INIT_VLC_USE_NEW_STATIC)) av_free(buf); return AVERROR(EINVAL); } GET_DATA(buf[j].code, codes, i, codes_wrap, codes_size); if (buf[j].code &gt;= (1LL&lt;&lt;buf[j].bits)) { av_log(NULL, AV_LOG_ERROR, "Invalid code %"PRIx32" for %d in " "init_vlc\n", buf[j].code, i); if (!(flags &amp; INIT_VLC_USE_NEW_STATIC)) av_free(buf); return AVERROR(EINVAL); } if (flags &amp; INIT_VLC_LE) buf[j].code = bitswap_32(buf[j].code); else buf[j].code &lt;&lt;= 32 - buf[j].bits; if (symbols) GET_DATA(buf[j].symbol, symbols, i, symbols_wrap, symbols_size) else buf[j].symbol = i; j++; }</cpp:value></cpp:define>




























<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>&gt;</operator> <name>nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr>struct <name>VLCcode</name></expr></argument>, <argument><expr><name>compare_vlcspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>&lt;=</operator> <name>nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_codes</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_table</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>, <argument><expr><name>nb_codes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INIT_VLC_USE_NEW_STATIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name> <operator>!=</operator> <name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"needed %d had %d\n"</literal></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_size</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vlc_arg</name> <operator>=</operator> <operator>*</operator><name>vlc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_free_vlc</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
