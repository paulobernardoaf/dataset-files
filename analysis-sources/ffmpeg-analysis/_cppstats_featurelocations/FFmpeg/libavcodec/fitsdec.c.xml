<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\fitsdec.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FITSContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blank_val</name></decl>;</decl_stmt>
}</block></struct></type> <name>FITSContext</name>;</typedef>









<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_data_min_max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr8</name></decl></parameter>, <parameter><decl><type><name>FITSHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>t8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>t16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>t32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tflt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tdbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name> <operator>=</operator> <name>DBL_MIN</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_N</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case a: for (i = 0; i &lt; header-&gt;naxisn[1]; i++) { for (j = 0; j &lt; header-&gt;naxisn[0]; j++) { t = rd; if (!header-&gt;blank_found || t != header-&gt;blank) { if (t &gt; header-&gt;data_max) header-&gt;data_max = t; if (t &lt; header-&gt;data_min) header-&gt;data_min = t; } ptr8 += abs(a) &gt;&gt; 3; } } break</cpp:value></cpp:define>















<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>tdbl</name></expr></argument>, <argument><expr><call><name>av_int2double</name><argument_list>(<argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>tflt</name></expr></argument>, <argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>t8</name></expr></argument>, <argument><expr><name><name>ptr8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>t16</name></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>t32</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_N</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>t64</name></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>fits_read_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>FITSHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr8</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines_read</name></decl>, <decl><type ref="prev"/><name>bytes_left</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lines_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avpriv_fits_header_init</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>STATE_BITPIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr8</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_fits_header_parse_line</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>ptr8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr8</name> <operator>+=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_read</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_left</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>lines_read</name> <operator>+</operator> <literal type="number">35</literal><operator>)</operator> <operator>/</operator> <literal type="number">36</literal><operator>)</operator> <operator>*</operator> <literal type="number">36</literal> <operator>-</operator> <name>lines_read</name><operator>)</operator> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr8</name> <operator>&lt;</operator> <name>bytes_left</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr8</name> <operator>+=</operator> <name>bytes_left</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>naxis</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"File contains RGB image but NAXIS = %d and NAXIS3 = %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>naxis</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>naxis</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported number of dimensions, NAXIS = %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>naxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>blank_found</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name> <operator>==</operator> <operator>-</operator><literal type="number">32</literal> <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name> <operator>==</operator> <operator>-</operator><literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"BLANK keyword found but BITPIX = %d\n. Ignoring BLANK"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blank_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>naxis</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported size of FITS image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr8</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>ptr8</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>data_min_found</name></name> <operator>||</operator> <operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>data_max_found</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fill_data_min_max</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid BITPIX, %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>bzero</name></name><operator>)</operator> <operator>/</operator> <name><name>header</name><operator>-&gt;</operator><name>bscale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>bzero</name></name><operator>)</operator> <operator>/</operator> <name><name>header</name><operator>-&gt;</operator><name>bscale</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>&gt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>data_max</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>&gt;</operator> <name><name>header</name><operator>-&gt;</operator><name>data_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"data min/max (%g %g) is invalid\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"data min/max indicates a blank image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fits_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name><init>=<expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr8</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>t8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>t16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>t32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tflt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tdbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>map</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FITSHeader</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FITSContext</name> <modifier>*</modifier></type> <name>fitsctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr8</name> <operator>+</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>metadata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fits_read_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>bitpix</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>naxisn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>header</name><operator>.</operator><name>bitpix</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>naxisn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP16</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported BITPIX = %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>bitpix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>bitpix</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>naxisn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>naxisn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>header</name><operator>.</operator><name>bitpix</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_RGB</name><parameter_list>(<parameter><type><name>cas</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>dref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case cas: for (k = 0; k &lt; header.naxisn[2]; k++) { for (i = 0; i &lt; avctx-&gt;height; i++) { dst = (type *) (p-&gt;data[map[k]] + (avctx-&gt;height - i - 1) * p-&gt;linesize[map[k]]); for (j = 0; j &lt; avctx-&gt;width; j++) { t32 = dref(ptr8); if (!header.blank_found || t32 != header.blank) { t = t32 * header.bscale + header.bzero; } else { t = fitsctx-&gt;blank_val; } *dst++ = (type) t; ptr8 += cas &gt;&gt; 3; } } } break</cpp:value></cpp:define>


















<expr_stmt><expr><call><name>CASE_RGB</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dst8</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_RGB</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>AV_RB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><name><name>header</name><operator>.</operator><name>data_max</name></name> <operator>-</operator> <name><name>header</name><operator>.</operator><name>data_min</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><name>scale</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>bitpix</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_GRAY</name><parameter_list>(<parameter><type><name>cas</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case cas: for (i = 0; i &lt; avctx-&gt;height; i++) { dst = (type *) (p-&gt;data[0] + (avctx-&gt;height-i-1)* p-&gt;linesize[0]); for (j = 0; j &lt; avctx-&gt;width; j++) { t = rd; if (!header.blank_found || t != header.blank) { *dst++ = lrint(((t - header.data_min) * ((1 &lt;&lt; (sizeof(type) * 8)) - 1)) * scale); } else { *dst++ = fitsctx-&gt;blank_val; } ptr8 += abs(cas) &gt;&gt; 3; } } break</cpp:value></cpp:define>















<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>tdbl</name></expr></argument>, <argument><expr><call><name>av_int2double</name><argument_list>(<argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>tflt</name></expr></argument>, <argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dst8</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>, <argument><expr><name><name>ptr8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>t16</name></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>t32</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CASE_GRAY</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>t64</name></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>ptr8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid BITPIX, %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>bitpix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>fits_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"blank_value"</literal></expr>, <expr><literal type="string">"value that is used to replace BLANK pixels in data array"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FITSContext</name></expr></argument>, <argument><expr><name>blank_val</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>fits_decoder_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"FITS decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>fits_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_fits_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fits"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FITS</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FITSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>fits_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Flexible Image Transport System"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fits_decoder_class</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
