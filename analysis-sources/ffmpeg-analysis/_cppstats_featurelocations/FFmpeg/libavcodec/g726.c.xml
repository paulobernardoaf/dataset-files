<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\g726.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>







<typedef>typedef <type><struct>struct <name>Float11</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sign</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mant</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Float11</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Float11</name><modifier>*</modifier></type> <name>i2f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Float11</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>exp</name></name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>!</operator><operator>!</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mant</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr>?</condition><then> <expr><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>exp</name></name></expr> </then><else>: <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>mult</name><parameter_list>(<parameter><decl><type><name>Float11</name><modifier>*</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>Float11</name><modifier>*</modifier></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>f1</name><operator>-&gt;</operator><name>exp</name></name> <operator>+</operator> <name><name>f2</name><operator>-&gt;</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>f1</name><operator>-&gt;</operator><name>mant</name></name> <operator>*</operator> <name><name>f2</name><operator>-&gt;</operator><name>mant</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>exp</name> <operator>&gt;</operator> <literal type="number">19</literal></expr> ?</condition><then> <expr><name>res</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>exp</name> <operator>-</operator> <literal type="number">19</literal><operator>)</operator></expr> </then><else>: <expr><name>res</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">19</literal> <operator>-</operator> <name>exp</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>f1</name><operator>-&gt;</operator><name>sign</name></name> <operator>^</operator> <name><name>f2</name><operator>-&gt;</operator><name>sign</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>res</name></expr> </then><else>: <expr><name>res</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>G726Tables</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>quant</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>iquant</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>W</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>F</name></decl>;</decl_stmt> 
}</block></struct></type> <name>G726Tables</name>;</typedef>

<typedef>typedef <type><struct>struct <name>G726Context</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G726Tables</name></type> <name>tbls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Float11</name></type> <name><name>sr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Float11</name></type> <name><name>dq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>pk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>yu</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>yl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dms</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dml</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>td</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>se</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sez</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>code_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>little_endian</name></decl>;</decl_stmt> 
}</block></struct></type> <name>G726Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>quant_tbl16</name><index>[]</index></name> <init>= 
<expr><block>{ <expr><literal type="number">260</literal></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>iquant_tbl16</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">365</literal></expr>, <expr><literal type="number">365</literal></expr>, <expr><literal type="number">116</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>W_tbl16</name><index>[]</index></name> <init>=
<expr><block>{ <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">439</literal></expr>, <expr><literal type="number">439</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>F_tbl16</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>quant_tbl24</name><index>[]</index></name> <init>= 
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">330</literal></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>iquant_tbl24</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>INT16_MIN</name></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">373</literal></expr>, <expr><literal type="number">373</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><name>INT16_MIN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>W_tbl24</name><index>[]</index></name> <init>=
<expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">582</literal></expr>, <expr><literal type="number">582</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>F_tbl24</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>quant_tbl32</name><index>[]</index></name> <init>= 
<expr><block>{ <expr><operator>-</operator><literal type="number">125</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">299</literal></expr>, <expr><literal type="number">348</literal></expr>, <expr><literal type="number">399</literal></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>iquant_tbl32</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>INT16_MIN</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">323</literal></expr>, <expr><literal type="number">373</literal></expr>, <expr><literal type="number">425</literal></expr>,
<expr><literal type="number">425</literal></expr>, <expr><literal type="number">373</literal></expr>, <expr><literal type="number">323</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>INT16_MIN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>W_tbl32</name><index>[]</index></name> <init>=
<expr><block>{ <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">355</literal></expr>, <expr><literal type="number">1122</literal></expr>,
<expr><literal type="number">1122</literal></expr>, <expr><literal type="number">355</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>F_tbl32</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>quant_tbl40</name><index>[]</index></name> <init>= 
<expr><block>{ <expr><operator>-</operator><literal type="number">122</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">297</literal></expr>, <expr><literal type="number">338</literal></expr>,
<expr><literal type="number">377</literal></expr>, <expr><literal type="number">412</literal></expr>, <expr><literal type="number">444</literal></expr>, <expr><literal type="number">474</literal></expr>, <expr><literal type="number">501</literal></expr>, <expr><literal type="number">527</literal></expr>, <expr><literal type="number">552</literal></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>iquant_tbl40</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>INT16_MIN</name></expr>, <expr><operator>-</operator><literal type="number">66</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">318</literal></expr>,
<expr><literal type="number">358</literal></expr>, <expr><literal type="number">395</literal></expr>, <expr><literal type="number">429</literal></expr>, <expr><literal type="number">459</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">514</literal></expr>, <expr><literal type="number">539</literal></expr>, <expr><literal type="number">566</literal></expr>,
<expr><literal type="number">566</literal></expr>, <expr><literal type="number">539</literal></expr>, <expr><literal type="number">514</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">459</literal></expr>, <expr><literal type="number">429</literal></expr>, <expr><literal type="number">395</literal></expr>, <expr><literal type="number">358</literal></expr>,
<expr><literal type="number">318</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">66</literal></expr>, <expr><name>INT16_MIN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>W_tbl40</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">100</literal></expr>,
<expr><literal type="number">141</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">280</literal></expr>, <expr><literal type="number">358</literal></expr>, <expr><literal type="number">440</literal></expr>, <expr><literal type="number">529</literal></expr>, <expr><literal type="number">696</literal></expr>,
<expr><literal type="number">696</literal></expr>, <expr><literal type="number">529</literal></expr>, <expr><literal type="number">440</literal></expr>, <expr><literal type="number">358</literal></expr>, <expr><literal type="number">280</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">141</literal></expr>,
<expr><literal type="number">100</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>F_tbl40</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>G726Tables</name></type> <name><name>G726Tables_pool</name><index>[]</index></name> <init>=
<expr><block>{<expr><block>{ <expr><name>quant_tbl16</name></expr>, <expr><name>iquant_tbl16</name></expr>, <expr><name>W_tbl16</name></expr>, <expr><name>F_tbl16</name></expr> }</block></expr>,
<expr><block>{ <expr><name>quant_tbl24</name></expr>, <expr><name>iquant_tbl24</name></expr>, <expr><name>W_tbl24</name></expr>, <expr><name>F_tbl24</name></expr> }</block></expr>,
<expr><block>{ <expr><name>quant_tbl32</name></expr>, <expr><name>iquant_tbl32</name></expr>, <expr><name>W_tbl32</name></expr>, <expr><name>F_tbl32</name></expr> }</block></expr>,
<expr><block>{ <expr><name>quant_tbl40</name></expr>, <expr><name>iquant_tbl40</name></expr>, <expr><name>W_tbl40</name></expr>, <expr><name>F_tbl40</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>quant</name><parameter_list>(<parameter><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>dln</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dln</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>exp</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><name>exp</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>y</name></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>quant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>quant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>dln</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>~</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>inverse_quant</name><parameter_list>(<parameter><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dql</name></decl>, <decl><type ref="prev"/><name>dex</name></decl>, <decl><type ref="prev"/><name>dqt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dql</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>iquant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dex</name> <operator>=</operator> <operator>(</operator><name>dql</name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>dqt</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>dql</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><ternary><condition><expr><operator>(</operator><name>dql</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>dqt</name><operator>&lt;&lt;</operator><name>dex</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>g726_decode</name><parameter_list>(<parameter><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>I</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dq</name></decl>, <decl><type ref="prev"/><name>re_signal</name></decl>, <decl><type ref="prev"/><name>pk0</name></decl>, <decl><type ref="prev"/><name>fa1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tr</name></decl>, <decl><type ref="prev"/><name>ylint</name></decl>, <decl><type ref="prev"/><name>ylfrac</name></decl>, <decl><type ref="prev"/><name>thr2</name></decl>, <decl><type ref="prev"/><name>al</name></decl>, <decl><type ref="prev"/><name>dq0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Float11</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>I_sig</name><init>= <expr><name>I</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dq</name> <operator>=</operator> <call><name>inverse_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ylint</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yl</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ylfrac</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yl</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thr2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ylint</name> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x1f</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">0x20</literal> <operator>+</operator> <name>ylfrac</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>ylint</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>tr</name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>td</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dq</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>thr2</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>I_sig</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>dq</name> <operator>=</operator> <operator>-</operator><name>dq</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>re_signal</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>+</operator> <name>dq</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>pk0</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sez</name></name> <operator>+</operator> <name>dq</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>sgn</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sez</name></name> <operator>+</operator> <name>dq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dq0</name> <operator>=</operator> <ternary><condition><expr><name>dq</name></expr> ?</condition><then> <expr><call><name>sgn</name><argument_list>(<argument><expr><name>dq</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fa1</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>pk0</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">128</literal><operator>*</operator><name>pk0</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>fa1</name> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12288</literal></expr></argument>, <argument><expr><literal type="number">12288</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">64</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>pk0</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><literal type="number">15360</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15360</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">128</literal><operator>*</operator><name>dq0</name><operator>*</operator><call><name>sgn</name><argument_list>(<argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>pk0</name></expr> ?</condition><then> <expr><name>pk0</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>i2f</name><argument_list>(<argument><expr><name>re_signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>i2f</name><argument_list>(<argument><expr><name>dq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <name>I_sig</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>td</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">11776</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dms</name></name> <operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>F</name><index>[<expr><name>I</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>dms</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dml</name></name> <operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>F</name><index>[<expr><name>I</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>dml</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ap</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ap</name></name> <operator>+=</operator> <operator>(</operator><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>ap</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">1535</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>td</name></name> <operator>||</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dms</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>dml</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dml</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ap</name></name> <operator>+=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yu</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>tbls</name><operator>.</operator><name>W</name><index>[<expr><name>I</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">544</literal></expr></argument>, <argument><expr><literal type="number">5120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yl</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>yu</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>yl</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>al</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ap</name></name> <operator>&gt;=</operator> <literal type="number">256</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>ap</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yl</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yu</name></name> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yl</name></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>al</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>+=</operator> <call><name>mult</name><argument_list>(<argument><expr><call><name>i2f</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sez</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>+=</operator> <call><name>mult</name><argument_list>(<argument><expr><call><name>i2f</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>se</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>re_signal</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g726_reset</name><parameter_list>(<parameter><decl><type><name>G726Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tbls</name></name> <operator>=</operator> <name><name>G726Tables_pool</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yu</name></name> <operator>=</operator> <literal type="number">544</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yl</name></name> <operator>=</operator> <literal type="number">34816</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">544</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726_ENCODER</name> <operator>||</operator> <name>CONFIG_ADPCM_G726LE_ENCODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>g726_encode</name><parameter_list>(<parameter><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><call><name>quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>se</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g726_decode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g726_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>little_endian</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"g726le"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample rates other than 8kHz are not "</literal>
<literal type="string">"allowed when the compliance level is higher than unofficial. "</literal>
<literal type="string">"Resample or reduce the compliance level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample rate %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only mono is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g726_reset</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">2736</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1640</literal></expr> }</block><operator>)</operator><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g726_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G726Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>out_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>little_endian</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>, <argument><expr><call><name>g726_encode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>, <argument><expr><call><name>g726_encode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>little_endian</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flush_put_bits_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(G726Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"code_size"</literal></expr>, <expr><literal type="string">"Bits per code"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>code_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr> }</block></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>g726_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"g726"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g726_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g726"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.726 ADPCM"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G726</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G726Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g726_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>g726_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>g726_class</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726LE_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>g726le_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"g726le"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g726le_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g726le"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.726 little endian ADPCM (\"right-justified\")"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G726LE</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G726Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g726_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>g726_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>g726le_class</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726_DECODER</name> <operator>||</operator> <name>CONFIG_ADPCM_G726LE_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g726_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G726Context</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Decoding more than one channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>little_endian</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"g726le"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>code_size</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of bits %d\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>g726_reset</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g726_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>G726Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_samples</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>out_samples</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>out_samples</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>g726_decode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>little_endian</name></name></expr> ?</condition><then>
<expr><call><name>get_bits_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame invalidly split, missing parser?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>g726_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>G726Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g726_reset</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g726_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g726"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.726 ADPCM"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G726</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G726Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g726_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>g726_decode_frame</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>g726_decode_flush</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ADPCM_G726LE_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g726le_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g726le"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G726LE</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G726Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g726_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>g726_decode_frame</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>g726_decode_flush</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.726 ADPCM little-endian"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
