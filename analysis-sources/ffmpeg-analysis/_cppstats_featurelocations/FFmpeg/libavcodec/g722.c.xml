<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\g722.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g722.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>sign_lookup</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>inv_log2_table</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2093</literal></expr>, <expr><literal type="number">2139</literal></expr>, <expr><literal type="number">2186</literal></expr>, <expr><literal type="number">2233</literal></expr>, <expr><literal type="number">2282</literal></expr>, <expr><literal type="number">2332</literal></expr>, <expr><literal type="number">2383</literal></expr>,
<expr><literal type="number">2435</literal></expr>, <expr><literal type="number">2489</literal></expr>, <expr><literal type="number">2543</literal></expr>, <expr><literal type="number">2599</literal></expr>, <expr><literal type="number">2656</literal></expr>, <expr><literal type="number">2714</literal></expr>, <expr><literal type="number">2774</literal></expr>, <expr><literal type="number">2834</literal></expr>,
<expr><literal type="number">2896</literal></expr>, <expr><literal type="number">2960</literal></expr>, <expr><literal type="number">3025</literal></expr>, <expr><literal type="number">3091</literal></expr>, <expr><literal type="number">3158</literal></expr>, <expr><literal type="number">3228</literal></expr>, <expr><literal type="number">3298</literal></expr>, <expr><literal type="number">3371</literal></expr>,
<expr><literal type="number">3444</literal></expr>, <expr><literal type="number">3520</literal></expr>, <expr><literal type="number">3597</literal></expr>, <expr><literal type="number">3676</literal></expr>, <expr><literal type="number">3756</literal></expr>, <expr><literal type="number">3838</literal></expr>, <expr><literal type="number">3922</literal></expr>, <expr><literal type="number">4008</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>high_log_factor_step</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">798</literal></expr>, <expr><operator>-</operator><literal type="number">214</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_g722_high_inv_quant</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">926</literal></expr>, <expr><operator>-</operator><literal type="number">202</literal></expr>, <expr><literal type="number">926</literal></expr>, <expr><literal type="number">202</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>low_log_factor_step</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">60</literal></expr>, <expr><literal type="number">3042</literal></expr>, <expr><literal type="number">1198</literal></expr>, <expr><literal type="number">538</literal></expr>, <expr><literal type="number">334</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><operator>-</operator><literal type="number">30</literal></expr>,
<expr><literal type="number">3042</literal></expr>, <expr><literal type="number">1198</literal></expr>, <expr><literal type="number">538</literal></expr>, <expr><literal type="number">334</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_g722_low_inv_quant4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2557</literal></expr>, <expr><operator>-</operator><literal type="number">1612</literal></expr>, <expr><operator>-</operator><literal type="number">1121</literal></expr>, <expr><operator>-</operator><literal type="number">786</literal></expr>, <expr><operator>-</operator><literal type="number">530</literal></expr>, <expr><operator>-</operator><literal type="number">323</literal></expr>, <expr><operator>-</operator><literal type="number">150</literal></expr>,
<expr><literal type="number">2557</literal></expr>, <expr><literal type="number">1612</literal></expr>, <expr><literal type="number">1121</literal></expr>, <expr><literal type="number">786</literal></expr>, <expr><literal type="number">530</literal></expr>, <expr><literal type="number">323</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_g722_low_inv_quant6</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">3101</literal></expr>, <expr><operator>-</operator><literal type="number">2738</literal></expr>, <expr><operator>-</operator><literal type="number">2376</literal></expr>, <expr><operator>-</operator><literal type="number">2088</literal></expr>,
<expr><operator>-</operator><literal type="number">1873</literal></expr>, <expr><operator>-</operator><literal type="number">1689</literal></expr>, <expr><operator>-</operator><literal type="number">1535</literal></expr>, <expr><operator>-</operator><literal type="number">1399</literal></expr>, <expr><operator>-</operator><literal type="number">1279</literal></expr>, <expr><operator>-</operator><literal type="number">1170</literal></expr>, <expr><operator>-</operator><literal type="number">1072</literal></expr>, <expr><operator>-</operator><literal type="number">982</literal></expr>,
<expr><operator>-</operator><literal type="number">899</literal></expr>, <expr><operator>-</operator><literal type="number">822</literal></expr>, <expr><operator>-</operator><literal type="number">750</literal></expr>, <expr><operator>-</operator><literal type="number">682</literal></expr>, <expr><operator>-</operator><literal type="number">618</literal></expr>, <expr><operator>-</operator><literal type="number">558</literal></expr>, <expr><operator>-</operator><literal type="number">501</literal></expr>, <expr><operator>-</operator><literal type="number">447</literal></expr>,
<expr><operator>-</operator><literal type="number">396</literal></expr>, <expr><operator>-</operator><literal type="number">347</literal></expr>, <expr><operator>-</operator><literal type="number">300</literal></expr>, <expr><operator>-</operator><literal type="number">254</literal></expr>, <expr><operator>-</operator><literal type="number">211</literal></expr>, <expr><operator>-</operator><literal type="number">170</literal></expr>, <expr><operator>-</operator><literal type="number">130</literal></expr>, <expr><operator>-</operator><literal type="number">91</literal></expr>,
<expr><literal type="number">3101</literal></expr>, <expr><literal type="number">2738</literal></expr>, <expr><literal type="number">2376</literal></expr>, <expr><literal type="number">2088</literal></expr>, <expr><literal type="number">1873</literal></expr>, <expr><literal type="number">1689</literal></expr>, <expr><literal type="number">1535</literal></expr>, <expr><literal type="number">1399</literal></expr>,
<expr><literal type="number">1279</literal></expr>, <expr><literal type="number">1170</literal></expr>, <expr><literal type="number">1072</literal></expr>, <expr><literal type="number">982</literal></expr>, <expr><literal type="number">899</literal></expr>, <expr><literal type="number">822</literal></expr>, <expr><literal type="number">750</literal></expr>, <expr><literal type="number">682</literal></expr>,
<expr><literal type="number">618</literal></expr>, <expr><literal type="number">558</literal></expr>, <expr><literal type="number">501</literal></expr>, <expr><literal type="number">447</literal></expr>, <expr><literal type="number">396</literal></expr>, <expr><literal type="number">347</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">254</literal></expr>,
<expr><literal type="number">211</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>s_zero</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_diff</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>G722Band</name></name> <modifier>*</modifier></type><name>band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCUM</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int tmp = x; band-&gt;zero_mem[k] = ((band-&gt;zero_mem[k] * 255) &gt;&gt; 8) + d*((band-&gt;diff_mem[k]^cur_diff) &lt; 0 ? -128 : 128); band-&gt;diff_mem[k] = tmp; s_zero += (tmp * band-&gt;zero_mem[k]) &gt;&gt; 15; } while (0)</cpp:value></cpp:define>






<if_stmt><if>if <condition>(<expr><name>cur_diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cur_diff</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>diff_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACCUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cur_diff</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCUM</name></cpp:undef>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>s_zero</name></name> <operator>=</operator> <name>s_zero</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>do_adaptive_prediction</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>G722Band</name></name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>sg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>cur_qtzd_reconst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_part_reconst</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>s_zero</name></name> <operator>+</operator> <name>cur_diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sign_lookup</name><index>[<expr><name>cur_part_reconst</name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>part_reconst_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sign_lookup</name><index>[<expr><name>cur_part_reconst</name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>part_reconst_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>part_reconst_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>part_reconst_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>part_reconst_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cur_part_reconst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>sg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8191</literal></expr></argument>, <argument><expr><literal type="number">8191</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>sg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">127</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12288</literal></expr></argument>, <argument><expr><literal type="number">12288</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">15360</literal> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">192</literal> <operator>*</operator> <name><name>sg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><name>limit</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s_zero</name><argument_list>(<argument><expr><name>cur_diff</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_qtzd_reconst</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>s_predictor</name></name> <operator>+</operator> <name>cur_diff</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>s_predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>s_zero</name></name> <operator>+</operator>
<operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>cur_qtzd_reconst</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>pole_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>prev_qtzd_reconst</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>prev_qtzd_reconst</name></name> <operator>=</operator> <name>cur_qtzd_reconst</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>linear_scale_factor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>log_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wd1</name> <init>= <expr><name><name>inv_log2_table</name><index>[<expr><operator>(</operator><name>log_factor</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><name>log_factor</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>shift</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>?</operator> <name>wd1</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <operator>-</operator><name>shift</name> <operator>:</operator> <name>wd1</name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g722_update_low_predictor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>G722Band</name></name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ilow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_adaptive_prediction</name><argument_list>(<argument><expr><name>band</name></expr></argument>,
<argument><expr><name><name>band</name><operator>-&gt;</operator><name>scale_factor</name></name> <operator>*</operator> <name><name>ff_g722_low_inv_quant4</name><index>[<expr><name>ilow</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>*</operator> <literal type="number">127</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator>
<name><name>low_log_factor_step</name><index>[<expr><name>ilow</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">18432</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scale_factor</name></name> <operator>=</operator> <call><name>linear_scale_factor</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g722_update_high_predictor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>G722Band</name></name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dhigh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ihigh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_adaptive_prediction</name><argument_list>(<argument><expr><name>band</name></expr></argument>, <argument><expr><name>dhigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>*</operator> <literal type="number">127</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator>
<name><name>high_log_factor_step</name><index>[<expr><name>ihigh</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">22528</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scale_factor</name></name> <operator>=</operator> <call><name>linear_scale_factor</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>log_factor</name></name> <operator>-</operator> <operator>(</operator><literal type="number">10</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
