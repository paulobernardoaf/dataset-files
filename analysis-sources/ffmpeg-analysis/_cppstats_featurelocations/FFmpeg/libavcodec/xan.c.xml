<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\xan.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNTIME_GAMMA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VGA__TAG</name></cpp:macro> <cpp:value>MKTAG('V', 'G', 'A', ' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALT_TAG</name></cpp:macro> <cpp:value>MKTAG('P', 'A', 'L', 'T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOT_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'H', 'O', 'T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALETTE_COUNT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALETTE_SIZE</name></cpp:macro> <cpp:value>(PALETTE_COUNT * 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALETTES_MAX</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>XanContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer1_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer2_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>palettes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>palettes_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>XanContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xan_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>palettes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xan_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer1_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer2_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer2</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer2_size</name></name> <operator>+</operator> <literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xan_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_huffman_decode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ival</name> <init>= <expr><name>byte</name> <operator>+</operator> <literal type="number">0x16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>src</name> <operator>+</operator> <name>byte</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr_len</name> <init>= <expr><name>src_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>byte</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name> <init>= <expr><name>ival</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_end</name> <init>= <expr><name>dest</name> <operator>+</operator> <name>dest_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_start</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0x16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>val</name> <operator>-</operator> <literal type="number">0x17</literal> <operator>+</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>byte</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>byte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0x16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;=</operator> <name>dest_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dest_len</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ival</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>dest</name> <operator>-</operator> <name>dest_start</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>xan_unpack</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_org</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_end</name> <init>= <expr><name>dest</name> <operator>+</operator> <name>dest_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>dest</name> <operator>&lt;</operator> <name>dest_end</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>, <decl><type ref="prev"/><name>back</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_end</name> <operator>-</operator> <name>dest</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>size2</name> <operator>||</operator>
<name>dest</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>dest_org</name> <operator>&lt;</operator> <name>back</name> <operator>||</operator>
<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>back</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><name>opcode</name> <operator>&gt;=</operator> <literal type="number">0xfc</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>finish</name></expr> ?</condition><then> <expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_end</name> <operator>-</operator> <name>dest</name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>finish</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>xan_wc3_output_pixel_run</name><parameter_list>(<parameter><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>palette_plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>palette_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_inc</name> <operator>=</operator> <name>stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pixel_count</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>pixel_count</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>current_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>palette_plane</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>pixel_buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_count</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_buffer</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_x</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_x</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>line_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>xan_wc3_copy_pixel_run</name><parameter_list>(<parameter><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curframe_index</name></decl>, <decl><type ref="prev"/><name>prevframe_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curframe_x</name></decl>, <decl><type ref="prev"/><name>prevframe_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>palette_plane</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_palette_plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>motion_y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>+</operator> <name>motion_y</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<name>x</name> <operator>+</operator> <name>motion_x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>+</operator> <name>motion_x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>palette_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_palette_plane</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev_palette_plane</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_palette_plane</name> <operator>=</operator> <name>palette_plane</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_inc</name> <operator>=</operator> <name>stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curframe_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curframe_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevframe_index</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>motion_y</name><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>motion_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevframe_x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>motion_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_palette_plane</name> <operator>==</operator> <name>palette_plane</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>motion_x</name> <operator>+</operator> <name>width</name><operator>*</operator><name>motion_y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>pixel_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Overlapping copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return ;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>pixel_count</name> <operator>&amp;&amp;</operator>
<name>curframe_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&amp;&amp;</operator>
<name>prevframe_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>FFMIN3</name><argument_list>(<argument><expr><name>pixel_count</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>curframe_x</name></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <name>prevframe_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>palette_plane</name> <operator>+</operator> <name>curframe_index</name></expr></argument>,
<argument><expr><name>prev_palette_plane</name> <operator>+</operator> <name>prevframe_index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_count</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curframe_index</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevframe_index</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curframe_x</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevframe_x</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curframe_x</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curframe_index</name> <operator>+=</operator> <name>line_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curframe_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prevframe_x</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevframe_index</name> <operator>+=</operator> <name>line_inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevframe_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_wc3_decode_frame</name><parameter_list>(<parameter><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_pixels</name> <init>= <expr><name>width</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>motion_x</name></decl>, <decl><type ref="prev"/><name>motion_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>opcode_buffer</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>opcode_buffer_end</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer1</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer1_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opcode_buffer_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer1_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>imagedata_buffer</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer2</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>huffman_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>size_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>vector_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>imagedata_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>huffman_offset</name></decl>, <decl><type ref="prev"/><name>size_offset</name></decl>, <decl><type ref="prev"/><name>vector_offset</name></decl>, <decl><type ref="prev"/><name>imagedata_offset</name></decl>,
<decl><type ref="prev"/><name>imagedata_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>huffman_offset</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_offset</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vector_offset</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_offset</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>huffman_offset</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>size_offset</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>vector_offset</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>imagedata_offset</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>huffman_segment</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>huffman_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>size_offset</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vector_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>vector_offset</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>vector_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_segment</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>imagedata_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xan_huffman_decode</name><argument_list>(<argument><expr><name>opcode_buffer</name></expr></argument>, <argument><expr><name>opcode_buffer_size</name></expr></argument>,
<argument><expr><name>huffman_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>huffman_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>opcode_buffer_end</name> <operator>=</operator> <name>opcode_buffer</name> <operator>+</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>imagedata_segment</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xan_unpack</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer2_size</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>imagedata_segment</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>imagedata_offset</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer2_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>imagedata_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>imagedata_offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>imagedata_segment</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>total_pixels</name> <operator>&amp;&amp;</operator> <name>opcode_buffer</name> <operator>&lt;</operator> <name>opcode_buffer_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <operator>*</operator><name>opcode_buffer</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>flag</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><name>opcode</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"size_segment overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"size_segment overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"size_segment overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>total_pixels</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xan_wc3_copy_pixel_run</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>imagedata_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xan_wc3_output_pixel_run</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>imagedata_buffer</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_buffer</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>imagedata_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vector</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vector_segment</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vector_segment overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vector</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vector_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>vector</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>vector</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xan_wc3_copy_pixel_run</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>total_pixels</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>%</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUNTIME_GAMMA</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>pow4</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>square</name> <init>= <expr><call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>square</name></expr></argument>, <argument><expr><name>square</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>pow5</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mul</name><argument_list>(<argument><expr><call><name>pow4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>gamma_corr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><literal type="number">0xff40</literal></expr></init></decl>, <decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>





<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>target</name> <operator>=</operator> <name>in</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pow</name> <init>= <expr><call><name>pow5</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pow</name> <operator>&gt;</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<return>return <expr><operator>(</operator><call><name>pow4</name><argument_list>(<argument><expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>











<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>gamma_lookup</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x2C</literal></expr>,
<expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x71</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8F</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAC</literal></expr>,
<expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC8</literal></expr>,
<expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE3</literal></expr>,
<expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x90</literal></expr>,
<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAD</literal></expr>,
<expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
<expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE4</literal></expr>,
<expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2E</literal></expr>,
<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x52</literal></expr>,
<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x91</literal></expr>,
<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAE</literal></expr>,
<expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xCA</literal></expr>,
<expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE4</literal></expr>,
<expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFD</literal></expr>,
<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,
<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAF</literal></expr>,
<expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xCB</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xan_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name>VGA__TAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>tmpptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_pal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tag size %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PALT_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>PALETTE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name> <operator>&gt;=</operator> <name>PALETTES_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palettes</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palettes</name></name> <operator>=</operator> <name>tmpptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name> <operator>*</operator> <name>AVPALETTE_COUNT</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUNTIME_GAMMA</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>gamma_corr</name><argument_list>(<argument><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>gamma_corr</name><argument_list>(<argument><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>gamma_corr</name><argument_list>(<argument><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>gamma_lookup</name><index>[<expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>gamma_lookup</name><index>[<expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>gamma_lookup</name><index>[<expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>tmpptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SHOT_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_pal</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_pal</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_palette</name></name> <operator>=</operator> <name>new_pal</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid palette selected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VGA__TAG</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>palettes_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No palette found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palettes</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_palette</name></name> <operator>*</operator> <name>AVPALETTE_COUNT</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xan_wc3_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_xan_wc3_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xan_wc3"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Wing Commander III / Xan"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_XAN_WC3</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XanContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xan_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>xan_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>xan_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
