<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\imm5.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>IMM5Context</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>h264_avctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>hevc_avctx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IMM5Context</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>IMM5_unit</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name><name>IMM5_units</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xE2</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xC8</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xF2</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x28</literal></expr> }</block></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>imm5_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMM5Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_codec_open2_recursive</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_codec_open2_recursive</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imm5_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMM5Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec_avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">24ULL</literal> <operator>&lt;=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>codec_type</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <literal type="number">0xA</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_avctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_make_writable</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>offset</name> <operator>=</operator> <name><name>IMM5_units</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>IMM5_units</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>IMM5_units</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <literal type="number">24</literal> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><name><name>IMM5_units</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name>codec_avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error submitting a packet for decoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name>codec_avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name><name>codec_avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imm5_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMM5Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>imm5_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMM5Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>h264_avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hevc_avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_imm5_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"imm5"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Infinity IMM5"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_IMM5</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>imm5_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>imm5_decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>imm5_close</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>imm5_flush</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IMM5Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>
<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
