<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tak_parser.c">

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tak.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TAKParseContext</name> <block>{
<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TAKStreamInfo</name></type> <name>ti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
}</block></struct></type> <name>TAKParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tak_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TAKParseContext</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>END_NOT_FOUND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name> <init>= <expr><ternary><condition><expr><name>buf_size</name></expr> ?</condition><then> <expr><name>TAK_MAX_FRAME_HEADER_BYTES</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TAKStreamInfo</name></type> <name>ti</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_tak_decode_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ti</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>last_frame_samples</name></name></expr> ?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>last_frame_samples</name></name></expr>
</then><else>: <expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>frame_samples</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>buf_size</name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>needed</name> <operator>&lt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>TAK_MAX_FRAME_HEADER_BYTES</name> <operator>&gt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_buf_size</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>TAK_MAX_FRAME_HEADER_BYTES</name></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tmp_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>END_NOT_FOUND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_buf_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>tmp_buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>tmp_buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>tmp_buf_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>needed</name> <operator>&lt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</condition> <incr><expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[ <expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name></expr> ]</index></name> <operator>==</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator>
<name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[ <expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0xA0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TAKStreamInfo</name></type> <name>ti</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_tak_decode_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ti</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>ti</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ff_tak_check_crc</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>last_frame_samples</name></name></expr> ?</condition><then>
<expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>last_frame_samples</name></name></expr> </then><else>:
<expr><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>frame_samples</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>ti</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TAK_FRAME_FLAG_HAS_INFO</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<label><name>found</name>:</label>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>buf_size</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <name>END_NOT_FOUND</name> <operator>||</operator>
<call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>END_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <name>consumed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<return>return <expr><name>next</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name> <operator>+</operator> <name>consumed</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_tak_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_TAK</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TAKParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>tak_parse</name></expr>,
<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
