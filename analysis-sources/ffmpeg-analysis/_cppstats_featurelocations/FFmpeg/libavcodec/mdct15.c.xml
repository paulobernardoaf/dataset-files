<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mdct15.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdct15.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL3</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CMUL((c).re, (c).im, (a).re, (a).im, (b).re, (b).im)</cpp:value></cpp:define>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mdct15_uninit</name><parameter_list>(<parameter><decl><type><name>MDCT15Context</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><name>ps</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>init_pfa_reindex_tabs</name><parameter_list>(<parameter><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_ptwo</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_ptwo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>b_ptwo</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inv_1</name> <init>= <expr><name>l_ptwo</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>b_ptwo</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inv_2</name> <init>= <expr><literal type="number">0xeeeeeeef</literal> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>b_ptwo</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">15</literal> <operator>*</operator> <name>l_ptwo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">15</literal> <operator>*</operator> <name>l_ptwo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l_ptwo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q_pre</name> <init>= <expr><operator>(</operator><operator>(</operator><name>l_ptwo</name> <operator>*</operator> <name>j</name><operator>)</operator><operator>/</operator><literal type="number">15</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>b_ptwo</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q_post</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>j</name><operator>*</operator><name>inv_1</name><operator>)</operator><operator>/</operator><literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name><operator>*</operator><name>inv_2</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>b_ptwo</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_pre</name> <init>= <expr><literal type="number">15</literal><operator>*</operator><name>i</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>-</operator> <name>q_pre</name><operator>*</operator><literal type="number">15</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>b_ptwo</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_post</name> <init>= <expr><name>i</name><operator>*</operator><name>inv_2</name><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <name>j</name><operator>*</operator><name>inv_1</name> <operator>-</operator> <literal type="number">15</literal><operator>*</operator><name>q_post</name><operator>*</operator><name>l_ptwo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>k_pre</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name><index>[<expr><name>k_post</name></expr>]</index></name> <operator>=</operator> <name>l_ptwo</name><operator>*</operator><name>j</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fft5</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name></type> <name><name>exptab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>z0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>exptab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>z0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft15_c</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>exptab</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fft5</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>exptab</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft5</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>exptab</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft5</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>exptab</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp3</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp3</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp3</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exptab</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>stride</name><operator>*</operator><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mdct15</name><parameter_list>(<parameter><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len4</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len4</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len3</name> <init>= <expr><name>len4</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>len8</name> <init>= <expr><name>len4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_ptwo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>fft15in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l_ptwo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>len4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>re</name></name> <operator>=</operator> <operator>-</operator><name><name>src</name><index>[ <expr><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len4</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>im</name></name> <operator>=</operator> <operator>-</operator><name><name>src</name><index>[ <expr><name>len3</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len3</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>re</name></name> <operator>=</operator> <operator>-</operator><name><name>src</name><index>[ <expr><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>len4</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len3</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>fft15in</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>fft15in</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>im</name></name></expr></argument>, <argument><expr><name><name>exp</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>exp</name><operator>.</operator><name>im</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft15</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fft15in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name></expr></argument>, <argument><expr><name>l_ptwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>+</operator> <name>l_ptwo</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len8</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i0</name> <init>= <expr><name>len8</name> <operator>+</operator> <name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name>len8</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name><index>[<expr><name>i1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i1</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i0</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>s0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>s0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i0</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i1</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>s1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>s1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct15_half</name><parameter_list>(<parameter><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>fft15in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len8</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len4</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l_ptwo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in1</name> <init>= <expr><name>src</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in2</name> <init>= <expr><name>src</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len2</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l_ptwo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pfa_prereindex</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><name><name>in2</name><index>[<expr><operator>-</operator><name>k</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>, <expr><name><name>in1</name><index>[<expr><name>k</name><operator>*</operator><name>stride</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>fft15in</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft15</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fft15in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name></expr></argument>, <argument><expr><name>l_ptwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>+</operator> <name>l_ptwo</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>postreindex</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pfa_postreindex</name></name></expr></argument>, <argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postrotate_c</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len8</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i0</name> <init>= <expr><name>len8</name> <operator>+</operator> <name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name>len8</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s0</name> <init>= <expr><name><name>lut</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><name><name>lut</name><index>[<expr><name>i1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>s1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>s1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>s0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>s0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mdct15_init</name><parameter_list>(<parameter><decl><type><name>MDCT15Context</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><literal type="number">15</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>N</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>len2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>N</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>N</name> <operator>&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_n</name></name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len4</name></name> <operator>=</operator> <name>len2</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len2</name></name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name> <operator>=</operator> <name>inverse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft15</name></name> <operator>=</operator> <name>fft15_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct</name></name> <operator>=</operator> <name>mdct15</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_half</name></name> <operator>=</operator> <name>imdct15_half</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>postreindex</name></name> <operator>=</operator> <name>postrotate_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptwo_fft</name></name></expr></argument>, <argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_pfa_reindex_tabs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">0.125f</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>len4</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len4</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>theta</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>twiddle_exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">15.0f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>theta</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">19</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">5.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">19</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">5.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">5.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">5.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">19</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mdct15_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
