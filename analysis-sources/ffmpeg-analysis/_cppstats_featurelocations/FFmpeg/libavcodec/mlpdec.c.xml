<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mlpdec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp_parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlpdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>SubStream</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>restart_seen</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint16_t</name></type> <name>noise_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>min_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_matrix_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ch_assign</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ChannelParams</name></type> <name><name>channel_params</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>noise_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>noisegen_seed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>data_check_present</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>param_presence_flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_BLOCKSIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_MATRIX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_OUTSHIFT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_QUANTSTEP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_FIR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_IIR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_HUFFOFFSET</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_PRESENCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_primitive_matrices</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>matrix_out_ch</name><index>[<expr><name>MAX_MATRICES</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lsb_bypass</name><index>[<expr><name>MAX_MATRICES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>matrix_coeff</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_MATRICES</name></expr>]</index><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>matrix_noise_shift</name><index>[<expr><name>MAX_MATRICES</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>quant_step_size</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>blockpos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int8_t</name></type> <name><name>output_shift</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>lossless_check_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>SubStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MLPDecodeContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_major_sync_unit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>major_sync_header_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>params_valid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_substreams</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_decoded_substream</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>needs_reordering</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>access_unit_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>access_unit_size_pow2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SubStream</name></type> <name><name>substream</name><index>[<expr><name>MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matrix_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>filter_changed</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>NUM_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>noise_buffer</name><index>[<expr><name>MAX_BLOCKSIZE_POW2</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>bypassed_lsbs</name><index>[<expr><name>MAX_BLOCKSIZE</name></expr>]</index><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_BLOCKSIZE</name></expr>]</index><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MLPDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
}</block></struct></type> <name>MLPDecodeContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>thd_channel_order</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CH_FRONT_LEFT</name></expr>, <expr><name>AV_CH_FRONT_RIGHT</name></expr>, 
<expr><name>AV_CH_FRONT_CENTER</name></expr>, 
<expr><name>AV_CH_LOW_FREQUENCY</name></expr>, 
<expr><name>AV_CH_SIDE_LEFT</name></expr>, <expr><name>AV_CH_SIDE_RIGHT</name></expr>, 
<expr><name>AV_CH_TOP_FRONT_LEFT</name></expr>, <expr><name>AV_CH_TOP_FRONT_RIGHT</name></expr>, 
<expr><name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>, <expr><name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>, 
<expr><name>AV_CH_BACK_LEFT</name></expr>, <expr><name>AV_CH_BACK_RIGHT</name></expr>, 
<expr><name>AV_CH_BACK_CENTER</name></expr>, 
<expr><name>AV_CH_TOP_CENTER</name></expr>, 
<expr><name>AV_CH_SURROUND_DIRECT_LEFT</name></expr>, <expr><name>AV_CH_SURROUND_DIRECT_RIGHT</name></expr>, 
<expr><name>AV_CH_WIDE_LEFT</name></expr>, <expr><name>AV_CH_WIDE_RIGHT</name></expr>, 
<expr><name>AV_CH_TOP_FRONT_CENTER</name></expr>, 
<expr><name>AV_CH_LOW_FREQUENCY_2</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mlp_channel_layout_subset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>channel_layout</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>channel_layout</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>channel_layout</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>thd_channel_layout_extract_channel</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>thd_channel_order</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name><name>thd_channel_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>index</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>thd_channel_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>huff_vlc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_static</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>huff_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huff_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_STATIC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huff_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_STATIC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huff_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_STATIC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mlp_init_crc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>calculate_sign_huff</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChannelParams</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsb_bits</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign_shift</name> <init>= <expr><name>lsb_bits</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>-</operator> <name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sign_huff_offset</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>huff_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign_huff_offset</name> <operator>-=</operator> <literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>lsb_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign_shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign_huff_offset</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sign_shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sign_huff_offset</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>read_huff_channels</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mat</name></decl>, <decl><type ref="prev"/><name>channel</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mat</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name></expr>;</condition> <incr><expr><name>mat</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsb_bypass</name><index>[<expr><name>mat</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>bypassed_lsbs</name><index>[<expr><name>pos</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>]</index><index>[<expr><name>mat</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_channel</name></name></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ChannelParams</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codebook</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant_step_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsb_bits</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>-</operator> <name>quant_step_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codebook</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><name><name>huff_vlc</name><index>[<expr><name>codebook</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <name>VLC_BITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lsb_bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <name>lsb_bits</name><operator>)</operator> <operator>+</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>lsb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>cp</name><operator>-&gt;</operator><name>sign_huff_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>quant_step_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name><index>[<expr><name>pos</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>]</index><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mlp_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>substr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_static</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>substr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>substr</name> <operator>&lt;</operator> <name>MAX_SUBSTREAMS</name></expr>;</condition> <incr><expr><name>substr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>lossless_check_data</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_mlpdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>read_major_sync</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MLPHeaderInfo</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>substr</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mlp_read_major_sync</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mh</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group1_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid/unknown bits per sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group2_bits</name></name> <operator>&gt;</operator> <name><name>mh</name><operator>.</operator><name>group1_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Channel group 2 cannot have more bits per sample than group 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group2_samplerate</name></name> <operator>&amp;&amp;</operator> <name><name>mh</name><operator>.</operator><name>group2_samplerate</name></name> <operator>!=</operator> <name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Channel groups with differing sample rates are not currently supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid/unknown sampling rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name> <operator>&gt;</operator> <name>MAX_SAMPLERATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sampling rate %d is greater than the supported maximum (%d).\n"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name></expr></argument>, <argument><expr><name>MAX_SAMPLERATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>access_unit_size</name></name> <operator>&gt;</operator> <name>MAX_BLOCKSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Block size %d is greater than the supported maximum (%d).\n"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>access_unit_size</name></name></expr></argument>, <argument><expr><name>MAX_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>access_unit_size_pow2</name></name> <operator>&gt;</operator> <name>MAX_BLOCKSIZE_POW2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Block size pow2 %d is greater than the supported maximum (%d).\n"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>access_unit_size_pow2</name></name></expr></argument>, <argument><expr><name>MAX_BLOCKSIZE_POW2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name> <operator>&amp;&amp;</operator> <name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLP only supports up to 2 substreams.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <name>MAX_SUBSTREAMS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"%d substreams (more than the "</literal>
<literal type="string">"maximum supported by the decoder)"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>major_sync_header_size</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>access_unit_size</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>access_unit_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>access_unit_size_pow2</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>access_unit_size_pow2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_substreams</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>num_substreams</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>num_substreams</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>group1_samplerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>access_unit_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>group1_bits</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>group1_bits</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_pack_output</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_select_pack_output</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>]</index></name><operator>.</operator><name>ch_assign</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>]</index></name><operator>.</operator><name>output_shift</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>]</index></name><operator>.</operator><name>max_matrix_channel</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>params_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>substr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>substr</name> <operator>&lt;</operator> <name>MAX_SUBSTREAMS</name></expr>;</condition> <incr><expr><name>substr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>restart_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>




<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>stream_type</name></name> <operator>!=</operator> <literal type="number">0xbb</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"unexpected stream_type %X in MLP"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>stream_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>substr</name> <operator>=</operator> <operator>(</operator><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_mlp</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>stream_type</name></name> <operator>!=</operator> <literal type="number">0xba</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"unexpected stream_type %X in !MLP"</literal></expr></argument>,
<argument><expr><name><name>mh</name><operator>.</operator><name>stream_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>substr</name> <operator>=</operator> <operator>(</operator><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream2</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream1</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>&lt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>AV_CH_LAYOUT_MONO</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Mono stream with 2 substreams, ignoring 2nd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>needs_reordering</name></name> <operator>=</operator> <name><name>mh</name><operator>.</operator><name>channel_arrangement</name></name> <operator>&gt;=</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator> <name><name>mh</name><operator>.</operator><name>channel_arrangement</name></name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>













<for>for <control>(<init><expr><name>substr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>substr</name> <operator>&lt;</operator> <name>MAX_SUBSTREAMS</name></expr>;</condition> <incr><expr><name>substr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name><operator>.</operator><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_NONE</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream2</name></name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream2</name></name> <operator>&amp;</operator> <name>AV_CH_SIDE_RIGHT</name> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_modifier_thd_stream2</name></name> <operator>==</operator> <name>THD_CH_MODIFIER_SURROUNDEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBYEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream1</name></name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_layout_thd_stream1</name></name> <operator>&amp;</operator> <name>AV_CH_SIDE_RIGHT</name> <operator>&amp;&amp;</operator>
<name><name>mh</name><operator>.</operator><name>channel_modifier_thd_stream1</name></name> <operator>==</operator> <name>THD_CH_MODIFIER_SURROUNDEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBYEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>num_substreams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>mh</name><operator>.</operator><name>channel_modifier_thd_stream0</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THD_CH_MODIFIER_LTRT</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THD_CH_MODIFIER_LBINRBIN</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBYHEADPHONE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>read_restart_header</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sync_word</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lossless_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_count</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_channel</name></decl>, <decl><type ref="prev"/><name>max_channel</name></decl>, <decl><type ref="prev"/><name>max_matrix_channel</name></decl>, <decl><type ref="prev"/><name>noise_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>std_max_matrix_channel</name> <init>= <expr><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name></expr>
?</condition><then> <expr><name>MAX_MATRIX_CHANNEL_MLP</name></expr>
</then><else>: <expr><name>MAX_MATRIX_CHANNEL_TRUEHD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sync_word</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sync_word</name> <operator>!=</operator> <literal type="number">0x31ea</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"restart header sync incorrect (got 0x%04x)\n"</literal></expr></argument>, <argument><expr><name>sync_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>noise_type</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name> <operator>&amp;&amp;</operator> <name>noise_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLP must have 0x31ea sync word.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>min_channel</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_channel</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_matrix_channel</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_matrix_channel</name> <operator>&gt;</operator> <name>std_max_matrix_channel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Max matrix channel cannot be greater than %d.\n"</literal></expr></argument>,
<argument><expr><name>std_max_matrix_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_channel</name> <operator>!=</operator> <name>max_matrix_channel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Max channel must be equal max matrix channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>max_channel</name> <operator>&gt;</operator> <name>MAX_MATRIX_CHANNEL_MLP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>noise_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"%d channels (more than the "</literal>
<literal type="string">"maximum supported by the decoder)"</literal></expr></argument>,
<argument><expr><name>max_channel</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>min_channel</name> <operator>&gt;</operator> <name>max_channel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Substream min channel cannot be greater than max channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_channel</name></name> <operator>=</operator> <name>min_channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name> <operator>=</operator> <name>max_channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name> <operator>=</operator> <name>max_matrix_channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_type</name></name> <operator>=</operator> <name>noise_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mlp_channel_layout_subset</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name> <operator>&gt;</operator> <name>substr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Extracting %d-channel downmix (0x%"</literal><name>PRIx64</name><literal type="string">") from substream %d. "</literal>
<literal type="string">"Further substreams will be skipped.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name> <operator>=</operator> <name>substr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_shift</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noisegen_seed</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data_check_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lossless_check</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>substr</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>lossless_check_data</name></name> <operator>!=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>xor_32_to_8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lossless_check_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>lossless_check</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Lossless check failed - expected %02x, calculated %02x.\n"</literal></expr></argument>,
<argument><expr><name>lossless_check</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch_assign</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel</name> <init>= <expr><call><name>thd_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>,
<argument><expr><name>ch_assign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ch_assign</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>,
<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ch_assign</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ch_assign</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"Assignment of matrix channel %d to invalid output channel %d"</literal></expr></argument>,
<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ch_assign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><name>ch_assign</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>ff_mlp_restart_checksum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"restart header checksum error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lossless_check_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_channel</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ChannelParams</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>FIR</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>IIR</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>FIR</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>IIR</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>huff_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>sign_huff_offset</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>substr</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_pack_output</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_select_pack_output</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>needs_reordering</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <operator>(</operator><name>AV_CH_LAYOUT_QUAD</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name><operator>)</operator> <operator>||</operator>
<name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>read_filter_params</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>filter_params</name><index>[<expr><name>filter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_order</name> <init>= <expr><ternary><condition><expr><name>filter</name></expr> ?</condition><then> <expr><name>MAX_IIR_ORDER</name></expr> </then><else>: <expr><name>MAX_FIR_ORDER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>fchar</name> <init>= <expr><ternary><condition><expr><name>filter</name></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>order</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filter</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>filter_changed</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>filter</name></expr>]</index></name><operator>++</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Filters may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;</operator> <name>max_order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%cIR filter order %d is greater than maximum %d.\n"</literal></expr></argument>,
<argument><expr><name>fchar</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>fcoeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>coeff</name><index>[<expr><name>filter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff_bits</name></decl>, <decl><type ref="prev"/><name>coeff_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff_shift</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coeff_bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>coeff_bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%cIR filter coeff_bits must be between 1 and 16.\n"</literal></expr></argument>,
<argument><expr><name>fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_bits</name> <operator>+</operator> <name>coeff_shift</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sum of coeff_bits and coeff_shift for %cIR filter must be 16 or less.\n"</literal></expr></argument>,
<argument><expr><name>fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fcoeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>coeff_bits</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>coeff_shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state_bits</name></decl>, <decl><type ref="prev"/><name>state_shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>FIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"FIR filter has state data specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_shift</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>state_bits</name></expr> ?</condition><then> <expr><call><name>get_sbits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>state_bits</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>state_shift</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>read_matrix_params</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mat</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_primitive_matrices</name> <init>= <expr><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name></expr>
?</condition><then> <expr><name>MAX_MATRICES_MLP</name></expr>
</then><else>: <expr><name>MAX_MATRICES_TRUEHD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>matrix_changed</name></name><operator>++</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Matrices may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name> <operator>&gt;</operator> <name>max_primitive_matrices</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Number of primitive matrices cannot be greater than %d.\n"</literal></expr></argument>,
<argument><expr><name>max_primitive_matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>mat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mat</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name></expr>;</condition> <incr><expr><name>mat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frac_bits</name></decl>, <decl><type ref="prev"/><name>max_chan</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name><index>[<expr><name>mat</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frac_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsb_bypass</name> <index>[<expr><name>mat</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name><index>[<expr><name>mat</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid channel %d specified as output from matrix.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name><index>[<expr><name>mat</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frac_bits</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Too many fractional bits specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_chan</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>noise_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_chan</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>max_chan</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>coeff_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff_val</name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>frac_bits</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_coeff</name><index>[<expr><name>mat</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>coeff_val</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>frac_bits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_noise_shift</name><index>[<expr><name>mat</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_noise_shift</name><index>[<expr><name>mat</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>read_channel_params</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChannelParams</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>fir</name> <init>= <expr><operator>&amp;</operator><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>FIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>iir</name> <init>= <expr><operator>&amp;</operator><name><name>cp</name><operator>-&gt;</operator><name>filter_params</name><index>[<expr><name>IIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_FIR</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_filter_params</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>FIR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_IIR</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_filter_params</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>IIR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fir</name><operator>-&gt;</operator><name>order</name></name> <operator>+</operator> <name><name>iir</name><operator>-&gt;</operator><name>order</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Total filter orders too high.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fir</name><operator>-&gt;</operator><name>order</name></name> <operator>&amp;&amp;</operator> <name><name>iir</name><operator>-&gt;</operator><name>order</name></name> <operator>&amp;&amp;</operator>
<name><name>fir</name><operator>-&gt;</operator><name>shift</name></name> <operator>!=</operator> <name><name>iir</name><operator>-&gt;</operator><name>shift</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"FIR and IIR filters must use the same precision.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fir</name><operator>-&gt;</operator><name>order</name></name> <operator>&amp;&amp;</operator> <name><name>iir</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fir</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>iir</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_HUFFOFFSET</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>huff_offset</name></name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid huff_lsbs.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>read_decoding_params</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>recompute_sho</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_PRESENCE</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_BLOCKSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>access_unit_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid blocksize.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_MATRIX</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_matrix_params</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>gbp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_OUTSHIFT</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Negative output_shift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>substr</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_pack_output</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_select_pack_output</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>param_presence_flags</name></name> <operator>&amp;</operator> <name>PARAM_QUANTSTEP</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recompute_sho</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>ch</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_channel</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recompute_sho</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>ch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_channel_params</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>


<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>recompute_sho</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ch</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ChannelParams</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>codebook</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><operator>-&gt;</operator><name>huff_lsbs</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"quant_step_size larger than huff_lsbs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>sign_huff_offset</name></name> <operator>=</operator> <call><name>calculate_sign_huff</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSB_MASK</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-1u &lt;&lt; (bits))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_channel</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>fircoeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>coeff</name><index>[<expr><name>FIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>state_buffer</name><index>[<expr><name>NUM_FILTERS</name></expr>]</index><index>[<expr><name>MAX_BLOCKSIZE</name> <operator>+</operator> <name>MAX_FIR_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>firbuf</name> <init>= <expr><name><name>state_buffer</name><index>[<expr><name>FIR</name></expr>]</index></name> <operator>+</operator> <name>MAX_BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>iirbuf</name> <init>= <expr><name><name>state_buffer</name><index>[<expr><name>IIR</name></expr>]</index></name> <operator>+</operator> <name>MAX_BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>fir</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>filter_params</name><index>[<expr><name>FIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>iir</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_params</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>filter_params</name><index>[<expr><name>IIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filter_shift</name> <init>= <expr><name><name>fir</name><operator>-&gt;</operator><name>shift</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mask</name> <init>= <expr><call><name>MSB_MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>firbuf</name></expr></argument>, <argument><expr><name><name>fir</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>MAX_FIR_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iirbuf</name></expr></argument>, <argument><expr><name><name>iir</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>MAX_IIR_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_filter_channel</name></name><argument_list>(<argument><expr><name>firbuf</name></expr></argument>, <argument><expr><name>fircoeff</name></expr></argument>,
<argument><expr><name><name>fir</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>iir</name><operator>-&gt;</operator><name>order</name></name></expr></argument>,
<argument><expr><name>filter_shift</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>]</index><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fir</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>firbuf</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>MAX_FIR_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iir</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>iirbuf</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>MAX_IIR_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>read_block_data</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>expected_stream_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_check_present</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expected_stream_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expected_stream_pos</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"Substreams with VLC block size check info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>access_unit_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many audio samples in frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>bypassed_lsbs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bypassed_lsbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_huff_channels</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>gbp</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_channel</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_channel</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_channel</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_check_present</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>expected_stream_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block data length mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>noise_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">30</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">52</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">62</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>,
<expr><literal type="number">51</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">38</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">28</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">34</literal></expr>,
<expr><literal type="number">61</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">67</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">69</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">23</literal></expr>,
<expr><literal type="number">89</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>,
<expr><literal type="number">36</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">39</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">52</literal></expr>,
<expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">70</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>











<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_2_noise_channels</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>noisegen_seed</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxchan</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>seed_shr7</name> <init>= <expr><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>maxchan</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_shift</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>maxchan</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator> <name>seed_shr7</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>(</operator><name>seed</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>^</operator> <name>seed_shr7</name> <operator>^</operator> <operator>(</operator><name>seed_shr7</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noisegen_seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_noise_buffer</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>noisegen_seed</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>access_unit_size_pow2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>seed_shr15</name> <init>= <expr><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>noise_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>noise_table</name><index>[<expr><name>seed_shr15</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>(</operator><name>seed</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name>seed_shr15</name> <operator>^</operator> <operator>(</operator><name>seed_shr15</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noisegen_seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>output_data</name><parameter_list>(<parameter><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>substr</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxchan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is32</name> <init>= <expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"channel count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No samples to output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>maxchan</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>noise_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_2_noise_channels</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxchan</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fill_noise_buffer</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<for>for <control>(<init><expr><name>mat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mat</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name></expr>;</condition> <incr><expr><name>mat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_ch</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix_out_ch</name><index>[<expr><name>mat</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_rematrix_channel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_coeff</name><index>[<expr><name>mat</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>bypassed_lsbs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mat</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>noise_buffer</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_primitive_matrices</name></name> <operator>-</operator> <name>mat</name></expr></argument>,
<argument><expr><name>dest_ch</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr></argument>,
<argument><expr><name>maxchan</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_noise_shift</name><index>[<expr><name>mat</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>access_unit_size_pow2</name></name></expr></argument>,
<argument><expr><call><name>MSB_MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_step_size</name><index>[<expr><name>dest_ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lossless_check_data</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mlp_pack_output</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lossless_check_data</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sample_buffer</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_assign</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_shift</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_matrix_channel</name></name></expr></argument>,
<argument><expr><name>is32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_side_data_update_matrix_encoding</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_encoding</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>read_access_unit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MLPDecodeContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>substr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>substream_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>header_size</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>substr_header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>substream_parity_present</name><index>[<expr><name>MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>substream_data_len</name><index>[<expr><name>MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parity_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>length</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>is_major_sync_unit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>show_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><literal type="number">0xf8726fba</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_major_sync</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>is_major_sync_unit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>major_sync_header_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>params_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Stream parameters not seen; skipping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>substream_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>substr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>substr</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>num_substreams</name></name></expr>;</condition> <incr><expr><name>substr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extraword_present</name></decl>, <decl><type ref="prev"/><name>checkdata_present</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>nonrestart_substr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extraword_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nonrestart_substr</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checkdata_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>substr_header_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extraword_present</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"There must be no extraword for MLP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>substr_header_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <name>header_size</name> <operator>+</operator> <name>substr_header_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient data for headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nonrestart_substr</name> <operator>^</operator> <name><name>m</name><operator>-&gt;</operator><name>is_major_sync_unit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid nonrestart_substr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>header_size</name> <operator>+</operator> <name>substr_header_size</name> <operator>&gt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Indicated length of substream %d data goes off end of "</literal>
<literal type="string">"packet.\n"</literal></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>length</name> <operator>-</operator> <name>header_size</name> <operator>-</operator> <name>substr_header_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>substream_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Indicated end offset of substream %d data "</literal>
<literal type="string">"is smaller than calculated start offset.\n"</literal></expr></argument>,
<argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>substr</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>substream_parity_present</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>=</operator> <name>checkdata_present</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>substream_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>substream_start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>parity_bits</name> <operator>=</operator> <call><name>ff_mlp_calculate_parity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parity_bits</name> <operator>^=</operator> <call><name>ff_mlp_calculate_parity</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>header_size</name></expr></argument>, <argument><expr><name>substr_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>parity_bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <name>parity_bits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>header_size</name> <operator>+</operator> <name>substr_header_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>substr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>substr</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>;</condition> <incr><expr><name>substr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SubStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>matrix_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>filter_changed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>filter_changed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_restart_header</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_substr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>restart_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>restart_seen</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_substr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_decoding_params</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_substr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>restart_seen</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_substr</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_block_data</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shorten_by</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xD234</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shorten_by</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name> <operator>&amp;&amp;</operator> <name>shorten_by</name> <operator>&amp;</operator> <literal type="number">0x2000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name> <operator>-=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>shorten_by</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name> <operator>&amp;&amp;</operator> <name>shorten_by</name> <operator>!=</operator> <literal type="number">0xD234</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>substr</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"End of stream indicated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>substream_parity_present</name><index>[<expr><name>substr</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parity</name></decl>, <decl><type ref="prev"/><name>checksum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parity</name> <operator>=</operator> <call><name>ff_mlp_calculate_parity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>ff_mlp_checksum8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name>parity</name><operator>)</operator> <operator>!=</operator> <literal type="number">0xa9</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Substream %d parity check failed.\n"</literal></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>checksum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Substream %d checksum failed.\n"</literal></expr></argument> , <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>!=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>

<label><name>next_substr</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>restart_seen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No restart header present in substream %d.\n"</literal></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>substream_data_len</name><index>[<expr><name>substr</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>output_data</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>max_decoded_substream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>length</name></expr>;</return>

<label><name>substream_length_mismatch</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"substream %d length mismatch\n"</literal></expr></argument>, <argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>params_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MLP_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mlp_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mlp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MLP (Meridian Lossless Packing)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MLP</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MLPDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mlp_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>read_access_unit</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TRUEHD_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_truehd_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"truehd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TrueHD"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MLPDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mlp_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>read_access_unit</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
