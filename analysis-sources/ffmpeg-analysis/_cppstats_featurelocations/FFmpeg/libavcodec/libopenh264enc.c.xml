<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libopenh264enc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_api.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_ver.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopenh264.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SM_SIZELIMITED_SLICE</name></cpp:macro> <cpp:value>SM_DYN_SLICE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>SVCContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ISVCEncoder</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loopfilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_nal_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cabac</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVCContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SVCContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"slice_mode"</literal></expr>, <expr><literal type="string">"set slice mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>slice_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_FIXEDSLCNUM_SLICE</name></expr> }</block></expr>, <expr><name>SM_SINGLE_SLICE</name></expr>, <expr><name>SM_RESERVED</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"slice_mode"</literal></expr>, <expr><literal type="string">"set slice mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>slice_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_AUTO_SLICE</name></expr> }</block></expr>, <expr><name>SM_SINGLE_SLICE</name></expr>, <expr><name>SM_RESERVED</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><literal type="string">"a fixed number of slices"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_FIXEDSLCNUM_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"dyn"</literal></expr>, <expr><literal type="string">"Size limited (compatibility name)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_SIZELIMITED_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sizelimited"</literal></expr>, <expr><literal type="string">"Size limited"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_SIZELIMITED_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"rowmb"</literal></expr>, <expr><literal type="string">"one slice per row of macroblocks"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_ROWMB_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"automatic number of slices according to number of threads"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_AUTO_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dyn"</literal></expr>, <expr><literal type="string">"Dynamic slicing"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SM_DYN_SLICE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"slice_mode"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"loopfilter"</literal></expr>, <expr><literal type="string">"enable loop filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>loopfilter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"set profile restrictions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"max_nal_size"</literal></expr>, <expr><literal type="string">"set maximum NAL size in bytes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_nal_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"allow_skip_frames"</literal></expr>, <expr><literal type="string">"allow skipping frames to hit the target bitrate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>skip_frames</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cabac"</literal></expr>, <expr><literal type="string">"Enable cabac"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cabac</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libopenh264enc"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svc_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WelsDestroySVCEncoder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skipped</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%d frames skipped\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>skipped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svc_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEncParamExt</name></type> <name>param</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WelsTraceCallback</name></type> <name>callback_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_libopenh264_check_version</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WelsCreateSVCEncoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create encoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>log_level</name> <operator>=</operator> <name>WELS_LOG_DETAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>ENCODER_OPTION_TRACE_LEVEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>callback_function</name> <operator>=</operator> <operator>(</operator><name>WelsTraceCallback</name><operator>)</operator> <name>ff_libopenh264_trace_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>ENCODER_OPTION_TRACE_CALLBACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>ENCODER_OPTION_TRACE_CALLBACK_CONTEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>GetDefaultParams</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cabac</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cabac</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coder_type</name></name> <operator>==</operator> <name>FF_CODER_TYPE_AC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>param</name><operator>.</operator><name>fMaxFrameRate</name></name> <init>= <expr><literal type="number">1</literal><operator>/</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iPicWidth</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iPicHeight</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iTargetBitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iMaxBitrate</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iRCMode</name></name> <operator>=</operator> <name>RC_QUALITY_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iTemporalLayerNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iSpatialLayerNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableDenoise</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableBackgroundDetection</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableAdaptiveQuant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableFrameSkip</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableLongTermReference</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iLtrMarkPeriod</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>uiIntraPeriod</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>eSpsPpsIdStrategy</name></name> <operator>=</operator> <name>CONSTANT_ID</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bEnableSpsPpsIdAddition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>bPrefixNalAddingCtrl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iLoopFilterDisableIdc</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loopfilter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iEntropyCodingModeFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iMultipleThreadIdc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iEntropyCodingModeFlag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cabac</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>iEntropyCodingModeFlag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iVideoWidth</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iPicWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iVideoHeight</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iPicHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fFrameRate</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>fMaxFrameRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iSpatialBitrate</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iTargetBitrate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iMaxSpatialBitrate</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iMaxBitrate</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>sar_idc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ESampleAspectRatio</name></type> <name><name>asp_idc</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ASP_UNSPECIFIED</name></expr>,
<expr><name>ASP_1x1</name></expr>, <expr><name>ASP_12x11</name></expr>, <expr><name>ASP_10x11</name></expr>, <expr><name>ASP_16x11</name></expr>,
<expr><name>ASP_40x33</name></expr>, <expr><name>ASP_24x11</name></expr>, <expr><name>ASP_20x11</name></expr>, <expr><name>ASP_32x11</name></expr>,
<expr><name>ASP_80x33</name></expr>, <expr><name>ASP_18x11</name></expr>, <expr><name>ASP_15x11</name></expr>, <expr><name>ASP_64x33</name></expr>,
<expr><name>ASP_160x99</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>
<name>den</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eAspectRatio</name> <operator>=</operator> <name>ASP_EXT_SAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sAspectRatioExtWidth</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sAspectRatioExtHeight</name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eAspectRatio</name> <operator>=</operator> <name><name>asp_idc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bAspectRatioPresent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bAspectRatioPresent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid combination -slices %d and -max_nal_size %d.\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_mode</name></name> <operator>=</operator> <name>SM_FIXEDSLCNUM_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_mode</name></name> <operator>=</operator> <name>SM_SIZELIMITED_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceArgument</name><operator>.</operator><name>uiSliceMode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceArgument</name><operator>.</operator><name>uiSliceNum</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceCfg</name><operator>.</operator><name>uiSliceMode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceCfg</name><operator>.</operator><name>sSliceArgument</name><operator>.</operator><name>uiSliceNum</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slice_mode</name></name> <operator>==</operator> <name>SM_SIZELIMITED_SLICE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>uiMaxNalSize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceArgument</name><operator>.</operator><name>uiSliceSizeConstraint</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sSpatialLayers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sSliceCfg</name><operator>.</operator><name>sSliceArgument</name><operator>.</operator><name>uiSliceSizeConstraint</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_nal_size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid -max_nal_size, "</literal>
<literal type="string">"specify a valid max_nal_size to use -slice_mode dyn\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>InitializeExt</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cmResultSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Initialize failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SFrameBSInfo</name></type> <name>fbi</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>EncodeParameterSets</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iNalCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pNalLengthInByte</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pBsBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iMaxBitrate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iTargetBitrate</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svc_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFrameBSInfo</name></type> <name>fbi</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSourcePicture</name></type> <name>sp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>layer</name></decl>, <decl><type ref="prev"/><name>first_layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>layer_size</name><index>[<expr><name>MAX_LAYER_NUM_OF_FRAME</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>iColorFormat</name></name> <operator>=</operator> <name>videoFormatI420</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>iStride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>iPicWidth</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>iPicHeight</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>ForceIntraFrame</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name><operator>)</operator><operator>-&gt;</operator><name>EncodeFrame</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>!=</operator> <name>cmResultSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"EncodeFrame failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fbi</name><operator>.</operator><name>eFrameType</name></name> <operator>==</operator> <name>videoFrameTypeSkip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skipped</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"frame skipped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first_layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_layer</name> <operator>=</operator> <name><name>fbi</name><operator>.</operator><name>iLayerNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <name>first_layer</name></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>fbi</name><operator>.</operator><name>iLayerNum</name></name></expr>;</condition> <incr><expr><name>layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>iNalCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>layer_size</name><index>[<expr><name>layer</name></expr>]</index></name> <operator>+=</operator> <name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name><name>pNalLengthInByte</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>layer_size</name><index>[<expr><name>layer</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d slices\n"</literal></expr></argument>, <argument><expr><name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><name><name>fbi</name><operator>.</operator><name>iLayerNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iNalCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <name>first_layer</name></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>fbi</name><operator>.</operator><name>iLayerNum</name></name></expr>;</condition> <incr><expr><name>layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>fbi</name><operator>.</operator><name>sLayerInfo</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>pBsBuf</name></expr></argument>, <argument><expr><name><name>layer_size</name><index>[<expr><name>layer</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>layer_size</name><index>[<expr><name>layer</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fbi</name><operator>.</operator><name>eFrameType</name></name> <operator>==</operator> <name>videoFrameTypeIDR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libopenh264_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopenh264"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenH264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVCContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>svc_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>svc_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>svc_encode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libopenh264"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
