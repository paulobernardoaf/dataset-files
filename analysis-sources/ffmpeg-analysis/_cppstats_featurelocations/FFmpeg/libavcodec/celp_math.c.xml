<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\celp_math.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>exp2a</name><index>[]</index></name><init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1435</literal></expr>, <expr><literal type="number">2901</literal></expr>, <expr><literal type="number">4400</literal></expr>, <expr><literal type="number">5931</literal></expr>, <expr><literal type="number">7496</literal></expr>, <expr><literal type="number">9096</literal></expr>, <expr><literal type="number">10730</literal></expr>,
<expr><literal type="number">12400</literal></expr>, <expr><literal type="number">14106</literal></expr>, <expr><literal type="number">15850</literal></expr>, <expr><literal type="number">17632</literal></expr>, <expr><literal type="number">19454</literal></expr>, <expr><literal type="number">21315</literal></expr>, <expr><literal type="number">23216</literal></expr>, <expr><literal type="number">25160</literal></expr>,
<expr><literal type="number">27146</literal></expr>, <expr><literal type="number">29175</literal></expr>, <expr><literal type="number">31249</literal></expr>, <expr><literal type="number">33368</literal></expr>, <expr><literal type="number">35534</literal></expr>, <expr><literal type="number">37747</literal></expr>, <expr><literal type="number">40009</literal></expr>, <expr><literal type="number">42320</literal></expr>,
<expr><literal type="number">44682</literal></expr>, <expr><literal type="number">47095</literal></expr>, <expr><literal type="number">49562</literal></expr>, <expr><literal type="number">52082</literal></expr>, <expr><literal type="number">54657</literal></expr>, <expr><literal type="number">57289</literal></expr>, <expr><literal type="number">59979</literal></expr>, <expr><literal type="number">62727</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>exp2b</name><index>[]</index></name><init>=
<expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">712</literal></expr>, <expr><literal type="number">1424</literal></expr>, <expr><literal type="number">2134</literal></expr>, <expr><literal type="number">2845</literal></expr>, <expr><literal type="number">3557</literal></expr>, <expr><literal type="number">4270</literal></expr>, <expr><literal type="number">4982</literal></expr>,
<expr><literal type="number">5696</literal></expr>, <expr><literal type="number">6409</literal></expr>, <expr><literal type="number">7124</literal></expr>, <expr><literal type="number">7839</literal></expr>, <expr><literal type="number">8554</literal></expr>, <expr><literal type="number">9270</literal></expr>, <expr><literal type="number">9986</literal></expr>, <expr><literal type="number">10704</literal></expr>,
<expr><literal type="number">11421</literal></expr>, <expr><literal type="number">12138</literal></expr>, <expr><literal type="number">12857</literal></expr>, <expr><literal type="number">13576</literal></expr>, <expr><literal type="number">14295</literal></expr>, <expr><literal type="number">15014</literal></expr>, <expr><literal type="number">15734</literal></expr>, <expr><literal type="number">16455</literal></expr>,
<expr><literal type="number">17176</literal></expr>, <expr><literal type="number">17898</literal></expr>, <expr><literal type="number">18620</literal></expr>, <expr><literal type="number">19343</literal></expr>, <expr><literal type="number">20066</literal></expr>, <expr><literal type="number">20790</literal></expr>, <expr><literal type="number">21514</literal></expr>, <expr><literal type="number">22238</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_exp2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>power</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>result</name><init>= <expr><name><name>exp2a</name><index>[<expr><name>power</name><operator>&gt;&gt;</operator><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>power</name> <operator>&lt;=</operator> <literal type="number">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name><operator>=</operator> <operator>(</operator><name>result</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>result</name><operator>*</operator><name><name>exp2b</name><index>[<expr><operator>(</operator><name>power</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">31</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>result</name><operator>*</operator><operator>(</operator><name>power</name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator><operator>*</operator><literal type="number">89</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">22</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>tab_log2</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1455</literal></expr>, <expr><literal type="number">2866</literal></expr>, <expr><literal type="number">4236</literal></expr>, <expr><literal type="number">5568</literal></expr>, <expr><literal type="number">6863</literal></expr>, <expr><literal type="number">8124</literal></expr>, <expr><literal type="number">9352</literal></expr>,
<expr><literal type="number">10549</literal></expr>, <expr><literal type="number">11716</literal></expr>, <expr><literal type="number">12855</literal></expr>, <expr><literal type="number">13967</literal></expr>, <expr><literal type="number">15054</literal></expr>, <expr><literal type="number">16117</literal></expr>, <expr><literal type="number">17156</literal></expr>, <expr><literal type="number">18172</literal></expr>,
<expr><literal type="number">19167</literal></expr>, <expr><literal type="number">20142</literal></expr>, <expr><literal type="number">21097</literal></expr>, <expr><literal type="number">22033</literal></expr>, <expr><literal type="number">22951</literal></expr>, <expr><literal type="number">23852</literal></expr>, <expr><literal type="number">24735</literal></expr>, <expr><literal type="number">25603</literal></expr>,
<expr><literal type="number">26455</literal></expr>, <expr><literal type="number">27291</literal></expr>, <expr><literal type="number">28113</literal></expr>, <expr><literal type="number">28922</literal></expr>, <expr><literal type="number">29716</literal></expr>, <expr><literal type="number">30497</literal></expr>, <expr><literal type="number">31266</literal></expr>, <expr><literal type="number">32023</literal></expr>, <expr><literal type="number">32767</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1459</literal></expr>, <expr><literal type="number">2870</literal></expr>, <expr><literal type="number">4240</literal></expr>, <expr><literal type="number">5572</literal></expr>, <expr><literal type="number">6867</literal></expr>, <expr><literal type="number">8127</literal></expr>, <expr><literal type="number">9355</literal></expr>,
<expr><literal type="number">10552</literal></expr>, <expr><literal type="number">11719</literal></expr>, <expr><literal type="number">12858</literal></expr>, <expr><literal type="number">13971</literal></expr>, <expr><literal type="number">15057</literal></expr>, <expr><literal type="number">16120</literal></expr>, <expr><literal type="number">17158</literal></expr>, <expr><literal type="number">18175</literal></expr>,
<expr><literal type="number">19170</literal></expr>, <expr><literal type="number">20145</literal></expr>, <expr><literal type="number">21100</literal></expr>, <expr><literal type="number">22036</literal></expr>, <expr><literal type="number">22954</literal></expr>, <expr><literal type="number">23854</literal></expr>, <expr><literal type="number">24738</literal></expr>, <expr><literal type="number">25605</literal></expr>,
<expr><literal type="number">26457</literal></expr>, <expr><literal type="number">27294</literal></expr>, <expr><literal type="number">28116</literal></expr>, <expr><literal type="number">28924</literal></expr>, <expr><literal type="number">29719</literal></expr>, <expr><literal type="number">30500</literal></expr>, <expr><literal type="number">31269</literal></expr>, <expr><literal type="number">32025</literal></expr>, <expr><literal type="number">32769</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_log2_q15</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>power_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frac_x0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>frac_dx</name></decl>;</decl_stmt>


<expr_stmt><expr><name>power_int</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>power_int</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>frac_x0</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x7c000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>frac_dx</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x03fff800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>tab_log2</name><index>[<expr><name>frac_x0</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <operator>(</operator><name>frac_dx</name> <operator>*</operator> <operator>(</operator><name><name>tab_log2</name><index>[<expr><name>frac_x0</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tab_log2</name><index>[<expr><name>frac_x0</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>power_int</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_dot_product</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>MUL16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>ff_dot_productf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celp_math_init</name><parameter_list>(<parameter><decl><type><name>CELPMContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dot_productf</name></name> <operator>=</operator> <name>ff_dot_productf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>HAVE_MIPSFPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_celp_math_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
