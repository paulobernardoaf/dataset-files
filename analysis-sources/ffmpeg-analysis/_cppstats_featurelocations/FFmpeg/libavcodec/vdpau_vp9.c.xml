<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vdpau_vp9.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_vp9_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9Frame</name></type> <name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>.</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoVP9</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>vp9</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pixdesc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lastReference</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>goldenReference</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>altReference</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>private_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lastReference</name></name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>private_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>goldenReference</name></name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>private_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>altReference</name></name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frameContextIdx</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>keyFrame</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>showFrame</name></name> <operator>=</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>errorResilient</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frameParallelDecoding</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>parallelmode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subSamplingX</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subSamplingY</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>intraOnly</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>allowHighPrecisionMv</name></name> <operator>=</operator> <ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>refreshEntropyProbs</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refreshctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bitDepthMinus8Luma</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bitDepthMinus8Chroma</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>loopFilterLevel</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>loopFilterSharpness</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>modeRefLfEnabled</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2TileColumns</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2TileRows</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentEnabled</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentMapUpdate</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentMapTemporalUpdate</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureMode</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>qpYAc</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>qpYDc</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>ydc_qdelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>qpChDc</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uvdc_qdelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>qpChAc</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uvac_qdelta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>resetFrameContext</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>resetctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mcompFilterType</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>^</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>uncompressedHeaderSize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uncompressed_header_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>compressedHeaderSize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>compressed_header_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>refFrameSignBias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mbModeLfDelta</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mbModeLfDelta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mbRefLfDelta</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mbRefLfDelta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mbSegmentTreeProbs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mbSegmentTreeProbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>activeRefIdx</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>activeRefIdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentPredProbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>pred_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>refFrameSignBias</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureEnable</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureEnable</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureEnable</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureEnable</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureEnable</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip_enabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureData</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureData</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureData</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>segmentFeatureData</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_RESERVED</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_RGB</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorSpace</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>ff_vdpau_common_start_frame</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code_prefix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_vp9_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9Frame</name></type> <name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>.</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>start_code_prefix</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_vp9_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9Frame</name></type> <name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>.</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>.</operator><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_vp9_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>level</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_VP9_0</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_VP9_PROFILE_0</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_VP9_1</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_VP9_PROFILE_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_VP9_2</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_VP9_PROFILE_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_VP9_3</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_VP9_PROFILE_3</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><call><name>ff_vdpau_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp9_vdpau_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9_vdpau"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vdpau_vp9_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>vdpau_vp9_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vdpau_vp9_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vdpau_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vdpau_vp9_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vdpau_common_uninit</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vdpau_common_frame_params</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
