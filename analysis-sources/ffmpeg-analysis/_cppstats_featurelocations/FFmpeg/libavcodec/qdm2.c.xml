<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\qdm2.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qdm2_tablegen.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QDM2_LIST_ADD</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>packet</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (size &gt; 0) { list[size - 1].next = &amp;list[size]; } list[size].packet = packet; list[size].next = NULL; size++; } while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QDM2_SB_USED</name><parameter_list>(<parameter><type><name>sub_sampling</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((sub_sampling) &gt;= 2) ? 30 : 8 &lt;&lt; (sub_sampling))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_NOISE_IDX</name><parameter_list>(<parameter><type><name>noise_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((noise_idx) &gt;= 3840) (noise_idx) -= 3840;</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_DITHERING_NOISE</name><parameter_list>(<parameter><type><name>sb</name></type></parameter>,<parameter><type><name>noise_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(noise_table[(noise_idx)++] * sb_noise_attenuation[(sb)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_NEEDED</name></cpp:macro> <cpp:value>av_log (NULL,AV_LOG_INFO,"This file triggers some untested code. Please contact the developers.\n");</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_NEEDED_2</name><parameter_list>(<parameter><type><name>why</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_log (NULL,AV_LOG_INFO,"This file triggers some missing code. Please contact the developers.\nPosition: %s\n",why);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QDM2_MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><name>int8_t</name></type> <name><name>sb_int8_array</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name>;</typedef>




<typedef>typedef <type><struct>struct <name>QDM2SubPacket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>QDM2SubPacket</name>;</typedef>




<typedef>typedef <type><struct>struct <name>QDM2SubPNode</name> <block>{
<decl_stmt><decl><type><name>QDM2SubPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>QDM2SubPNode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
}</block></struct></type> <name>QDM2SubPNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QDM2Complex</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>im</name></decl>;</decl_stmt>
}</block></struct></type> <name>QDM2Complex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFTTone</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2Complex</name> <modifier>*</modifier></type><name>complex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>phase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>phase_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>time_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>cutoff</name></decl>;</decl_stmt>
}</block></struct></type> <name>FFTTone</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFTCoefficient</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>sub_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>phase</name></decl>;</decl_stmt>
}</block></struct></type> <name>FFTCoefficient</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QDM2FFT</name> <block>{
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>QDM2Complex</name></expr></argument>, <argument><expr><name>complex</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>QDM2FFT</name>;</typedef>




<typedef>typedef <type><struct>struct <name>QDM2Context</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>group_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fft_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>checksum_size</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>group_order</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fft_order</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frequency_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub_sampling</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>coeff_per_sb_select</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cm_table_select</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>QDM2SubPacket</name></type> <name><name>sub_packets</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>QDM2SubPNode</name></type> <name><name>sub_packet_list_A</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>QDM2SubPNode</name></type> <name><name>sub_packet_list_B</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sub_packets_B</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>QDM2SubPNode</name></type> <name><name>sub_packet_list_C</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>QDM2SubPNode</name></type> <name><name>sub_packet_list_D</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>FFTTone</name></type> <name><name>fft_tones</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_tone_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_tone_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTCoefficient</name></type> <name><name>fft_coefs</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_coefs_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fft_coefs_min_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fft_coefs_max_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fft_level_exp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDFTContext</name></type> <name>rdft_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2FFT</name></type> <name>fft</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>compressed_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>output_buffer</name><index>[<expr><name>QDM2_MAX_FRAME_SIZE</name> <operator>*</operator> <name>MPA_MAX_CHANNELS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MPADSPContext</name></type> <name>mpadsp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>synth_buf</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">512</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>synth_buf_offset</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>sb_samples</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name> <operator>*</operator> <name>MPA_FRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>tone_level</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>coding_method</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>quantized_coeffs</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx_base</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx_hi1</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx_mid</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx_hi2</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tone_level_idx_temp</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>has_errors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>superblocktype_2_3</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>do_synth_filter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sub_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noise_idx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>QDM2Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>switchtable</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdm2_get_vlc</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>value</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"value %d in qdm2_get_vlc too large\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name><operator>=</operator> <name><name>vlc_stage3_values</name><index>[<expr><name>value</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdm2_get_se_vlc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>qdm2_packet_checksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>-=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_decode_sub_packet_header</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>QDM2SubPacket</name> <modifier>*</modifier></type><name>sub_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>gb</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Subpacket: type=%d size=%d start_offs=%x\n"</literal></expr></argument>,
<argument><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>sub_packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>QDM2SubPNode</name> <modifier>*</modifier></type><name>qdm2_search_subpacket_type_in_list</name><parameter_list>(<parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name><name>list</name><operator>-&gt;</operator><name>packet</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>average_quantized_coeffs</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>coeff_per_sb_for_avg</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>build_sb_samples_from_noise</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FIX_NOISE_IDX</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>
<call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>
<call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>fix_coding_method_array</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>sb_int8_array</name></type> <name>coding_method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>case_val</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>switchtable</name><index>[<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>case_val</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sbjk</name> <init>= <expr><name>sb</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sbjk</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition> <block>{<block_content>
<macro><name>SAMPLES_NEEDED</name></macro>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sbjk</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>%</operator> <literal type="number">64</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SAMPLES_NEEDED</name></type>

<name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>case_val</name></expr></argument>,
<argument><expr><name>k</name> <operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>case_val</name></expr></argument>,
<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_tone_level_array</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tab</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tab</name><operator>=</operator><name><name>coeff_per_sb_for_dequant</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>last_coeff</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>tab</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dequant_table</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><name>tab</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>+</operator>
<name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dequant_table</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dequant_table</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_base</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>/</operator> <literal type="number">256</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>sb_used</name> <operator>=</operator> <call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sb_used</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_base</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fft_tone_level_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tab</name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sb_used</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sb</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sb</name> <operator>&lt;=</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_base</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_mid</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tmp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fft_tone_level_table</name><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_base</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tmp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fft_tone_level_table</name><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_base</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tmp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fft_tone_level_table</name><index>[<expr><name>tab</name></expr>]</index><index>[<expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_coding_method_array</name><parameter_list>(<parameter><decl><type><name>sb_int8_array</name></type> <name>tone_level_idx</name></decl></parameter>,
<parameter><decl><type><name>sb_int8_array</name></type> <name>tone_level_idx_temp</name></decl></parameter>,
<parameter><decl><type><name>sb_int8_array</name></type> <name>coding_method</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>superblocktype_2_3</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cm_table_select</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>acc</name></decl>, <decl><type ref="prev"/><name>esp_40</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>multres</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>superblocktype_2_3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"!superblocktype_2_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>add1</name> <operator>=</operator> <name><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>add2</name> <operator>=</operator> <name>add3</name> <operator>=</operator> <name>add4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add2</name> <operator>=</operator> <name><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>tone_level_idx_offset_table</name><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add3</name> <operator>=</operator> <name><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>tone_level_idx_offset_table</name><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add3</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">29</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add4</name> <operator>=</operator> <name><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>tone_level_idx_offset_table</name><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add4</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tone_level_idx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>add4</name> <operator>-</operator> <name>add3</name> <operator>-</operator> <name>add2</name> <operator>-</operator> <name>add1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tone_level_idx_temp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tone_level_idx_temp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tone_level_idx_temp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>tone_level_idx_temp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>multres</name> <operator>=</operator> <literal type="number">0x66666667LL</literal> <operator>*</operator> <operator>(</operator><name>acc</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>esp_40</name> <operator>=</operator> <operator>(</operator><name>multres</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>multres</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <name><name>tone_level_idx_temp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator> <name>esp_40</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comp</name> <operator>+=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comp</name> <operator>/=</operator> <literal type="number">256</literal></expr>;</expr_stmt> 
<switch>switch<condition>(<expr><name>sb</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comp</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comp</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xfffa</literal><operator>)</operator> <operator>+</operator> <literal type="number">30</literal> <operator>)</operator><operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fix_coding_method_array</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>coding_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>coding_method_table</name><index>[<expr><name>cm_table_select</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>synthfilt_build_sb_samples</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>joined_stereo</name></decl>, <decl><type ref="prev"/><name>zero_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type34_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>type34_div</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>type34_predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>samples</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sign_bits</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name><operator>=</operator><name>sb_min</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sb_max</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>build_sb_samples_from_noise</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name>sb_min</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sb_max</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>sb</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>joined_stereo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sb</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>joined_stereo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>joined_stereo</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>joined_stereo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sign_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>coding_method</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>coding_method</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coding_method</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>coding_method</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>fix_coding_method_array</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>coding_method</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"coding method invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>build_sb_samples_from_noise</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FIX_NOISE_IDX</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zero_encoding</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>type34_predictor</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type34_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>coding_method</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zero_encoding</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>dequant_1bit</name><index>[<expr><name>joined_stereo</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">243</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid 8bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name><name>dequant_1bit</name><index>[<expr><name>joined_stereo</name></expr>]</index><index>[<expr><name><name>random_dequant_index</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">0.81</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>-=</operator> <name><name>noise_samples</name><index>[<expr><operator>(</operator><operator>(</operator><name>sb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator><literal type="number">5</literal> <operator>*</operator> <name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>]</index></name> <operator>*</operator> <literal type="number">9.0</literal> <operator>/</operator> <literal type="number">40.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zero_encoding</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>dequant_1bit</name><index>[<expr><name>joined_stereo</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_bits</name> <argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">243</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid 8bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>dequant_1bit</name><index>[<expr><name>joined_stereo</name></expr>]</index><index>[<expr><name><name>random_dequant_index</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">125</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid 7bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>random_dequant_type24</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr><call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_type30</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>type30_dequant</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"index %d out of type30_dequant array\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>type30_dequant</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">34</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type34_first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type34_div</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">15.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type34_predictor</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type34_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr><call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_type34</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>type34_delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"index %d out of type34_delta array\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>type34_delta</name><index>[<expr><name>index</name></expr>]</index></name> <operator>/</operator> <name>type34_div</name> <operator>+</operator> <name>type34_predictor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type34_predictor</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SB_DITHERING_NOISE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>joined_stereo</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>run</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>+</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sign_bits</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>
<name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tone_level</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>k</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
</block_content>}</block></for> 
</block_content>}</block></for> 
</block_content>}</block></for> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>init_quantized_coeffs_elem0</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>quantized_coeffs</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quantized_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_run</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>run</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>qdm2_get_se_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc_tab_diff</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>run</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quantized_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>*</operator> <name>diff</name><operator>)</operator> <operator>/</operator> <name>run</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>init_tone_level_dequantization</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>init_quantized_coeffs_elem0</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_tone_level_idx_hi1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_tone_level_idx_hi2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_mid</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_mid</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_tone_level_idx_mid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>process_subpacket_9</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>coeff_per_sb_for_avg</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name></expr>]</index><index>[<expr><call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_tab_run</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>qdm2_get_se_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc_tab_diff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>run</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>run</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>*</operator> <name>diff</name><operator>)</operator> <operator>/</operator> <name>run</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>quantized_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>process_subpacket_10</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_tone_level_dequantization</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_tone_level_array</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fill_tone_level_array</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>process_subpacket_11</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_coding_method_array</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_temp</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>coding_method</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>c</name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>cm_table_select</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>synthfilt_build_sb_samples</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>process_subpacket_12</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>synthfilt_build_sb_samples</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>process_synthesis_subpackets</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QDM2SubPNode</name> <modifier>*</modifier></type><name><name>nodes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>qdm2_search_subpacket_type_in_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_9</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>qdm2_search_subpacket_type_in_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_10</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_10</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>qdm2_search_subpacket_type_in_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_11</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_11</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>qdm2_search_subpacket_type_in_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_12</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_subpacket_12</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_decode_super_block</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2SubPacket</name></type> <name>header</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>packet_bytes</name></decl>, <decl><type ref="prev"/><name>sub_packet_size</name></decl>, <decl><type ref="prev"/><name>sub_packets_D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>next_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_mid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_mid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>tone_level_idx_hi2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packets_B</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_packets_D</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>average_quantized_coeffs</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>compressed_data</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qdm2_decode_sub_packet_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>header</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad superblock type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_bytes</name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>csum</name> <init>= <expr><literal type="number">257</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>csum</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>csum</name> <operator>=</operator> <call><name>qdm2_packet_checksum</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>compressed_data</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>checksum_size</name></name></expr></argument>, <argument><expr><name>csum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>csum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad packet checksum\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>packet</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>packet</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>packet_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_A</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SAMPLES_NEEDED_2</name><argument_list>(<argument><expr><literal type="string">"too many packet bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_A</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>next_index</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_index</name> <operator>&gt;=</operator> <name><name>header</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>sub_packets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qdm2_decode_sub_packet_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_index</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_packet_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0xff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_packet_size</name> <operator>&gt;</operator> <name>packet_bytes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>packet_bytes</name> <operator>-</operator> <name>sub_packet_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>packet_bytes</name> <operator>-=</operator> <name>sub_packet_size</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SAMPLES_NEEDED_2</name><argument_list>(<argument><expr><literal type="string">"packet type 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>QDM2_LIST_ADD</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_D</name></name></expr></argument>, <argument><expr><name>sub_packets_D</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fft_level_exp_vlc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<macro><name>SAMPLES_NEEDED_2</name><argument_list>(<argument><literal type="string">"packet type 15"</literal></argument>)</argument_list></macro>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>fft_subpackets</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>QDM2_LIST_ADD</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_B</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packets_B</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_synthesis_subpackets</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_D</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>do_synth_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>do_synth_filter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_subpacket_10</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_subpacket_11</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_subpacket_12</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_fft_init_coefficient</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_packet</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>duration</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>duration</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>]</index></name><operator>.</operator><name>sub_packet</name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>sub_packet</name> <operator>&gt;=</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sub_packet</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>: <expr><name>sub_packet</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>]</index></name><operator>.</operator><name>channel</name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>]</index></name><operator>.</operator><name>phase</name> <operator>=</operator> <name>phase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_fft_decode_tones</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>, <decl><type ref="prev"/><name>stereo</name></decl>, <decl><type ref="prev"/><name>phase</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_int_4</name></decl>, <decl><type ref="prev"/><name>local_int_8</name></decl>, <decl><type ref="prev"/><name>stereo_phase</name></decl>, <decl><type ref="prev"/><name>local_int_10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_int_14</name></decl>, <decl><type ref="prev"/><name>stereo_exp</name></decl>, <decl><type ref="prev"/><name>local_int_20</name></decl>, <decl><type ref="prev"/><name>local_int_28</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>local_int_4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_28</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_20</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_8</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>duration</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_10</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>group_order</name></name> <operator>-</operator> <name>duration</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vlc_tab_fft_tone_offset</name><index>[<expr><name>local_int_8</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>local_int_4</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>group_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"overread in qdm2_fft_decode_tones()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>local_int_4</name> <operator>+=</operator> <name>local_int_10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_28</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>local_int_8</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>local_int_4</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>local_int_10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_28</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>local_int_8</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local_int_10</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qdm2_fft_decode_tones() stuck\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vlc_tab_fft_tone_offset</name><index>[<expr><name>local_int_8</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <operator>(</operator><name>local_int_10</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>local_int_10</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_4</name> <operator>+=</operator> <name>local_int_10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>local_int_28</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>local_int_8</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>local_int_4</name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>group_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>local_int_14</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <name>local_int_8</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>local_int_14</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fft_level_index_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stereo</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stereo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>fft_level_exp_vlc</name></expr> </then><else>: <expr><operator>&amp;</operator><name>fft_level_exp_alt_vlc</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name><name>fft_level_index_table</name><index>[<expr><name>local_int_14</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>exp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>phase</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stereo_exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stereo_phase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stereo_exp</name> <operator>=</operator> <operator>(</operator><name>exp</name> <operator>-</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fft_stereo_exp_vlc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>stereo_phase</name> <operator>=</operator> <operator>(</operator><name>phase</name> <operator>-</operator> <call><name>qdm2_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fft_stereo_phase_vlc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stereo_phase</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stereo_phase</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frequency_range</name></name> <operator>&gt;</operator> <operator>(</operator><name>local_int_14</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sub_packet</name> <init>= <expr><operator>(</operator><name>local_int_20</name> <operator>+</operator> <name>local_int_28</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name> <operator>+</operator> <name>stereo</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qdm2_fft_init_coefficient</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>sub_packet</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_fft_init_coefficient</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>sub_packet</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>channel</name></expr></argument>,
<argument><expr><name>stereo_exp</name></expr></argument>, <argument><expr><name>stereo_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_decode_fft_packets</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>unknown_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>packet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>max</name> <operator>=</operator> <literal type="number">256</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_packets_B</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>QDM2SubPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_packets_B</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_B</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>packet</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>min</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_B</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>packet</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>||</operator>
<name><name>fft_subpackets</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fft_subpackets</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unknown_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>unknown_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">17</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">33</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>duration</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_fft_decode_tones</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>unknown_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_fft_decode_tones</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>unknown_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">46</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_level_exp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_fft_decode_tones</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>unknown_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_max_index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_max_index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_fft_generate_tone</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>FFTTone</name> <modifier>*</modifier></type><name>tone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2Complex</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>iscale</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">512.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>phase</name></name> <operator>+=</operator> <name><name>tone</name><operator>-&gt;</operator><name>phase_shift</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>fft_tone_envelope_table</name><index>[<expr><name><name>tone</name><operator>-&gt;</operator><name>duration</name></name></expr>]</index><index>[<expr><name><name>tone</name><operator>-&gt;</operator><name>time_index</name></name></expr>]</index></name> <operator>*</operator> <name><name>tone</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name>level</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>tone</name><operator>-&gt;</operator><name>phase</name></name> <operator>*</operator> <name>iscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>re</name></name> <operator>=</operator> <name>level</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>tone</name><operator>-&gt;</operator><name>phase</name></name> <operator>*</operator> <name>iscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tone</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>tone</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>tone</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><name><name>fft_cutoff_index_table</name><index>[<expr><name><name>tone</name><operator>-&gt;</operator><name>cutoff</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+=</operator>
<name><name>c</name><operator>.</operator><name>re</name></name> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><name><name>fft_cutoff_index_table</name><index>[<expr><name><name>tone</name><operator>-&gt;</operator><name>cutoff</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+=</operator>
<name><name>c</name><operator>.</operator><name>im</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>tone</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&lt;=</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>re</name></name> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>-&gt;</operator><name>complex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>im</name></name> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>tone</name><operator>-&gt;</operator><name>time_index</name></name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>tone</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft_tones</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_tone_end</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>tone</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTTone</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_tone_end</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>fft_tone_end</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_fft_tone_synthesizer</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>iscale</name> <init>= <expr><literal type="number">0.25</literal> <operator>*</operator> <name>M_PI</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QDM2Complex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_max_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2Complex</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sub_packet</name> <operator>!=</operator> <name>sub_packet</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channel</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><name><name>fft_tone_level_table</name><index>[<expr><ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>re</name></name> <operator>=</operator> <name>level</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phase</name> <operator>*</operator> <name>iscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name>level</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phase</name> <operator>*</operator> <name>iscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_tone_end</name></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_tone_start</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>qdm2_fft_generate_tone</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft_tones</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_tone_start</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_tone_start</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>fft_tone_start</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs_max_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>four_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTTone</name></type> <name>tone</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sub_packet</name> <operator>!=</operator> <name>sub_packet</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>four_i</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;&gt;</operator> <name>four_i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>channel</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>frequency_range</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>cutoff</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>cutoff</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&gt;=</operator> <literal type="number">60</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>level</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><name><name>fft_tone_level_table</name><index>[<expr><ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>superblocktype_2_3</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>complex</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name><name>fft_tone_sample_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <name>four_i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>phase</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>phase</name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>phase_shift</name></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>fft_coefs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>four_i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tone</name><operator>.</operator><name>time_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qdm2_fft_generate_tone</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft_coefs_min_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_calculate_fft</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>gain</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.5f</literal></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>+</operator> <name>channel</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>rdft_ctx</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>rdft_ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTSample</name> <operator>*</operator><operator>)</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>fft_size</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index></name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>complex</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>qdm2_synthesis_filter</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb_used</name></decl>, <decl><type ref="prev"/><name>sub_sampling</name></decl>, <decl><type ref="prev"/><name>dither_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>sb_used</name> <operator>=</operator> <call><name>QDM2_SB_USED</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>sb_used</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples_ptr</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>ch</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mpa_synth_filter_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mpadsp</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>synth_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>synth_buf_offset</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>ff_mpa_synth_window_float</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dither_state</name></expr></argument>,
<argument><expr><name>samples_ptr</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_ptr</name> <operator>+=</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>sub_sampling</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>&gt;&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_sampling</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>ch</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name>sub_sampling</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>qdm2_init_static_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qdm2_init_vlc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mpa_synth_init_float</name><argument_list>(<argument><expr><name>ff_mpa_synth_window_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>softclip_table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rnd_table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_noise_samples</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qdm2_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_val</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qdm2_init_static_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



































<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extradata missing or truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_be64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"not enough extradata (%i)\n"</literal></expr></argument>,
<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extradata size too small, %i &lt; %i\n"</literal></expr></argument>,
<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"size: %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid extradata, expecting QDCA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>MPA_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr> </then><else>:
<expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_size</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>&gt;=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"data block size invalid (%u)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown FFT order %d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>group_order</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>QDM2_MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_sampling</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frequency_range</name></name> <operator>=</operator> <literal type="number">255</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sub_sampling</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sub_sampling</name></name> <operator>&gt;</operator> <name>MPA_FRAME_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"large frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sub_sampling</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">56</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">72</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt><break>break;</break>
<default>default:</default> <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>sub_sampling</name></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>tmp_val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">1440</literal><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_val</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">1760</literal><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_val</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">2240</literal><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_val</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cm_table_select</name></name> <operator>=</operator> <name>tmp_val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <literal type="number">8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;</operator> <literal type="number">16000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_per_sb_select</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_size</name></name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"FFT size %d not power of 2.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_rdft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_order</name></name></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mpadsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mpadsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qdm2_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rdft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdm2_decode</name><parameter_list>(<parameter><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame_size</name> <init>= <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>frame_size</name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>compressed_data</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>checksum_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>frame_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>frame_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>frame_size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Superblock follows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qdm2_decode_super_block</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_decode_fft_packets</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qdm2_fft_tone_synthesizer</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>qdm2_calculate_fft</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>sub_packet_list_C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>packet</name></expr>)</condition> <block>{<block_content>
<macro><name>SAMPLES_NEEDED_2</name><argument_list>(<argument><literal type="string">"has errors, and C list is not empty"</literal></argument>)</argument_list></macro>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>has_errors</name></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>do_synth_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qdm2_synthesis_filter</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>sub_packet</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>q</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>SOFTCLIP_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&gt;</operator> <name>HARDCLIP_THRESHOLD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">32767</literal></expr> </then><else>: <expr><name><name>softclip_table</name><index>[ <expr><name>value</name> <operator>-</operator> <name>SOFTCLIP_THRESHOLD</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <operator>-</operator><name>SOFTCLIP_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&lt;</operator> <operator>-</operator><name>HARDCLIP_THRESHOLD</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32767</literal></expr> </then><else>: <expr><operator>-</operator><name><name>softclip_table</name><index>[<expr><operator>-</operator><name>value</name> <operator>-</operator> <name>SOFTCLIP_THRESHOLD</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdm2_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QDM2Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>qdm2_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_qdm2_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qdm2"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QDesign Music Codec 2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_QDM2</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QDM2Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qdm2_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>qdm2_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>qdm2_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
