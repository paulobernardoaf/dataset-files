<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\fmvc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_HEIGHT</name></cpp:macro> <cpp:value>112u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_WIDTH</name></cpp:macro> <cpp:value>84u</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>InterBlock</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xor</name></decl>;</decl_stmt>
}</block></struct></type> <name>InterBlock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FMVCContext</name> <block>{
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pbuffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yb</name></decl>, <name>xb</name>;</decl_stmt>
<decl_stmt><decl><type><name>InterBlock</name> <modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_blocks</name></decl>;</decl_stmt>
}</block></struct></type> <name>FMVCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_type2</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>repeat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>opcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2049</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>repeat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcode</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opcode</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opcode</name> <operator>+=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>opcode</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2049</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len</name></expr>;</condition> <incr><expr><operator>--</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2048</literal> <operator>*</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len</name></expr>;</condition> <incr><expr><operator>--</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_type1</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>opcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>opcode</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>high</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0xF8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcode</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>opcode</name> <operator>-</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">280</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>opcode</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>opcode</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>opcode</name> <operator>|</operator> <literal type="number">32</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>|</operator> <literal type="number">32</literal> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name> <operator>-</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FMVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_type1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>decode_type2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Compression type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>nb_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ssrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ddst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>xor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>nb_blocks</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_blocks</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pbuffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <name>nb_blocks</name></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_type1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>decode_type2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Compression type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">4</literal> <operator>!=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>xor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>pbuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>yb</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rect</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>xb</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block_h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>xor</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>block_w</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>^=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>column</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>row</name><index>[<expr><name>block_w</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>block</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>rect</name><index>[<expr><name>block_h</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ddst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ddst</name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ddst</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ssrc</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FMVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>BLOCK_HEIGHT</name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name>BLOCK_WIDTH</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555LE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGRA</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported bitdepth %i\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>/</operator> <name>BLOCK_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stride</name></name> <operator>%</operator> <name>BLOCK_WIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">37</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>BLOCK_WIDTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xb</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yb</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">49</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yb</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xb</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>yb</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>yb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>xb</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>yb</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>j</name> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xb</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>yb</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name>BLOCK_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>BLOCK_WIDTH</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>xb</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>BLOCK_HEIGHT</name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name>BLOCK_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>BLOCK_WIDTH</name> <operator>*</operator> <name>BLOCK_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pbuffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pbuffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pbuffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FMVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_fmvc_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fmvc"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"FM Screen Capture Codec"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FMVC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FMVCContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>
<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
