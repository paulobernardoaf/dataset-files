<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hevc_cabac.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CABAC_MAX_BIN</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>num_bins_in_se</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">44</literal></expr>, 
<expr><literal type="number">24</literal></expr>, 
<expr><literal type="number">6</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>elem_offset</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>num_bins_in_se</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">6</literal></expr>, 
<expr><literal type="number">9</literal></expr>, 
<expr><literal type="number">12</literal></expr>, 
<expr><literal type="number">13</literal></expr>, 
<expr><literal type="number">17</literal></expr>, 
<expr><literal type="number">17</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">20</literal></expr>, 
<expr><literal type="number">21</literal></expr>, 
<expr><literal type="number">22</literal></expr>, 
<expr><literal type="number">27</literal></expr>, 
<expr><literal type="number">29</literal></expr>, 
<expr><literal type="number">31</literal></expr>, 
<expr><literal type="number">33</literal></expr>, 
<expr><literal type="number">35</literal></expr>, 
<expr><literal type="number">35</literal></expr>, 
<expr><literal type="number">35</literal></expr>, 
<expr><literal type="number">36</literal></expr>, 
<expr><literal type="number">37</literal></expr>, 
<expr><literal type="number">40</literal></expr>, 
<expr><literal type="number">42</literal></expr>, 
<expr><literal type="number">47</literal></expr>, 
<expr><literal type="number">49</literal></expr>, 
<expr><literal type="number">51</literal></expr>, 
<expr><literal type="number">53</literal></expr>, 
<expr><literal type="number">71</literal></expr>, 
<expr><literal type="number">89</literal></expr>, 
<expr><literal type="number">89</literal></expr>, 
<expr><literal type="number">89</literal></expr>, 
<expr><literal type="number">93</literal></expr>, 
<expr><literal type="number">137</literal></expr>, 
<expr><literal type="number">161</literal></expr>, 
<expr><literal type="number">167</literal></expr>, 
<expr><literal type="number">167</literal></expr>, 
<expr><literal type="number">167</literal></expr>, 
<expr><literal type="number">175</literal></expr>, 
<expr><literal type="number">177</literal></expr>, 
<expr><literal type="number">178</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CNU</name></cpp:macro> <cpp:value>154</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>init_values</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>HEVC_CONTEXTS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><literal type="number">153</literal></expr>,

<expr><literal type="number">200</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">157</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><name>CNU</name></expr>,

<expr><literal type="number">184</literal></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><literal type="number">184</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>, <expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>,

<expr><name>CNU</name></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">138</literal></expr>,

<expr><literal type="number">111</literal></expr>, <expr><literal type="number">141</literal></expr>,

<expr><literal type="number">94</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">110</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">110</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">91</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">141</literal></expr>,

<expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">153</literal></expr>,
<expr><literal type="number">125</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">140</literal></expr>,
<expr><literal type="number">139</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">141</literal></expr>, <expr><literal type="number">111</literal></expr>,

<expr><literal type="number">140</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">107</literal></expr>,
<expr><literal type="number">122</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">197</literal></expr>,

<expr><literal type="number">138</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">152</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">153</literal></expr>,

<expr><literal type="number">185</literal></expr>,

<expr><literal type="number">107</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">126</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">197</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">201</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">149</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">152</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">110</literal></expr>,

<expr><literal type="number">122</literal></expr>,

<expr><literal type="number">95</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">153</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">153</literal></expr>,

<expr><literal type="number">140</literal></expr>, <expr><literal type="number">198</literal></expr>,

<expr><literal type="number">140</literal></expr>, <expr><literal type="number">198</literal></expr>,

<expr><literal type="number">168</literal></expr>,

<expr><literal type="number">79</literal></expr>,

<expr><literal type="number">124</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">94</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">111</literal></expr>,

<expr><literal type="number">149</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">125</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">95</literal></expr>,
<expr><literal type="number">94</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">108</literal></expr>,

<expr><literal type="number">125</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">95</literal></expr>,
<expr><literal type="number">94</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">108</literal></expr>,

<expr><literal type="number">121</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">155</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>,
<expr><literal type="number">154</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">170</literal></expr>,
<expr><literal type="number">153</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>,
<expr><literal type="number">140</literal></expr>, <expr><literal type="number">140</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">121</literal></expr>,
<expr><literal type="number">136</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">182</literal></expr>,

<expr><literal type="number">107</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">167</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">153</literal></expr>,

<expr><literal type="number">160</literal></expr>,

<expr><literal type="number">107</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">126</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">197</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">201</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">134</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">183</literal></expr>,

<expr><literal type="number">152</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">137</literal></expr>,

<expr><literal type="number">95</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">153</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">153</literal></expr>,

<expr><literal type="number">169</literal></expr>, <expr><literal type="number">198</literal></expr>,

<expr><literal type="number">169</literal></expr>, <expr><literal type="number">198</literal></expr>,

<expr><literal type="number">168</literal></expr>,

<expr><literal type="number">79</literal></expr>,

<expr><literal type="number">224</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">122</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">111</literal></expr>,

<expr><literal type="number">149</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">139</literal></expr>, <expr><literal type="number">139</literal></expr>,

<expr><literal type="number">125</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">93</literal></expr>,

<expr><literal type="number">125</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">93</literal></expr>,

<expr><literal type="number">121</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">170</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>,
<expr><literal type="number">154</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">170</literal></expr>,
<expr><literal type="number">153</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">140</literal></expr>,
<expr><literal type="number">140</literal></expr>, <expr><literal type="number">140</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">121</literal></expr>,
<expr><literal type="number">136</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">182</literal></expr>,

<expr><literal type="number">107</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">167</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>, <expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">154</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>scan_1x1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>horiz_scan2x2_x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>horiz_scan2x2_y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>horiz_scan4x4_x</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>horiz_scan4x4_y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>horiz_scan8x8_inv</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>diag_scan2x2_x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>diag_scan2x2_y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>diag_scan2x2_inv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>diag_scan4x4_inv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>diag_scan8x8_inv</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">35</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">42</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">48</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">53</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">57</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">63</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_hevc_save_states</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_addr_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ctb_addr_ts</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name>ctb_addr_ts</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cabac_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cabac_state</name></name></expr></argument>, <argument><expr><name>HEVC_CONTEXTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_states</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cabac_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cabac_state</name></name></expr></argument>, <argument><expr><name>HEVC_CONTEXTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cabac_reinit</name><parameter_list>(<parameter><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>skip_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cabac_init_decoder</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_init_cabac_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cabac_init_state</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>init_type</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>cabac_init_flag</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_type</name></name> <operator>!=</operator> <name>HEVC_SLICE_I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>init_type</name> <operator>^=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HEVC_CONTEXTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>init_value</name> <init>= <expr><name><name>init_values</name><index>[<expr><name>init_type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>-</operator> <literal type="number">45</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>init_value</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>m</name> <operator>*</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_qp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">127</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pre</name> <operator>^=</operator> <name>pre</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>&gt;</operator> <literal type="number">124</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">124</literal> <operator>+</operator> <operator>(</operator><name>pre</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cabac_state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pre</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cabac_init</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_addr_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctb_addr_ts</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_ctb_addr_rs</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cabac_init_decoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>dependent_slice_segment_flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cabac_init_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>first_slice_in_pic_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctb_addr_ts</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cabac_init_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>dependent_slice_segment_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_states</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>threads_number</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cabac_reinit</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cabac_init_decoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cabac_init_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctb_addr_ts</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>threads_number</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cabac_reinit</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cabac_init_decoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cabac_init_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_states</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CABAC</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_cabac(&amp;s-&gt;HEVClc-&gt;cc, &amp;s-&gt;HEVClc-&gt;cabac_state[ctx])</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>ff_hevc_sao_merge_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SAO_MERGE_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_sao_type_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SAO_TYPE_IDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SAO_BAND</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>SAO_EDGE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_sao_band_position_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_sao_offset_abs_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_sao_offset_sign_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_sao_eo_class_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_end_of_slice_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cu_transquant_bypass_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CU_TRANSQUANT_BYPASS_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_skip_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_cb_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0b</name> <init>= <expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y0b</name> <init>= <expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>ctb_left_flag</name></name> <operator>||</operator> <name>x0b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>SAMPLE_CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_flag</name></name></expr></argument>, <argument><expr><name>x_cb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>ctb_up_flag</name></name> <operator>||</operator> <name>y0b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inc</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><call><name>SAMPLE_CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_flag</name></name></expr></argument>, <argument><expr><name>x_cb</name></expr></argument>, <argument><expr><name>y_cb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SKIP_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cu_qp_delta_abs</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suffix_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>prefix_val</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CU_QP_DELTA</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix_val</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>prefix_val</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>suffix_val</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>suffix_val</name> <operator>+=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>prefix_val</name> <operator>+</operator> <name>suffix_val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cu_qp_delta_sign_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cu_chroma_qp_offset_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CU_CHROMA_QP_OFFSET_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cu_chroma_qp_offset_idx</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_max</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>c_max</name> <operator>&amp;&amp;</operator> <call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CU_CHROMA_QP_OFFSET_IDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PRED_MODE_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_split_coding_unit_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ct_depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>depth_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>depth_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0b</name> <init>= <expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y0b</name> <init>= <expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_cb</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_cb</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>ctb_left_flag</name></name> <operator>||</operator> <name>x0b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>depth_left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tab_ct_depth</name><index>[<expr><operator>(</operator><name>y_cb</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name> <operator>+</operator> <name>x_cb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>ctb_up_flag</name></name> <operator>||</operator> <name>y0b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>depth_top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tab_ct_depth</name><index>[<expr><operator>(</operator><name>y_cb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name> <operator>+</operator> <name>x_cb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inc</name> <operator>+=</operator> <operator>(</operator><name>depth_left</name> <operator>&gt;</operator> <name>ct_depth</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>+=</operator> <operator>(</operator><name>depth_top</name> <operator>&gt;</operator> <name>ct_depth</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SPLIT_CODING_UNIT_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_part_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_2Nx2N</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log2_cb_size</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTRA</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_NxN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_2NxN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log2_cb_size</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_Nx2N</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_Nx2N</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PART_NxN</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_2NxN</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PART_Nx2N</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_2NxN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_2NxnD</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PART_2NxnU</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PART_MODE</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_Nx2N</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>PART_nRx2N</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PART_nLx2N</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_pcm_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_prev_intra_luma_pred_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>PREV_INTRA_LUMA_PRED_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_mpm_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_rem_intra_luma_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_intra_chroma_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>INTRA_CHROMA_PRED_MODE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_merge_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>MERGE_IDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>max_num_merge_cand</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_merge_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>MERGE_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_inter_pred_idc_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nPbW</name> <operator>+</operator> <name>nPbH</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>INTER_PRED_IDC</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>INTER_PRED_IDC</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>ct_depth</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PRED_BI</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>INTER_PRED_IDC</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_ref_idx_lx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ref_idx_lx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name>num_ref_idx_lx</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_ctx</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max_ctx</name> <operator>&amp;&amp;</operator> <call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>REF_IDX_L0</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_mvp_lx_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>MVP_LX_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_no_residual_syntax_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>NO_RESIDUAL_DATA_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>abs_mvd_greater0_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>ABS_MVD_GREATER0_FLAG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>abs_mvd_greater1_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>ABS_MVD_GREATER1_FLAG</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>mvd_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>CABAC_MAX_BIN</name> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>CABAC_MAX_BIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>get_cabac_bypass_sign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>mvd_sign_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_cabac_bypass_sign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_split_transform_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SPLIT_TRANSFORM_FLAG</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal> <operator>-</operator> <name>log2_trafo_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cbf_cb_cr_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trafo_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CBF_CB_CR</name></expr>]</index></name> <operator>+</operator> <name>trafo_depth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_cbf_luma_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trafo_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>CBF_LUMA</name></expr>]</index></name> <operator>+</operator> <operator>!</operator><name>trafo_depth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_transform_skip_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>TRANSFORM_SKIP_FLAG</name></expr>]</index></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>explicit_rdpcm_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>EXPLICIT_RDPCM_FLAG</name></expr>]</index></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>explicit_rdpcm_dir_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>EXPLICIT_RDPCM_DIR_FLAG</name></expr>]</index></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_log2_res_scale_abs</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>LOG2_RES_SCALE_ABS</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>idx</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_res_scale_sign_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>RES_SCALE_SIGN_FLAG</name></expr>]</index></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>last_significant_coeff_xy_prefix_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>log2_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_scx_prefix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_scy_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><operator>(</operator><name>log2_size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctx_offset</name></decl>, <decl><type ref="prev"/><name>ctx_shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctx_offset</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>log2_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>log2_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx_shift</name> <operator>=</operator> <operator>(</operator><name>log2_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ctx_offset</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx_shift</name> <operator>=</operator> <name>log2_size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator>
<call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>LAST_SIGNIFICANT_COEFF_X_PREFIX</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>ctx_shift</name><operator>)</operator> <operator>+</operator> <name>ctx_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>last_scx_prefix</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator>
<call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>LAST_SIGNIFICANT_COEFF_Y_PREFIX</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>ctx_shift</name><operator>)</operator> <operator>+</operator> <name>ctx_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>last_scy_prefix</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>last_significant_coeff_suffix_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>last_significant_coeff_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>last_significant_coeff_prefix</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>significant_coeff_group_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx_cg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inc</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ctx_cg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>c_idx</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SIGNIFICANT_COEFF_GROUP_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>significant_coeff_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_c</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ctx_idx_map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><name><name>ctx_idx_map</name><index>[<expr><operator>(</operator><name>y_c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>x_c</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SIGNIFICANT_COEFF_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>significant_coeff_flag_decode_0</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>SIGNIFICANT_COEFF_FLAG</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>coeff_abs_level_greater1_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inc</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>COEFF_ABS_LEVEL_GREATER1_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>coeff_abs_level_greater2_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inc</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>GET_CABAC</name><argument_list>(<argument><expr><name><name>elem_offset</name><index>[<expr><name>COEFF_ABS_LEVEL_GREATER2_FLAG</name></expr>]</index></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>coeff_abs_level_remaining_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc_rice_param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suffix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_coeff_abs_level_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>prefix</name> <operator>&lt;</operator> <name>CABAC_MAX_BIN</name> <operator>&amp;&amp;</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rc_rice_param</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <operator>(</operator><name>suffix</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>last_coeff_abs_level_remaining</name> <operator>=</operator> <operator>(</operator><name>prefix</name> <operator>&lt;&lt;</operator> <name>rc_rice_param</name><operator>)</operator> <operator>+</operator> <name>suffix</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_minus3</name> <init>= <expr><name>prefix</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <name>CABAC_MAX_BIN</name> <operator>||</operator> <name>prefix_minus3</name> <operator>+</operator> <name>rc_rice_param</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prefix_minus3</name> <operator>+</operator> <name>rc_rice_param</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <operator>(</operator><name>suffix</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>last_coeff_abs_level_remaining</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>prefix_minus3</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>rc_rice_param</name><operator>)</operator> <operator>+</operator> <name>suffix</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>last_coeff_abs_level_remaining</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>coeff_sign_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_hls_residual_coding</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ScanType</name></name></type> <name>scan_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_COORD</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x_c = (x_cg &lt;&lt; 2) + scan_x_off[n]; y_c = (y_cg &lt;&lt; 2) + scan_y_off[n]; } while (0)</cpp:value></cpp:define>




<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transform_skip_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_significant_coeff_x</name></decl>, <decl><type ref="prev"/><name>last_significant_coeff_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_scan_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_coeff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>greater1_ctx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_last_subset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_cg_last_sig</name></decl>, <decl><type ref="prev"/><name>y_cg_last_sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan_x_cg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scan_y_cg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scan_x_off</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scan_y_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c_idx</name></expr>]</index><index>[<expr><operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name>vshift</name><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>c_idx</name></expr> ?</condition><then> <expr><name><name>lc</name><operator>-&gt;</operator><name>edge_emu_buffer2</name></name></expr> </then><else>: <expr><name><name>lc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>significant_coeff_group_flag</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit_rdpcm_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit_rdpcm_dir_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trafo_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>,<decl><type ref="prev"/><name>shift</name></decl>,<decl><type ref="prev"/><name>add</name></decl>,<decl><type ref="prev"/><name>scale</name></decl>,<decl><type ref="prev"/><name>scale_m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>level_scale</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scale_matrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dc_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_mode_intra</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode</name></name></expr> </then><else>:
<expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode_c</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trafo_size</name> <operator>*</operator> <name>trafo_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qp_c</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rem6</name><index>[<expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>div6</name><index>[<expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp_y</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>qp_y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<name>log2_trafo_size</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>transform_skip_flag</name> <operator>=</operator> <call><name>hevc_transform_skip_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qp_i</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_cb_qp_offset</name></name> <operator>+</operator>
<name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>cu_qp_offset_cb</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_cr_qp_offset</name></name> <operator>+</operator>
<name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>cu_qp_offset_cr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>qp_i</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qp_y</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qp_i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_i</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>qp_i</name> <operator>&gt;</operator> <literal type="number">43</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_i</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>qp_c</name><index>[<expr><name>qp_i</name> <operator>-</operator> <literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qp_i</name> <operator>&gt;</operator> <literal type="number">51</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>+</operator> <name>log2_trafo_size</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>level_scale</name><index>[<expr><name><name>rem6</name><index>[<expr><name>qp</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>div6</name><index>[<expr><name>qp</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scale_m</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>dc_scale</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>transform_skip_flag</name> <operator>&amp;&amp;</operator> <name>log2_trafo_size</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScalingList</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matrix_id</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>!=</operator> <name>MODE_INTRA</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>matrix_id</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>matrix_id</name> <operator>+</operator> <name>c_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_matrix</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log2_trafo_size</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc_scale</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>explicit_rdpcm_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>transform_skip_flag</name> <operator>||</operator> <name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explicit_rdpcm_flag</name> <operator>=</operator> <call><name>explicit_rdpcm_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>explicit_rdpcm_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explicit_rdpcm_dir_flag</name> <operator>=</operator> <call><name>explicit_rdpcm_dir_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>last_significant_coeff_xy_prefix_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>log2_trafo_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>last_significant_coeff_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_significant_coeff_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_significant_coeff_x</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>suffix</name> <init>= <expr><call><name>last_significant_coeff_suffix_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>last_significant_coeff_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>last_significant_coeff_x</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>last_significant_coeff_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>last_significant_coeff_x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<name>suffix</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_significant_coeff_y</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>suffix</name> <init>= <expr><call><name>last_significant_coeff_suffix_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>last_significant_coeff_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>last_significant_coeff_y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>last_significant_coeff_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>last_significant_coeff_y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<name>suffix</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan_idx</name> <operator>==</operator> <name>SCAN_VERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>last_significant_coeff_x</name></expr></argument>, <argument><expr><name>last_significant_coeff_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x_cg_last_sig</name> <operator>=</operator> <name>last_significant_coeff_x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_cg_last_sig</name> <operator>=</operator> <name>last_significant_coeff_y</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>scan_idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SCAN_DIAG</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_x_c</name> <init>= <expr><name>last_significant_coeff_x</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_y_c</name> <init>= <expr><name>last_significant_coeff_y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scan_x_off</name> <operator>=</operator> <name>ff_hevc_diag_scan4x4_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_off</name> <operator>=</operator> <name>ff_hevc_diag_scan4x4_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_coeff</name> <operator>=</operator> <name><name>diag_scan4x4_inv</name><index>[<expr><name>last_y_c</name></expr>]</index><index>[<expr><name>last_x_c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trafo_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>scan_1x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>scan_1x1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trafo_size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_coeff</name> <operator>+=</operator> <name><name>diag_scan2x2_inv</name><index>[<expr><name>y_cg_last_sig</name></expr>]</index><index>[<expr><name>x_cg_last_sig</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>diag_scan2x2_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>diag_scan2x2_y</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trafo_size</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_coeff</name> <operator>+=</operator> <name><name>diag_scan4x4_inv</name><index>[<expr><name>y_cg_last_sig</name></expr>]</index><index>[<expr><name>x_cg_last_sig</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>ff_hevc_diag_scan4x4_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>ff_hevc_diag_scan4x4_y</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>num_coeff</name> <operator>+=</operator> <name><name>diag_scan8x8_inv</name><index>[<expr><name>y_cg_last_sig</name></expr>]</index><index>[<expr><name>x_cg_last_sig</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>ff_hevc_diag_scan8x8_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>ff_hevc_diag_scan8x8_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>SCAN_HORIZ</name></expr>:</case>
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>horiz_scan2x2_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>horiz_scan2x2_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_x_off</name> <operator>=</operator> <name>horiz_scan4x4_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_off</name> <operator>=</operator> <name>horiz_scan4x4_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_coeff</name> <operator>=</operator> <name><name>horiz_scan8x8_inv</name><index>[<expr><name>last_significant_coeff_y</name></expr>]</index><index>[<expr><name>last_significant_coeff_x</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>scan_x_cg</name> <operator>=</operator> <name>horiz_scan2x2_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_cg</name> <operator>=</operator> <name>horiz_scan2x2_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_x_off</name> <operator>=</operator> <name>horiz_scan4x4_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_y_off</name> <operator>=</operator> <name>horiz_scan4x4_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_coeff</name> <operator>=</operator> <name><name>horiz_scan8x8_inv</name><index>[<expr><name>last_significant_coeff_x</name></expr>]</index><index>[<expr><name>last_significant_coeff_y</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>num_coeff</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num_last_subset</name> <operator>=</operator> <operator>(</operator><name>num_coeff</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_last_subset</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_cg</name></decl>, <decl><type ref="prev"/><name>y_cg</name></decl>, <decl><type ref="prev"/><name>x_c</name></decl>, <decl><type ref="prev"/><name>y_c</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>implicit_non_zero_coeff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>trans_coeff_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_sig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rice_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>significant_coeff_flag_idx</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nb_significant_coeff_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x_cg</name> <operator>=</operator> <name><name>scan_x_cg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_cg</name> <operator>=</operator> <name><name>scan_y_cg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>num_last_subset</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctx_cg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x_cg</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctx_cg</name> <operator>+=</operator> <name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>y_cg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y_cg</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctx_cg</name> <operator>+=</operator> <name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name></expr>]</index><index>[<expr><name>y_cg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name></expr>]</index><index>[<expr><name>y_cg</name></expr>]</index></name> <operator>=</operator>
<call><name>significant_coeff_group_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>ctx_cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>implicit_non_zero_coeff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name></expr>]</index><index>[<expr><name>y_cg</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>x_cg</name> <operator>==</operator> <name>x_cg_last_sig</name> <operator>&amp;&amp;</operator> <name>y_cg</name> <operator>==</operator> <name>y_cg_last_sig</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>x_cg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y_cg</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_scan_pos</name> <operator>=</operator> <name>num_coeff</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_last_subset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_end</name> <operator>=</operator> <name>last_scan_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>significant_coeff_flag_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>last_scan_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_significant_coeff_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n_end</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x_cg</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_sig</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>y_cg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y_cg</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_sig</name> <operator>+=</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name></expr>]</index><index>[<expr><name>y_cg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>significant_coeff_group_flag</name><index>[<expr><name>x_cg</name></expr>]</index><index>[<expr><name>y_cg</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>n_end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ctx_idx_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ctx_idx_map_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scf_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>transform_skip_flag</name> <operator>||</operator> <name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctx_idx_map_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ctx_idx_map</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">14</literal> <operator>+</operator> <literal type="number">27</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log2_trafo_size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctx_idx_map_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ctx_idx_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ctx_idx_map_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ctx_idx_map</name><index>[<expr><operator>(</operator><name>prev_sig</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x_cg</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y_cg</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log2_trafo_size</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>scan_idx</name> <operator>==</operator> <name>SCAN_DIAG</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>+=</operator> <literal type="number">21</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>log2_trafo_size</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>n_end</name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x_c</name> <operator>=</operator> <name><name>scan_x_off</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_c</name> <operator>=</operator> <name><name>scan_y_off</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>significant_coeff_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_c</name></expr></argument>, <argument><expr><name>y_c</name></expr></argument>, <argument><expr><name>scf_offset</name></expr></argument>, <argument><expr><name>ctx_idx_map_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>significant_coeff_flag_idx</name><index>[<expr><name>nb_significant_coeff_flag</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_significant_coeff_flag</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>implicit_non_zero_coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>implicit_non_zero_coeff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>transform_skip_flag</name> <operator>||</operator> <name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">27</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scf_offset</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>scf_offset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>significant_coeff_flag_decode_0</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>scf_offset</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>significant_coeff_flag_idx</name><index>[<expr><name>nb_significant_coeff_flag</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_significant_coeff_flag</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>significant_coeff_flag_idx</name><index>[<expr><name>nb_significant_coeff_flag</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_significant_coeff_flag</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n_end</name> <operator>=</operator> <name>nb_significant_coeff_flag</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first_nz_pos_in_cg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_nz_pos_in_cg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_rice_param</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_greater1_coeff_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>coeff_abs_level_greater1_flag</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>coeff_sign_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum_abs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign_hidden</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sb_type</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>ctx_set</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transform_skip_flag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sb_type</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sb_type</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>c_rice_param</name> <operator>=</operator> <name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>==</operator> <name>num_last_subset</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>greater1_ctx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctx_set</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>greater1_ctx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_nz_pos_in_cg</name> <operator>=</operator> <name><name>significant_coeff_flag_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>n_end</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>n_end</name></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><operator>(</operator><name>ctx_set</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>greater1_ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coeff_abs_level_greater1_flag</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator>
<call><name>coeff_abs_level_greater1_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coeff_abs_level_greater1_flag</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>greater1_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_greater1_coeff_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_greater1_coeff_idx</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>greater1_ctx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>greater1_ctx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>greater1_ctx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>first_nz_pos_in_cg</name> <operator>=</operator> <name><name>significant_coeff_flag_idx</name><index>[<expr><name>n_end</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name> <operator>||</operator>
<operator>(</operator><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTRA</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name> <operator>&amp;&amp;</operator> <name>transform_skip_flag</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>pred_mode_intra</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>pred_mode_intra</name> <operator>==</operator> <literal type="number">26</literal> <operator>)</operator><operator>)</operator> <operator>||</operator>
<name>explicit_rdpcm_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign_hidden</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sign_hidden</name> <operator>=</operator> <operator>(</operator><name>last_nz_pos_in_cg</name> <operator>-</operator> <name>first_nz_pos_in_cg</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_greater1_coeff_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coeff_abs_level_greater1_flag</name><index>[<expr><name>first_greater1_coeff_idx</name></expr>]</index></name> <operator>+=</operator> <call><name>coeff_abs_level_greater2_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>ctx_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name> <operator>||</operator> <operator>!</operator><name>sign_hidden</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>coeff_sign_flag</name> <operator>=</operator> <call><name>coeff_sign_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nb_significant_coeff_flag</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>nb_significant_coeff_flag</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>coeff_sign_flag</name> <operator>=</operator> <call><name>coeff_sign_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nb_significant_coeff_flag</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>nb_significant_coeff_flag</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>n_end</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>significant_coeff_flag_idx</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_COORD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>coeff_abs_level_greater1_flag</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trans_coeff_level</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>m</name> <operator>==</operator> <name>first_greater1_coeff_idx</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_coeff_abs_level_remaining</name> <init>= <expr><call><name>coeff_abs_level_remaining_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_rice_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>trans_coeff_level</name> <operator>+=</operator> <name>last_coeff_abs_level_remaining</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trans_coeff_level</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>c_rice_param</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c_rice_param</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr> ?</condition><then> <expr><name>c_rice_param</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c_rice_param</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rice_init</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_rice_p_init</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last_coeff_abs_level_remaining</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>c_rice_p_init</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>last_coeff_abs_level_remaining</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c_rice_p_init</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rice_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_coeff_abs_level_remaining</name> <init>= <expr><call><name>coeff_abs_level_remaining_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_rice_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>last_coeff_abs_level_remaining</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trans_coeff_level</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>c_rice_param</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c_rice_param</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr> ?</condition><then> <expr><name>c_rice_param</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c_rice_param</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rice_init</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_rice_p_init</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last_coeff_abs_level_remaining</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>c_rice_p_init</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>last_coeff_abs_level_remaining</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c_rice_p_init</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>stat_coeff</name><index>[<expr><name>sb_type</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rice_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name> <operator>&amp;&amp;</operator> <name>sign_hidden</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum_abs</name> <operator>+=</operator> <name>trans_coeff_level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>first_nz_pos_in_cg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sum_abs</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <operator>-</operator><name>trans_coeff_level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_sign_flag</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <operator>-</operator><name>trans_coeff_level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coeff_sign_flag</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>transform_skip_flag</name> <operator>&amp;&amp;</operator> <name>log2_trafo_size</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>y_c</name> <operator>||</operator> <name>x_c</name> <operator>||</operator> <name>log2_trafo_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>log2_trafo_size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>y_c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>x_c</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y_c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y_c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>y_c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>x_c</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>scale_m</name> <operator>=</operator> <name><name>scale_matrix</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scale_m</name> <operator>=</operator> <name>dc_scale</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <operator>(</operator><name>trans_coeff_level</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>scale</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>scale_m</name> <operator>+</operator> <name>add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>trans_coeff_level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>~</operator><name>trans_coeff_level</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFffffffffff8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>trans_coeff_level</name> <operator>&amp;</operator> <literal type="number">0xffffffffffff8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_coeff_level</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>y_c</name> <operator>*</operator> <name>trafo_size</name> <operator>+</operator> <name>x_c</name></expr>]</index></name> <operator>=</operator> <name>trans_coeff_level</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>cu_transquant_bypass_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>explicit_rdpcm_flag</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>pred_mode_intra</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>pred_mode_intra</name> <operator>==</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>pred_mode_intra</name> <operator>==</operator> <literal type="number">26</literal><operator>)</operator></expr> </then><else>: <expr><name>explicit_rdpcm_dir_flag</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>transform_rdpcm</name></name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>log2_trafo_size</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transform_skip_flag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rot</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_skip_rotation_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<name>log2_trafo_size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTRA</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rot</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><literal type="number">16</literal> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>dequant</name></name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>log2_trafo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>explicit_rdpcm_flag</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTRA</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>pred_mode_intra</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>pred_mode_intra</name> <operator>==</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>explicit_rdpcm_flag</name></expr> ?</condition><then> <expr><name>explicit_rdpcm_dir_flag</name></expr> </then><else>: <expr><operator>(</operator><name>pred_mode_intra</name> <operator>==</operator> <literal type="number">26</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>transform_rdpcm</name></name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>log2_trafo_size</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>cu</name><operator>.</operator><name>pred_mode</name></name> <operator>==</operator> <name>MODE_INTRA</name> <operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>log2_trafo_size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>transform_4x4_luma</name></name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_xy</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>last_significant_coeff_x</name></expr></argument>, <argument><expr><name>last_significant_coeff_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_xy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>idct_dc</name><index>[<expr><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>(</operator><name>coeffs</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col_limit</name> <init>= <expr><name>last_significant_coeff_x</name> <operator>+</operator> <name>last_significant_coeff_y</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_xy</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>col_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>max_xy</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>col_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>max_xy</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>col_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>idct</name><index>[<expr><name>log2_trafo_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>(</operator><name>coeffs</name><operator>,</operator> <name>col_limit</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>cross_pf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs_y</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>lc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>trafo_size</name> <operator>*</operator> <name>trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>res_scale_val</name></name> <operator>*</operator> <name><name>coeffs_y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>add_residual</name><index>[<expr><name>log2_trafo_size</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>coeffs</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_hls_mvd_coding</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>abs_mvd_greater0_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>abs_mvd_greater0_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>abs_mvd_greater1_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>abs_mvd_greater1_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mvd_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mvd_sign_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>mvd_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>mvd_sign_flag_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>pu</name><operator>.</operator><name>mvd</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

</unit>
