<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\sbcdsp.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbcdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbcdsp_data.h"</cpp:file></cpp:include>




















<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>sbc_analyze_simd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>subbands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>t2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>hop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SBC_PROTO_FIXED_SCALE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>hop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hop</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>*</operator><name>subbands</name></expr>;</condition> <incr><expr><name>hop</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>subbands</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t1</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>hop</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>consts</name><index>[<expr><name>hop</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SBC_PROTO_FIXED_SCALE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subbands</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>subbands</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t1</name><index>[<expr><name>j</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>t2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>*</operator> <name><name>consts</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>subbands</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>subbands</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>SBC_COS_TABLE_FIXED_SCALE</name> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbc_analyze_4_simd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sbc_analyze_simd</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>consts</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbc_analyze_8_simd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sbc_analyze_simd</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>consts</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_analyze_4b_4s_simd</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed4_simd_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed4_simd_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed4_simd_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed4_simd_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_analyze_4b_8s_simd</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_analyze_1b_8s_simd_even</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_analyze_1b_8s_simd_odd</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8s</name></name> <operator>=</operator> <name>sbc_analyze_1b_8s_simd_even</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_analyze_1b_8s_simd_even</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ff_sbcdsp_analysis_consts_fixed8_simd_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8s</name></name> <operator>=</operator> <name>sbc_analyze_1b_8s_simd_odd</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_enc_process_input_4s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>nsamples</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">36</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name>SBC_X_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>nsamples</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>nsamples</name> <operator>-=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>pcm</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nchannels</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">14</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>position</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_enc_process_input_8s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>nsamples</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">72</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">72</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name>SBC_X_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">72</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nsamples</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">14</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pcm</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nchannels</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>nsamples</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>nsamples</name> <operator>-=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>pcm</name> <operator>+=</operator> <literal type="number">32</literal> <operator>*</operator> <name>nchannels</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">30</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">14</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">28</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">24</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">20</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">22</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nsamples</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>nchannels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>position</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">14</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>nchannels</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>position</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbc_calc_scalefactors</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_calc_scalefactors_j</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>joint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>sb</name> <init>= <expr><name>subbands</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>tmp0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>|=</operator> <name>tmp1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>--</operator><name>sb</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>sb_sample_j</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tmp1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>tmp1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>tmp0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>|=</operator> <name>tmp1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator>
<call><name>ff_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator>
<call><name>ff_clz</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCALE_OUT_BITS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>tmp0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>|=</operator> <name>tmp1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>SCALE_OUT_BITS</name><operator>)</operator> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>scale_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator> <name><name>scale_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>x</name> <operator>+</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>joint</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>subbands</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>sb</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb_sample_f</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>sb_sample_j</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<return>return <expr><name>joint</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sbcdsp_init</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name> <operator>=</operator> <name>sbc_analyze_4_simd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name> <operator>=</operator> <name>sbc_analyze_8_simd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4s</name></name> <operator>=</operator> <name>sbc_analyze_4b_4s_simd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>increment</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8s</name></name> <operator>=</operator> <name>sbc_analyze_1b_8s_simd_odd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8s</name></name> <operator>=</operator> <name>sbc_analyze_4b_8s_simd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_enc_process_input_4s</name></name> <operator>=</operator> <name>sbc_enc_process_input_4s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_enc_process_input_8s</name></name> <operator>=</operator> <name>sbc_enc_process_input_8s</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_calc_scalefactors</name></name> <operator>=</operator> <name>sbc_calc_scalefactors</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_calc_scalefactors_j</name></name> <operator>=</operator> <name>sbc_calc_scalefactors_j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_sbcdsp_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_sbcdsp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
