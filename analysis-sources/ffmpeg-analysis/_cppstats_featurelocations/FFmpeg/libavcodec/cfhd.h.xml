<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cfhd.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_CFHD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_CFHD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBBAND_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CFHD_RL_VLC_ELEM</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>run</name></decl>;</decl_stmt>
}</block></struct></type> <name>CFHD_RL_VLC_ELEM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWT_LEVELS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SubBand</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ibuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>SubBand</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Plane</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>idwt_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>idwt_tmp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>subband</name><index>[<expr><name>SUBBAND_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>l_h</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SubBand</name></type> <name><name>band</name><index>[<expr><name>DWT_LEVELS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Plane</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Peak</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>base</name></decl>;</decl_stmt>
}</block></struct></type> <name>Peak</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CFHDContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFHD_RL_VLC_ELEM</name></type> <name><name>table_9_rl_vlc</name><index>[<expr><literal type="number">2088</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc_9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFHD_RL_VLC_ELEM</name></type> <name><name>table_18_rl_vlc</name><index>[<expr><literal type="number">4572</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc_18</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coded_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coded_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cropped_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>coded_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>progressive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lowpass_precision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>quantisation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wavelet_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codebook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>difference_coding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband_num_actual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prescale_shift</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Plane</name></type> <name><name>plane</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Peak</name></type> <name>peak</name></decl>;</decl_stmt>
}</block></struct></type> <name>CFHDContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_cfhd_init_vlcs</name><parameter_list>(<parameter><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
